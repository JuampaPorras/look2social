#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace SmartSocial.Data
{
    /// <summary>
    /// The query extension class for DataProviderXChartType.
    /// </summary>
    public static partial class DataProviderXChartTypeExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SmartSocial.Data.DataProviderXChartType GetByKey(this IQueryable<SmartSocial.Data.DataProviderXChartType> queryable, int idDataProvider, int idChartType)
        {
            var entity = queryable as System.Data.Linq.Table<SmartSocial.Data.DataProviderXChartType>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((SmartSocial.Data.SmartSocialdbDataContext)entity.Context, idDataProvider, idChartType);

            return queryable.FirstOrDefault(d => d.IdDataProvider == idDataProvider 
					&& d.IdChartType == idChartType);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<SmartSocial.Data.DataProviderXChartType> table, int idDataProvider, int idChartType)
        {
            return table.Delete(d => d.IdDataProvider == idDataProvider 
					&& d.IdChartType == idChartType);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.DataProviderXChartType.IdDataProvider"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idDataProvider">IdDataProvider to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.DataProviderXChartType> ByIdDataProvider(this IQueryable<SmartSocial.Data.DataProviderXChartType> queryable, int idDataProvider)
        {
            return queryable.Where(d => d.IdDataProvider == idDataProvider);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.DataProviderXChartType.IdDataProvider"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idDataProvider">IdDataProvider to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.DataProviderXChartType> ByIdDataProvider(this IQueryable<SmartSocial.Data.DataProviderXChartType> queryable, ComparisonOperator comparisonOperator, int idDataProvider)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(d => d.IdDataProvider > idDataProvider);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(d => d.IdDataProvider >= idDataProvider);
                case ComparisonOperator.LessThan:
                    return queryable.Where(d => d.IdDataProvider < idDataProvider);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(d => d.IdDataProvider <= idDataProvider);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(d => d.IdDataProvider != idDataProvider);
                default:
                    return queryable.Where(d => d.IdDataProvider == idDataProvider);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.DataProviderXChartType.IdDataProvider"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idDataProvider">IdDataProvider to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.DataProviderXChartType> ByIdDataProvider(this IQueryable<SmartSocial.Data.DataProviderXChartType> queryable, int idDataProvider, params int[] additionalValues)
        {
            var idDataProviderList = new List<int> { idDataProvider };

            if (additionalValues != null)
                idDataProviderList.AddRange(additionalValues);

            if (idDataProviderList.Count == 1)
                return queryable.ByIdDataProvider(idDataProviderList[0]);

            return queryable.ByIdDataProvider(idDataProviderList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.DataProviderXChartType.IdDataProvider"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.DataProviderXChartType> ByIdDataProvider(this IQueryable<SmartSocial.Data.DataProviderXChartType> queryable, IEnumerable<int> values)
        {
            return queryable.Where(d => values.Contains(d.IdDataProvider));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.DataProviderXChartType.IdChartType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idChartType">IdChartType to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.DataProviderXChartType> ByIdChartType(this IQueryable<SmartSocial.Data.DataProviderXChartType> queryable, int idChartType)
        {
            return queryable.Where(d => d.IdChartType == idChartType);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.DataProviderXChartType.IdChartType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idChartType">IdChartType to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.DataProviderXChartType> ByIdChartType(this IQueryable<SmartSocial.Data.DataProviderXChartType> queryable, ComparisonOperator comparisonOperator, int idChartType)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(d => d.IdChartType > idChartType);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(d => d.IdChartType >= idChartType);
                case ComparisonOperator.LessThan:
                    return queryable.Where(d => d.IdChartType < idChartType);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(d => d.IdChartType <= idChartType);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(d => d.IdChartType != idChartType);
                default:
                    return queryable.Where(d => d.IdChartType == idChartType);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.DataProviderXChartType.IdChartType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idChartType">IdChartType to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.DataProviderXChartType> ByIdChartType(this IQueryable<SmartSocial.Data.DataProviderXChartType> queryable, int idChartType, params int[] additionalValues)
        {
            var idChartTypeList = new List<int> { idChartType };

            if (additionalValues != null)
                idChartTypeList.AddRange(additionalValues);

            if (idChartTypeList.Count == 1)
                return queryable.ByIdChartType(idChartTypeList[0]);

            return queryable.ByIdChartType(idChartTypeList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.DataProviderXChartType.IdChartType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.DataProviderXChartType> ByIdChartType(this IQueryable<SmartSocial.Data.DataProviderXChartType> queryable, IEnumerable<int> values)
        {
            return queryable.Where(d => values.Contains(d.IdChartType));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.DataProviderXChartType.FileLoadFunctionName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fileLoadFunctionName">FileLoadFunctionName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.DataProviderXChartType> ByFileLoadFunctionName(this IQueryable<SmartSocial.Data.DataProviderXChartType> queryable, string fileLoadFunctionName)
        {
            // support nulls
            return fileLoadFunctionName == null 
                ? queryable.Where(d => d.FileLoadFunctionName == null) 
                : queryable.Where(d => d.FileLoadFunctionName == fileLoadFunctionName);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.DataProviderXChartType.FileLoadFunctionName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fileLoadFunctionName">FileLoadFunctionName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.DataProviderXChartType> ByFileLoadFunctionName(this IQueryable<SmartSocial.Data.DataProviderXChartType> queryable, ContainmentOperator containmentOperator, string fileLoadFunctionName)
        {
            if (fileLoadFunctionName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("fileLoadFunctionName", "Parameter 'fileLoadFunctionName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.FileLoadFunctionName.Contains(fileLoadFunctionName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.FileLoadFunctionName.StartsWith(fileLoadFunctionName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.FileLoadFunctionName.EndsWith(fileLoadFunctionName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.FileLoadFunctionName.Contains(fileLoadFunctionName) == false);
                case ContainmentOperator.NotEquals:
                    return fileLoadFunctionName == null 
                        ? queryable.Where(d => d.FileLoadFunctionName != null) 
                        : queryable.Where(d => d.FileLoadFunctionName != fileLoadFunctionName);
                default:
                    return fileLoadFunctionName == null 
                        ? queryable.Where(d => d.FileLoadFunctionName == null) 
                        : queryable.Where(d => d.FileLoadFunctionName == fileLoadFunctionName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.DataProviderXChartType.FileLoadFunctionName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fileLoadFunctionName">FileLoadFunctionName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.DataProviderXChartType> ByFileLoadFunctionName(this IQueryable<SmartSocial.Data.DataProviderXChartType> queryable, string fileLoadFunctionName, params string[] additionalValues)
        {
            var fileLoadFunctionNameList = new List<string> { fileLoadFunctionName };

            if (additionalValues != null)
                fileLoadFunctionNameList.AddRange(additionalValues);
            else
                fileLoadFunctionNameList.Add(null);

            if (fileLoadFunctionNameList.Count == 1)
                return queryable.ByFileLoadFunctionName(fileLoadFunctionNameList[0]);

            return queryable.ByFileLoadFunctionName(fileLoadFunctionNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.DataProviderXChartType.FileLoadFunctionName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.DataProviderXChartType> ByFileLoadFunctionName(this IQueryable<SmartSocial.Data.DataProviderXChartType> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.DataProviderXChartType, bool>("FileLoadFunctionName", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<SmartSocial.Data.SmartSocialdbDataContext, int, int, SmartSocial.Data.DataProviderXChartType> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (SmartSocial.Data.SmartSocialdbDataContext db, int idDataProvider, int idChartType) =>
                        db.DataProviderXChartType.FirstOrDefault(d => d.IdDataProvider == idDataProvider 
							&& d.IdChartType == idChartType));

        }
        #endregion
    }
}
#pragma warning restore 1591
