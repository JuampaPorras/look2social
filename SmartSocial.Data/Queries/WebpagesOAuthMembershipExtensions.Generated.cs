#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace SmartSocial.Data
{
    /// <summary>
    /// The query extension class for WebpagesOAuthMembership.
    /// </summary>
    public static partial class WebpagesOAuthMembershipExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SmartSocial.Data.WebpagesOAuthMembership GetByKey(this IQueryable<SmartSocial.Data.WebpagesOAuthMembership> queryable, string provider, string providerUserId)
        {
            var entity = queryable as System.Data.Linq.Table<SmartSocial.Data.WebpagesOAuthMembership>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((SmartSocial.Data.SmartSocialdbDataContext)entity.Context, provider, providerUserId);

            return queryable.FirstOrDefault(w => w.Provider == provider 
					&& w.ProviderUserId == providerUserId);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<SmartSocial.Data.WebpagesOAuthMembership> table, string provider, string providerUserId)
        {
            return table.Delete(w => w.Provider == provider 
					&& w.ProviderUserId == providerUserId);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesOAuthMembership.Provider"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="provider">Provider to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesOAuthMembership> ByProvider(this IQueryable<SmartSocial.Data.WebpagesOAuthMembership> queryable, string provider)
        {
            return queryable.Where(w => w.Provider == provider);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesOAuthMembership.Provider"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="provider">Provider to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesOAuthMembership> ByProvider(this IQueryable<SmartSocial.Data.WebpagesOAuthMembership> queryable, ContainmentOperator containmentOperator, string provider)
        {
            if (provider == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("provider", "Parameter 'provider' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(w => w.Provider.Contains(provider));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(w => w.Provider.StartsWith(provider));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(w => w.Provider.EndsWith(provider));
                case ContainmentOperator.NotContains:
                    return queryable.Where(w => w.Provider.Contains(provider) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(w => w.Provider != provider);
                default:
                    return queryable.Where(w => w.Provider == provider);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesOAuthMembership.Provider"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="provider">Provider to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesOAuthMembership> ByProvider(this IQueryable<SmartSocial.Data.WebpagesOAuthMembership> queryable, string provider, params string[] additionalValues)
        {
            var providerList = new List<string> { provider };

            if (additionalValues != null)
                providerList.AddRange(additionalValues);

            if (providerList.Count == 1)
                return queryable.ByProvider(providerList[0]);

            return queryable.ByProvider(providerList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesOAuthMembership.Provider"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesOAuthMembership> ByProvider(this IQueryable<SmartSocial.Data.WebpagesOAuthMembership> queryable, IEnumerable<string> values)
        {
            return queryable.Where(w => values.Contains(w.Provider));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesOAuthMembership.ProviderUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="providerUserId">ProviderUserId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesOAuthMembership> ByProviderUserId(this IQueryable<SmartSocial.Data.WebpagesOAuthMembership> queryable, string providerUserId)
        {
            return queryable.Where(w => w.ProviderUserId == providerUserId);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesOAuthMembership.ProviderUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="providerUserId">ProviderUserId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesOAuthMembership> ByProviderUserId(this IQueryable<SmartSocial.Data.WebpagesOAuthMembership> queryable, ContainmentOperator containmentOperator, string providerUserId)
        {
            if (providerUserId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("providerUserId", "Parameter 'providerUserId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(w => w.ProviderUserId.Contains(providerUserId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(w => w.ProviderUserId.StartsWith(providerUserId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(w => w.ProviderUserId.EndsWith(providerUserId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(w => w.ProviderUserId.Contains(providerUserId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(w => w.ProviderUserId != providerUserId);
                default:
                    return queryable.Where(w => w.ProviderUserId == providerUserId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesOAuthMembership.ProviderUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="providerUserId">ProviderUserId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesOAuthMembership> ByProviderUserId(this IQueryable<SmartSocial.Data.WebpagesOAuthMembership> queryable, string providerUserId, params string[] additionalValues)
        {
            var providerUserIdList = new List<string> { providerUserId };

            if (additionalValues != null)
                providerUserIdList.AddRange(additionalValues);

            if (providerUserIdList.Count == 1)
                return queryable.ByProviderUserId(providerUserIdList[0]);

            return queryable.ByProviderUserId(providerUserIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesOAuthMembership.ProviderUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesOAuthMembership> ByProviderUserId(this IQueryable<SmartSocial.Data.WebpagesOAuthMembership> queryable, IEnumerable<string> values)
        {
            return queryable.Where(w => values.Contains(w.ProviderUserId));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesOAuthMembership.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesOAuthMembership> ByUserId(this IQueryable<SmartSocial.Data.WebpagesOAuthMembership> queryable, int userId)
        {
            return queryable.Where(w => w.UserId == userId);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesOAuthMembership.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesOAuthMembership> ByUserId(this IQueryable<SmartSocial.Data.WebpagesOAuthMembership> queryable, ComparisonOperator comparisonOperator, int userId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(w => w.UserId > userId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(w => w.UserId >= userId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(w => w.UserId < userId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(w => w.UserId <= userId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(w => w.UserId != userId);
                default:
                    return queryable.Where(w => w.UserId == userId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesOAuthMembership.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesOAuthMembership> ByUserId(this IQueryable<SmartSocial.Data.WebpagesOAuthMembership> queryable, int userId, params int[] additionalValues)
        {
            var userIdList = new List<int> { userId };

            if (additionalValues != null)
                userIdList.AddRange(additionalValues);

            if (userIdList.Count == 1)
                return queryable.ByUserId(userIdList[0]);

            return queryable.ByUserId(userIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesOAuthMembership.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesOAuthMembership> ByUserId(this IQueryable<SmartSocial.Data.WebpagesOAuthMembership> queryable, IEnumerable<int> values)
        {
            return queryable.Where(w => values.Contains(w.UserId));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<SmartSocial.Data.SmartSocialdbDataContext, string, string, SmartSocial.Data.WebpagesOAuthMembership> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (SmartSocial.Data.SmartSocialdbDataContext db, string provider, string providerUserId) =>
                        db.WebpagesOAuthMembership.FirstOrDefault(w => w.Provider == provider 
							&& w.ProviderUserId == providerUserId));

        }
        #endregion
    }
}
#pragma warning restore 1591
