//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace SmartSocialServices.DataTransferObjects
{
    
    [DataContract(Name = "SmartReportDto", Namespace = "http://www.SmartSocial.com/dto/" , IsReference = true) ]
    public partial class SmartReportDto
    {
         #region Primitive Properties
    	
    	[DataMember(EmitDefaultValue = false)]
        public virtual int idSmartReport
        {
            get;
            set;
        }
    	
    	[DataMember(EmitDefaultValue = false)]
        public virtual Nullable<int> idServiceDelivery
        {
     
    		
            get { return _idServiceDelivery; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_idServiceDelivery != value)
                    {
                        if (ServiceDelivery != null && ServiceDelivery.idServiceDelivery != value)
                        {
                            ServiceDelivery = null;
                        }
                        _idServiceDelivery = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _idServiceDelivery;
    	
    	[DataMember(EmitDefaultValue = false)]
        public virtual string ReportName
        {
            get;
            set;
        }
    	
    	[DataMember(EmitDefaultValue = false)]
        public virtual string Insights
        {
            get;
            set;
        }
    	
    	[DataMember(EmitDefaultValue = false)]
        public virtual Nullable<System.DateTime> DateCreated
        {
            get;
            set;
        }
    	
    	[DataMember(EmitDefaultValue = false)]
        public virtual Nullable<bool> isTemplate
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    	[DataMember(EmitDefaultValue = false)]
        public virtual ServiceDeliveryDto ServiceDelivery
        {
            get { return _serviceDelivery; }
            set
            {
                if (!ReferenceEquals(_serviceDelivery, value))
                {
                    var previousValue = _serviceDelivery;
                    _serviceDelivery = value;
                    FixupServiceDelivery(previousValue);
                }
            }
        }
        private ServiceDeliveryDto _serviceDelivery;
    
    	[DataMember(EmitDefaultValue = false)]
        public virtual ICollection<SharedReportDto> SharedReports
        {
            get
            {
                if (_sharedReports == null)
                {
                    var newCollection = new FixupCollection<SharedReportDto>();
                    newCollection.CollectionChanged += FixupSharedReports;
                    _sharedReports = newCollection;
                }
                return _sharedReports;
            }
            set
            {
                if (!ReferenceEquals(_sharedReports, value))
                {
                    var previousValue = _sharedReports as FixupCollection<SharedReportDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSharedReports;
                    }
                    _sharedReports = value;
                    var newValue = value as FixupCollection<SharedReportDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSharedReports;
                    }
                }
            }
        }
        private ICollection<SharedReportDto> _sharedReports;
    
    	[DataMember(EmitDefaultValue = false)]
        public virtual ICollection<SmartChartDto> SmartCharts
        {
            get
            {
                if (_smartCharts == null)
                {
                    var newCollection = new FixupCollection<SmartChartDto>();
                    newCollection.CollectionChanged += FixupSmartCharts;
                    _smartCharts = newCollection;
                }
                return _smartCharts;
            }
            set
            {
                if (!ReferenceEquals(_smartCharts, value))
                {
                    var previousValue = _smartCharts as FixupCollection<SmartChartDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSmartCharts;
                    }
                    _smartCharts = value;
                    var newValue = value as FixupCollection<SmartChartDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSmartCharts;
                    }
                }
            }
        }
        private ICollection<SmartChartDto> _smartCharts;
    
    	[DataMember(EmitDefaultValue = false)]
        public virtual ICollection<SocialPostDto> SocialPosts
        {
            get
            {
                if (_socialPosts == null)
                {
                    var newCollection = new FixupCollection<SocialPostDto>();
                    newCollection.CollectionChanged += FixupSocialPosts;
                    _socialPosts = newCollection;
                }
                return _socialPosts;
            }
            set
            {
                if (!ReferenceEquals(_socialPosts, value))
                {
                    var previousValue = _socialPosts as FixupCollection<SocialPostDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocialPosts;
                    }
                    _socialPosts = value;
                    var newValue = value as FixupCollection<SocialPostDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocialPosts;
                    }
                }
            }
        }
        private ICollection<SocialPostDto> _socialPosts;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupServiceDelivery(ServiceDeliveryDto previousValue)
        {
            if (previousValue != null && previousValue.SmartReports.Contains(this))
            {
                previousValue.SmartReports.Remove(this);
            }
    
            if (ServiceDelivery != null)
            {
                if (!ServiceDelivery.SmartReports.Contains(this))
                {
                    ServiceDelivery.SmartReports.Add(this);
                }
                if (idServiceDelivery != ServiceDelivery.idServiceDelivery)
                {
                    idServiceDelivery = ServiceDelivery.idServiceDelivery;
                }
            }
            else if (!_settingFK)
            {
                idServiceDelivery = null;
            }
        }
    
        private void FixupSharedReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SharedReportDto item in e.NewItems)
                {
                    item.SmartReport = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SharedReportDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.SmartReport, this))
                    {
                        item.SmartReport = null;
                    }
                }
            }
        }
    
        private void FixupSmartCharts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SmartChartDto item in e.NewItems)
                {
                    item.SmartReport = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SmartChartDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.SmartReport, this))
                    {
                        item.SmartReport = null;
                    }
                }
            }
        }
    
        private void FixupSocialPosts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocialPostDto item in e.NewItems)
                {
                    item.SmartReport = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocialPostDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.SmartReport, this))
                    {
                        item.SmartReport = null;
                    }
                }
            }
        }

        #endregion

    }
}
