//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace SmartSocial.Services.V2.DataTransferObjects
{
    
    [DataContract(Name = "AspNetUserDto", Namespace = "http://www.mavizontech.com/dto/" , IsReference = true) ]
    public partial class AspNetUserDto
    {
         #region Primitive Properties
    	
    	[DataMember]
        public virtual string Id
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual string Email
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual bool EmailConfirmed
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual string PasswordHash
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual string SecurityStamp
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual string PhoneNumber
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual bool PhoneNumberConfirmed
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual bool TwoFactorEnabled
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual Nullable<System.DateTime> LockoutEndDateUtc
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual bool LockoutEnabled
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual int AccessFailedCount
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual string UserName
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual string FirstName
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual string LastName
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual string Company
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual Nullable<int> IdCompany
        {
     
    		
            get { return _idCompany; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_idCompany != value)
                    {
                        if (Company1 != null && Company1.IdCompany != value)
                        {
                            Company1 = null;
                        }
                        _idCompany = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _idCompany;
    	
    	[DataMember]
        public virtual Nullable<int> IdLastReport
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    	[DataMember]
        public virtual ICollection<AspNetUserClaimDto> AspNetUserClaims
        {
            get
            {
                if (_aspNetUserClaims == null)
                {
                    var newCollection = new FixupCollection<AspNetUserClaimDto>();
                    newCollection.CollectionChanged += FixupAspNetUserClaims;
                    _aspNetUserClaims = newCollection;
                }
                return _aspNetUserClaims;
            }
            set
            {
                if (!ReferenceEquals(_aspNetUserClaims, value))
                {
                    var previousValue = _aspNetUserClaims as FixupCollection<AspNetUserClaimDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAspNetUserClaims;
                    }
                    _aspNetUserClaims = value;
                    var newValue = value as FixupCollection<AspNetUserClaimDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAspNetUserClaims;
                    }
                }
            }
        }
        private ICollection<AspNetUserClaimDto> _aspNetUserClaims;
    
    	[DataMember]
        public virtual ICollection<AspNetUserLoginDto> AspNetUserLogins
        {
            get
            {
                if (_aspNetUserLogins == null)
                {
                    var newCollection = new FixupCollection<AspNetUserLoginDto>();
                    newCollection.CollectionChanged += FixupAspNetUserLogins;
                    _aspNetUserLogins = newCollection;
                }
                return _aspNetUserLogins;
            }
            set
            {
                if (!ReferenceEquals(_aspNetUserLogins, value))
                {
                    var previousValue = _aspNetUserLogins as FixupCollection<AspNetUserLoginDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAspNetUserLogins;
                    }
                    _aspNetUserLogins = value;
                    var newValue = value as FixupCollection<AspNetUserLoginDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAspNetUserLogins;
                    }
                }
            }
        }
        private ICollection<AspNetUserLoginDto> _aspNetUserLogins;
    
    	[DataMember]
        public virtual CompanyDto Company1
        {
            get { return _company1; }
            set
            {
                if (!ReferenceEquals(_company1, value))
                {
                    var previousValue = _company1;
                    _company1 = value;
                    FixupCompany1(previousValue);
                }
            }
        }
        private CompanyDto _company1;
    
    	[DataMember]
        public virtual ICollection<ChartCommentDto> ChartComments
        {
            get
            {
                if (_chartComments == null)
                {
                    var newCollection = new FixupCollection<ChartCommentDto>();
                    newCollection.CollectionChanged += FixupChartComments;
                    _chartComments = newCollection;
                }
                return _chartComments;
            }
            set
            {
                if (!ReferenceEquals(_chartComments, value))
                {
                    var previousValue = _chartComments as FixupCollection<ChartCommentDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChartComments;
                    }
                    _chartComments = value;
                    var newValue = value as FixupCollection<ChartCommentDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChartComments;
                    }
                }
            }
        }
        private ICollection<ChartCommentDto> _chartComments;
    
    	[DataMember]
        public virtual ICollection<UsersXSubscriptionDto> UsersXSubscriptions
        {
            get
            {
                if (_usersXSubscriptions == null)
                {
                    var newCollection = new FixupCollection<UsersXSubscriptionDto>();
                    newCollection.CollectionChanged += FixupUsersXSubscriptions;
                    _usersXSubscriptions = newCollection;
                }
                return _usersXSubscriptions;
            }
            set
            {
                if (!ReferenceEquals(_usersXSubscriptions, value))
                {
                    var previousValue = _usersXSubscriptions as FixupCollection<UsersXSubscriptionDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUsersXSubscriptions;
                    }
                    _usersXSubscriptions = value;
                    var newValue = value as FixupCollection<UsersXSubscriptionDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUsersXSubscriptions;
                    }
                }
            }
        }
        private ICollection<UsersXSubscriptionDto> _usersXSubscriptions;
    
    	[DataMember]
        public virtual ICollection<AspNetRoleDto> AspNetRoles
        {
            get
            {
                if (_aspNetRoles == null)
                {
                    var newCollection = new FixupCollection<AspNetRoleDto>();
                    newCollection.CollectionChanged += FixupAspNetRoles;
                    _aspNetRoles = newCollection;
                }
                return _aspNetRoles;
            }
            set
            {
                if (!ReferenceEquals(_aspNetRoles, value))
                {
                    var previousValue = _aspNetRoles as FixupCollection<AspNetRoleDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAspNetRoles;
                    }
                    _aspNetRoles = value;
                    var newValue = value as FixupCollection<AspNetRoleDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAspNetRoles;
                    }
                }
            }
        }
        private ICollection<AspNetRoleDto> _aspNetRoles;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCompany1(CompanyDto previousValue)
        {
            if (previousValue != null && previousValue.AspNetUsers.Contains(this))
            {
                previousValue.AspNetUsers.Remove(this);
            }
    
            if (Company1 != null)
            {
                if (!Company1.AspNetUsers.Contains(this))
                {
                    Company1.AspNetUsers.Add(this);
                }
                if (IdCompany != Company1.IdCompany)
                {
                    IdCompany = Company1.IdCompany;
                }
            }
            else if (!_settingFK)
            {
                IdCompany = null;
            }
        }
    
        private void FixupAspNetUserClaims(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AspNetUserClaimDto item in e.NewItems)
                {
                    item.AspNetUser = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AspNetUserClaimDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.AspNetUser, this))
                    {
                        item.AspNetUser = null;
                    }
                }
            }
        }
    
        private void FixupAspNetUserLogins(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AspNetUserLoginDto item in e.NewItems)
                {
                    item.AspNetUser = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AspNetUserLoginDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.AspNetUser, this))
                    {
                        item.AspNetUser = null;
                    }
                }
            }
        }
    
        private void FixupChartComments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ChartCommentDto item in e.NewItems)
                {
                    item.AspNetUser = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ChartCommentDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.AspNetUser, this))
                    {
                        item.AspNetUser = null;
                    }
                }
            }
        }
    
        private void FixupUsersXSubscriptions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UsersXSubscriptionDto item in e.NewItems)
                {
                    item.AspNetUser = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UsersXSubscriptionDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.AspNetUser, this))
                    {
                        item.AspNetUser = null;
                    }
                }
            }
        }
    
        private void FixupAspNetRoles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AspNetRoleDto item in e.NewItems)
                {
                    if (!item.AspNetUsers.Contains(this))
                    {
                        item.AspNetUsers.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AspNetRoleDto item in e.OldItems)
                {
                    if (item.AspNetUsers.Contains(this))
                    {
                        item.AspNetUsers.Remove(this);
                    }
                }
            }
        }

        #endregion

    }
}
