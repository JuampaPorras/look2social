#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace SmartSocial.Data
{
    /// <summary>
    /// The query extension class for WebpagesRoles.
    /// </summary>
    public static partial class WebpagesRolesExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SmartSocial.Data.WebpagesRoles GetByKey(this IQueryable<SmartSocial.Data.WebpagesRoles> queryable, int roleId)
        {
            var entity = queryable as System.Data.Linq.Table<SmartSocial.Data.WebpagesRoles>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((SmartSocial.Data.SmartSocialdbDataContext)entity.Context, roleId);

            return queryable.FirstOrDefault(w => w.RoleId == roleId);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<SmartSocial.Data.WebpagesRoles> table, int roleId)
        {
            return table.Delete(w => w.RoleId == roleId);
        }

        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SmartSocial.Data.WebpagesRoles GetByRoleName(this IQueryable<SmartSocial.Data.WebpagesRoles> queryable, string roleName)
        {
            var entity = queryable as System.Data.Linq.Table<SmartSocial.Data.WebpagesRoles>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByRoleName.Invoke((SmartSocial.Data.SmartSocialdbDataContext)entity.Context, roleName);

            return queryable.FirstOrDefault(w => w.RoleName == roleName);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesRoles.RoleId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="roleId">RoleId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesRoles> ByRoleId(this IQueryable<SmartSocial.Data.WebpagesRoles> queryable, int roleId)
        {
            return queryable.Where(w => w.RoleId == roleId);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesRoles.RoleId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="roleId">RoleId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesRoles> ByRoleId(this IQueryable<SmartSocial.Data.WebpagesRoles> queryable, ComparisonOperator comparisonOperator, int roleId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(w => w.RoleId > roleId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(w => w.RoleId >= roleId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(w => w.RoleId < roleId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(w => w.RoleId <= roleId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(w => w.RoleId != roleId);
                default:
                    return queryable.Where(w => w.RoleId == roleId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesRoles.RoleId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="roleId">RoleId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesRoles> ByRoleId(this IQueryable<SmartSocial.Data.WebpagesRoles> queryable, int roleId, params int[] additionalValues)
        {
            var roleIdList = new List<int> { roleId };

            if (additionalValues != null)
                roleIdList.AddRange(additionalValues);

            if (roleIdList.Count == 1)
                return queryable.ByRoleId(roleIdList[0]);

            return queryable.ByRoleId(roleIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesRoles.RoleId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesRoles> ByRoleId(this IQueryable<SmartSocial.Data.WebpagesRoles> queryable, IEnumerable<int> values)
        {
            return queryable.Where(w => values.Contains(w.RoleId));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesRoles.RoleName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="roleName">RoleName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesRoles> ByRoleName(this IQueryable<SmartSocial.Data.WebpagesRoles> queryable, string roleName)
        {
            return queryable.Where(w => w.RoleName == roleName);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesRoles.RoleName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="roleName">RoleName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesRoles> ByRoleName(this IQueryable<SmartSocial.Data.WebpagesRoles> queryable, ContainmentOperator containmentOperator, string roleName)
        {
            if (roleName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("roleName", "Parameter 'roleName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(w => w.RoleName.Contains(roleName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(w => w.RoleName.StartsWith(roleName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(w => w.RoleName.EndsWith(roleName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(w => w.RoleName.Contains(roleName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(w => w.RoleName != roleName);
                default:
                    return queryable.Where(w => w.RoleName == roleName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesRoles.RoleName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="roleName">RoleName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesRoles> ByRoleName(this IQueryable<SmartSocial.Data.WebpagesRoles> queryable, string roleName, params string[] additionalValues)
        {
            var roleNameList = new List<string> { roleName };

            if (additionalValues != null)
                roleNameList.AddRange(additionalValues);

            if (roleNameList.Count == 1)
                return queryable.ByRoleName(roleNameList[0]);

            return queryable.ByRoleName(roleNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesRoles.RoleName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesRoles> ByRoleName(this IQueryable<SmartSocial.Data.WebpagesRoles> queryable, IEnumerable<string> values)
        {
            return queryable.Where(w => values.Contains(w.RoleName));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<SmartSocial.Data.SmartSocialdbDataContext, int, SmartSocial.Data.WebpagesRoles> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (SmartSocial.Data.SmartSocialdbDataContext db, int roleId) =>
                        db.WebpagesRoles.FirstOrDefault(w => w.RoleId == roleId));
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<SmartSocial.Data.SmartSocialdbDataContext, string, SmartSocial.Data.WebpagesRoles> GetByRoleName =
                System.Data.Linq.CompiledQuery.Compile(
                    (SmartSocial.Data.SmartSocialdbDataContext db, string roleName) =>
                        db.WebpagesRoles.FirstOrDefault(w => w.RoleName == roleName));

        }
        #endregion
    }
}
#pragma warning restore 1591
