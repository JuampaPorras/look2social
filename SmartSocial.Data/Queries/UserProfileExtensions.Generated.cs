#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace SmartSocial.Data
{
    /// <summary>
    /// The query extension class for UserProfile.
    /// </summary>
    public static partial class UserProfileExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SmartSocial.Data.UserProfile GetByKey(this IQueryable<SmartSocial.Data.UserProfile> queryable, int userId)
        {
            var entity = queryable as System.Data.Linq.Table<SmartSocial.Data.UserProfile>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((SmartSocial.Data.SmartSocialdbDataContext)entity.Context, userId);

            return queryable.FirstOrDefault(u => u.UserId == userId);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<SmartSocial.Data.UserProfile> table, int userId)
        {
            return table.Delete(u => u.UserId == userId);
        }

        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SmartSocial.Data.UserProfile GetByUserName(this IQueryable<SmartSocial.Data.UserProfile> queryable, string userName)
        {
            var entity = queryable as System.Data.Linq.Table<SmartSocial.Data.UserProfile>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByUserName.Invoke((SmartSocial.Data.SmartSocialdbDataContext)entity.Context, userName);

            return queryable.FirstOrDefault(u => u.UserName == userName);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.UserProfile.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.UserProfile> ByUserId(this IQueryable<SmartSocial.Data.UserProfile> queryable, int userId)
        {
            return queryable.Where(u => u.UserId == userId);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.UserProfile.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.UserProfile> ByUserId(this IQueryable<SmartSocial.Data.UserProfile> queryable, ComparisonOperator comparisonOperator, int userId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(u => u.UserId > userId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(u => u.UserId >= userId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(u => u.UserId < userId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(u => u.UserId <= userId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(u => u.UserId != userId);
                default:
                    return queryable.Where(u => u.UserId == userId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.UserProfile.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.UserProfile> ByUserId(this IQueryable<SmartSocial.Data.UserProfile> queryable, int userId, params int[] additionalValues)
        {
            var userIdList = new List<int> { userId };

            if (additionalValues != null)
                userIdList.AddRange(additionalValues);

            if (userIdList.Count == 1)
                return queryable.ByUserId(userIdList[0]);

            return queryable.ByUserId(userIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.UserProfile.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.UserProfile> ByUserId(this IQueryable<SmartSocial.Data.UserProfile> queryable, IEnumerable<int> values)
        {
            return queryable.Where(u => values.Contains(u.UserId));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.UserProfile.UserName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userName">UserName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.UserProfile> ByUserName(this IQueryable<SmartSocial.Data.UserProfile> queryable, string userName)
        {
            return queryable.Where(u => u.UserName == userName);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.UserProfile.UserName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userName">UserName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.UserProfile> ByUserName(this IQueryable<SmartSocial.Data.UserProfile> queryable, ContainmentOperator containmentOperator, string userName)
        {
            if (userName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userName", "Parameter 'userName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.UserName.Contains(userName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.UserName.StartsWith(userName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.UserName.EndsWith(userName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.UserName.Contains(userName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(u => u.UserName != userName);
                default:
                    return queryable.Where(u => u.UserName == userName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.UserProfile.UserName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userName">UserName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.UserProfile> ByUserName(this IQueryable<SmartSocial.Data.UserProfile> queryable, string userName, params string[] additionalValues)
        {
            var userNameList = new List<string> { userName };

            if (additionalValues != null)
                userNameList.AddRange(additionalValues);

            if (userNameList.Count == 1)
                return queryable.ByUserName(userNameList[0]);

            return queryable.ByUserName(userNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.UserProfile.UserName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.UserProfile> ByUserName(this IQueryable<SmartSocial.Data.UserProfile> queryable, IEnumerable<string> values)
        {
            return queryable.Where(u => values.Contains(u.UserName));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.UserProfile.CompanyId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="companyId">CompanyId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.UserProfile> ByCompanyId(this IQueryable<SmartSocial.Data.UserProfile> queryable, int? companyId)
        {
            // support nulls
            return companyId == null 
                ? queryable.Where(u => u.CompanyId == null) 
                : queryable.Where(u => u.CompanyId == companyId);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.UserProfile.CompanyId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="companyId">CompanyId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.UserProfile> ByCompanyId(this IQueryable<SmartSocial.Data.UserProfile> queryable, ComparisonOperator comparisonOperator, int? companyId)
        {
            if (companyId == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("companyId", "Parameter 'companyId' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(u => u.CompanyId > companyId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(u => u.CompanyId >= companyId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(u => u.CompanyId < companyId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(u => u.CompanyId <= companyId);
                case ComparisonOperator.NotEquals:
                    return companyId == null 
                        ? queryable.Where(u => u.CompanyId != null) 
                        : queryable.Where(u => u.CompanyId != companyId);
                default:
                    return companyId == null 
                        ? queryable.Where(u => u.CompanyId == null) 
                        : queryable.Where(u => u.CompanyId == companyId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.UserProfile.CompanyId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="companyId">CompanyId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.UserProfile> ByCompanyId(this IQueryable<SmartSocial.Data.UserProfile> queryable, int? companyId, params int?[] additionalValues)
        {
            var companyIdList = new List<int?> { companyId };

            if (additionalValues != null)
                companyIdList.AddRange(additionalValues);
            else
                companyIdList.Add(null);

            if (companyIdList.Count == 1)
                return queryable.ByCompanyId(companyIdList[0]);

            return queryable.ByCompanyId(companyIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.UserProfile.CompanyId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.UserProfile> ByCompanyId(this IQueryable<SmartSocial.Data.UserProfile> queryable, IEnumerable<int?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.UserProfile, bool>("CompanyId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.UserProfile.LasrReportId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lasrReportId">LasrReportId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.UserProfile> ByLasrReportId(this IQueryable<SmartSocial.Data.UserProfile> queryable, int? lasrReportId)
        {
            // support nulls
            return lasrReportId == null 
                ? queryable.Where(u => u.LasrReportId == null) 
                : queryable.Where(u => u.LasrReportId == lasrReportId);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.UserProfile.LasrReportId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lasrReportId">LasrReportId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.UserProfile> ByLasrReportId(this IQueryable<SmartSocial.Data.UserProfile> queryable, ComparisonOperator comparisonOperator, int? lasrReportId)
        {
            if (lasrReportId == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("lasrReportId", "Parameter 'lasrReportId' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(u => u.LasrReportId > lasrReportId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(u => u.LasrReportId >= lasrReportId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(u => u.LasrReportId < lasrReportId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(u => u.LasrReportId <= lasrReportId);
                case ComparisonOperator.NotEquals:
                    return lasrReportId == null 
                        ? queryable.Where(u => u.LasrReportId != null) 
                        : queryable.Where(u => u.LasrReportId != lasrReportId);
                default:
                    return lasrReportId == null 
                        ? queryable.Where(u => u.LasrReportId == null) 
                        : queryable.Where(u => u.LasrReportId == lasrReportId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.UserProfile.LasrReportId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lasrReportId">LasrReportId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.UserProfile> ByLasrReportId(this IQueryable<SmartSocial.Data.UserProfile> queryable, int? lasrReportId, params int?[] additionalValues)
        {
            var lasrReportIdList = new List<int?> { lasrReportId };

            if (additionalValues != null)
                lasrReportIdList.AddRange(additionalValues);
            else
                lasrReportIdList.Add(null);

            if (lasrReportIdList.Count == 1)
                return queryable.ByLasrReportId(lasrReportIdList[0]);

            return queryable.ByLasrReportId(lasrReportIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.UserProfile.LasrReportId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.UserProfile> ByLasrReportId(this IQueryable<SmartSocial.Data.UserProfile> queryable, IEnumerable<int?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.UserProfile, bool>("LasrReportId", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<SmartSocial.Data.SmartSocialdbDataContext, int, SmartSocial.Data.UserProfile> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (SmartSocial.Data.SmartSocialdbDataContext db, int userId) =>
                        db.UserProfile.FirstOrDefault(u => u.UserId == userId));
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<SmartSocial.Data.SmartSocialdbDataContext, string, SmartSocial.Data.UserProfile> GetByUserName =
                System.Data.Linq.CompiledQuery.Compile(
                    (SmartSocial.Data.SmartSocialdbDataContext db, string userName) =>
                        db.UserProfile.FirstOrDefault(u => u.UserName == userName));

        }
        #endregion
    }
}
#pragma warning restore 1591
