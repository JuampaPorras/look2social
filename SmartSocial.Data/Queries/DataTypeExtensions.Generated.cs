#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace SmartSocial.Data
{
    /// <summary>
    /// The query extension class for DataType.
    /// </summary>
    public static partial class DataTypeExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SmartSocial.Data.DataType GetByKey(this IQueryable<SmartSocial.Data.DataType> queryable, int idDataType)
        {
            var entity = queryable as System.Data.Linq.Table<SmartSocial.Data.DataType>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((SmartSocial.Data.SmartSocialdbDataContext)entity.Context, idDataType);

            return queryable.FirstOrDefault(d => d.IdDataType == idDataType);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<SmartSocial.Data.DataType> table, int idDataType)
        {
            return table.Delete(d => d.IdDataType == idDataType);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.DataType.IdDataType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idDataType">IdDataType to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.DataType> ByIdDataType(this IQueryable<SmartSocial.Data.DataType> queryable, int idDataType)
        {
            return queryable.Where(d => d.IdDataType == idDataType);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.DataType.IdDataType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idDataType">IdDataType to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.DataType> ByIdDataType(this IQueryable<SmartSocial.Data.DataType> queryable, ComparisonOperator comparisonOperator, int idDataType)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(d => d.IdDataType > idDataType);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(d => d.IdDataType >= idDataType);
                case ComparisonOperator.LessThan:
                    return queryable.Where(d => d.IdDataType < idDataType);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(d => d.IdDataType <= idDataType);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(d => d.IdDataType != idDataType);
                default:
                    return queryable.Where(d => d.IdDataType == idDataType);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.DataType.IdDataType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idDataType">IdDataType to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.DataType> ByIdDataType(this IQueryable<SmartSocial.Data.DataType> queryable, int idDataType, params int[] additionalValues)
        {
            var idDataTypeList = new List<int> { idDataType };

            if (additionalValues != null)
                idDataTypeList.AddRange(additionalValues);

            if (idDataTypeList.Count == 1)
                return queryable.ByIdDataType(idDataTypeList[0]);

            return queryable.ByIdDataType(idDataTypeList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.DataType.IdDataType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.DataType> ByIdDataType(this IQueryable<SmartSocial.Data.DataType> queryable, IEnumerable<int> values)
        {
            return queryable.Where(d => values.Contains(d.IdDataType));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.DataType.DataTypeName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dataTypeName">DataTypeName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.DataType> ByDataTypeName(this IQueryable<SmartSocial.Data.DataType> queryable, string dataTypeName)
        {
            // support nulls
            return dataTypeName == null 
                ? queryable.Where(d => d.DataTypeName == null) 
                : queryable.Where(d => d.DataTypeName == dataTypeName);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.DataType.DataTypeName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dataTypeName">DataTypeName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.DataType> ByDataTypeName(this IQueryable<SmartSocial.Data.DataType> queryable, ContainmentOperator containmentOperator, string dataTypeName)
        {
            if (dataTypeName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("dataTypeName", "Parameter 'dataTypeName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.DataTypeName.Contains(dataTypeName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.DataTypeName.StartsWith(dataTypeName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.DataTypeName.EndsWith(dataTypeName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.DataTypeName.Contains(dataTypeName) == false);
                case ContainmentOperator.NotEquals:
                    return dataTypeName == null 
                        ? queryable.Where(d => d.DataTypeName != null) 
                        : queryable.Where(d => d.DataTypeName != dataTypeName);
                default:
                    return dataTypeName == null 
                        ? queryable.Where(d => d.DataTypeName == null) 
                        : queryable.Where(d => d.DataTypeName == dataTypeName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.DataType.DataTypeName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dataTypeName">DataTypeName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.DataType> ByDataTypeName(this IQueryable<SmartSocial.Data.DataType> queryable, string dataTypeName, params string[] additionalValues)
        {
            var dataTypeNameList = new List<string> { dataTypeName };

            if (additionalValues != null)
                dataTypeNameList.AddRange(additionalValues);
            else
                dataTypeNameList.Add(null);

            if (dataTypeNameList.Count == 1)
                return queryable.ByDataTypeName(dataTypeNameList[0]);

            return queryable.ByDataTypeName(dataTypeNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.DataType.DataTypeName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.DataType> ByDataTypeName(this IQueryable<SmartSocial.Data.DataType> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.DataType, bool>("DataTypeName", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<SmartSocial.Data.SmartSocialdbDataContext, int, SmartSocial.Data.DataType> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (SmartSocial.Data.SmartSocialdbDataContext db, int idDataType) =>
                        db.DataType.FirstOrDefault(d => d.IdDataType == idDataType));

        }
        #endregion
    }
}
#pragma warning restore 1591
