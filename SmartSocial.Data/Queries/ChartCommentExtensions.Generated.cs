#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace SmartSocial.Data
{
    /// <summary>
    /// The query extension class for ChartComment.
    /// </summary>
    public static partial class ChartCommentExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SmartSocial.Data.ChartComment GetByKey(this IQueryable<SmartSocial.Data.ChartComment> queryable, int idComment)
        {
            var entity = queryable as System.Data.Linq.Table<SmartSocial.Data.ChartComment>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((SmartSocial.Data.SmartSocialdbDataContext)entity.Context, idComment);

            return queryable.FirstOrDefault(c => c.IdComment == idComment);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<SmartSocial.Data.ChartComment> table, int idComment)
        {
            return table.Delete(c => c.IdComment == idComment);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartComment.IdComment"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idComment">IdComment to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartComment> ByIdComment(this IQueryable<SmartSocial.Data.ChartComment> queryable, int idComment)
        {
            return queryable.Where(c => c.IdComment == idComment);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartComment.IdComment"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idComment">IdComment to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartComment> ByIdComment(this IQueryable<SmartSocial.Data.ChartComment> queryable, ComparisonOperator comparisonOperator, int idComment)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.IdComment > idComment);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.IdComment >= idComment);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.IdComment < idComment);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.IdComment <= idComment);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.IdComment != idComment);
                default:
                    return queryable.Where(c => c.IdComment == idComment);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartComment.IdComment"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idComment">IdComment to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartComment> ByIdComment(this IQueryable<SmartSocial.Data.ChartComment> queryable, int idComment, params int[] additionalValues)
        {
            var idCommentList = new List<int> { idComment };

            if (additionalValues != null)
                idCommentList.AddRange(additionalValues);

            if (idCommentList.Count == 1)
                return queryable.ByIdComment(idCommentList[0]);

            return queryable.ByIdComment(idCommentList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartComment.IdComment"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartComment> ByIdComment(this IQueryable<SmartSocial.Data.ChartComment> queryable, IEnumerable<int> values)
        {
            return queryable.Where(c => values.Contains(c.IdComment));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartComment.IdUser"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idUser">IdUser to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartComment> ByIdUser(this IQueryable<SmartSocial.Data.ChartComment> queryable, string idUser)
        {
            return queryable.Where(c => c.IdUser == idUser);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartComment.IdUser"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idUser">IdUser to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartComment> ByIdUser(this IQueryable<SmartSocial.Data.ChartComment> queryable, ContainmentOperator containmentOperator, string idUser)
        {
            if (idUser == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("idUser", "Parameter 'idUser' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.IdUser.Contains(idUser));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.IdUser.StartsWith(idUser));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.IdUser.EndsWith(idUser));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.IdUser.Contains(idUser) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(c => c.IdUser != idUser);
                default:
                    return queryable.Where(c => c.IdUser == idUser);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartComment.IdUser"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idUser">IdUser to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartComment> ByIdUser(this IQueryable<SmartSocial.Data.ChartComment> queryable, string idUser, params string[] additionalValues)
        {
            var idUserList = new List<string> { idUser };

            if (additionalValues != null)
                idUserList.AddRange(additionalValues);

            if (idUserList.Count == 1)
                return queryable.ByIdUser(idUserList[0]);

            return queryable.ByIdUser(idUserList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartComment.IdUser"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartComment> ByIdUser(this IQueryable<SmartSocial.Data.ChartComment> queryable, IEnumerable<string> values)
        {
            return queryable.Where(c => values.Contains(c.IdUser));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartComment.IdSmartChart"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idSmartChart">IdSmartChart to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartComment> ByIdSmartChart(this IQueryable<SmartSocial.Data.ChartComment> queryable, int idSmartChart)
        {
            return queryable.Where(c => c.IdSmartChart == idSmartChart);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartComment.IdSmartChart"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idSmartChart">IdSmartChart to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartComment> ByIdSmartChart(this IQueryable<SmartSocial.Data.ChartComment> queryable, ComparisonOperator comparisonOperator, int idSmartChart)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.IdSmartChart > idSmartChart);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.IdSmartChart >= idSmartChart);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.IdSmartChart < idSmartChart);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.IdSmartChart <= idSmartChart);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.IdSmartChart != idSmartChart);
                default:
                    return queryable.Where(c => c.IdSmartChart == idSmartChart);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartComment.IdSmartChart"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idSmartChart">IdSmartChart to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartComment> ByIdSmartChart(this IQueryable<SmartSocial.Data.ChartComment> queryable, int idSmartChart, params int[] additionalValues)
        {
            var idSmartChartList = new List<int> { idSmartChart };

            if (additionalValues != null)
                idSmartChartList.AddRange(additionalValues);

            if (idSmartChartList.Count == 1)
                return queryable.ByIdSmartChart(idSmartChartList[0]);

            return queryable.ByIdSmartChart(idSmartChartList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartComment.IdSmartChart"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartComment> ByIdSmartChart(this IQueryable<SmartSocial.Data.ChartComment> queryable, IEnumerable<int> values)
        {
            return queryable.Where(c => values.Contains(c.IdSmartChart));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartComment.DatePosted"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="datePosted">DatePosted to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartComment> ByDatePosted(this IQueryable<SmartSocial.Data.ChartComment> queryable, System.DateTime? datePosted)
        {
            // support nulls
            return datePosted == null 
                ? queryable.Where(c => c.DatePosted == null) 
                : queryable.Where(c => c.DatePosted == datePosted);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartComment.DatePosted"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="datePosted">DatePosted to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartComment> ByDatePosted(this IQueryable<SmartSocial.Data.ChartComment> queryable, ComparisonOperator comparisonOperator, System.DateTime? datePosted)
        {
            if (datePosted == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("datePosted", "Parameter 'datePosted' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.DatePosted > datePosted);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.DatePosted >= datePosted);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.DatePosted < datePosted);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.DatePosted <= datePosted);
                case ComparisonOperator.NotEquals:
                    return datePosted == null 
                        ? queryable.Where(c => c.DatePosted != null) 
                        : queryable.Where(c => c.DatePosted != datePosted);
                default:
                    return datePosted == null 
                        ? queryable.Where(c => c.DatePosted == null) 
                        : queryable.Where(c => c.DatePosted == datePosted);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartComment.DatePosted"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="datePosted">DatePosted to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartComment> ByDatePosted(this IQueryable<SmartSocial.Data.ChartComment> queryable, System.DateTime? datePosted, params System.DateTime?[] additionalValues)
        {
            var datePostedList = new List<System.DateTime?> { datePosted };

            if (additionalValues != null)
                datePostedList.AddRange(additionalValues);
            else
                datePostedList.Add(null);

            if (datePostedList.Count == 1)
                return queryable.ByDatePosted(datePostedList[0]);

            return queryable.ByDatePosted(datePostedList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartComment.DatePosted"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartComment> ByDatePosted(this IQueryable<SmartSocial.Data.ChartComment> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.ChartComment, bool>("DatePosted", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartComment.Message"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="message">Message to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartComment> ByMessage(this IQueryable<SmartSocial.Data.ChartComment> queryable, string message)
        {
            // support nulls
            return message == null 
                ? queryable.Where(c => c.Message == null) 
                : queryable.Where(c => c.Message == message);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartComment.Message"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="message">Message to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartComment> ByMessage(this IQueryable<SmartSocial.Data.ChartComment> queryable, ContainmentOperator containmentOperator, string message)
        {
            if (message == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("message", "Parameter 'message' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.Message.Contains(message));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.Message.StartsWith(message));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.Message.EndsWith(message));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.Message.Contains(message) == false);
                case ContainmentOperator.NotEquals:
                    return message == null 
                        ? queryable.Where(c => c.Message != null) 
                        : queryable.Where(c => c.Message != message);
                default:
                    return message == null 
                        ? queryable.Where(c => c.Message == null) 
                        : queryable.Where(c => c.Message == message);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartComment.Message"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="message">Message to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartComment> ByMessage(this IQueryable<SmartSocial.Data.ChartComment> queryable, string message, params string[] additionalValues)
        {
            var messageList = new List<string> { message };

            if (additionalValues != null)
                messageList.AddRange(additionalValues);
            else
                messageList.Add(null);

            if (messageList.Count == 1)
                return queryable.ByMessage(messageList[0]);

            return queryable.ByMessage(messageList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartComment.Message"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartComment> ByMessage(this IQueryable<SmartSocial.Data.ChartComment> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.ChartComment, bool>("Message", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<SmartSocial.Data.SmartSocialdbDataContext, int, SmartSocial.Data.ChartComment> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (SmartSocial.Data.SmartSocialdbDataContext db, int idComment) =>
                        db.ChartComment.FirstOrDefault(c => c.IdComment == idComment));

        }
        #endregion
    }
}
#pragma warning restore 1591
