//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace SmartSocial.Services.V2.DataTransferObjects
{
    
    [DataContract(Name = "ChartCommentDto", Namespace = "http://www.mavizontech.com/dto/" , IsReference = true) ]
    public partial class ChartCommentDto
    {
         #region Primitive Properties
    	
    	[DataMember]
        public virtual int IdComment
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual string IdUser
        {
     
    		
            get { return _idUser; }
            set
            {
                if (_idUser != value)
                {
                    if (AspNetUser != null && AspNetUser.Id != value)
                    {
                        AspNetUser = null;
                    }
                    _idUser = value;
                }
            }
        }
        private string _idUser;
    	
    	[DataMember]
        public virtual int IdSmartChart
        {
     
    		
            get { return _idSmartChart; }
            set
            {
                if (_idSmartChart != value)
                {
                    if (SmartChart != null && SmartChart.idSmartChart != value)
                    {
                        SmartChart = null;
                    }
                    _idSmartChart = value;
                }
            }
        }
        private int _idSmartChart;
    	
    	[DataMember]
        public virtual Nullable<System.DateTime> DatePosted
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual string Message
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    	[DataMember]
        public virtual AspNetUserDto AspNetUser
        {
            get { return _aspNetUser; }
            set
            {
                if (!ReferenceEquals(_aspNetUser, value))
                {
                    var previousValue = _aspNetUser;
                    _aspNetUser = value;
                    FixupAspNetUser(previousValue);
                }
            }
        }
        private AspNetUserDto _aspNetUser;
    
    	[DataMember]
        public virtual SmartChartDto SmartChart
        {
            get { return _smartChart; }
            set
            {
                if (!ReferenceEquals(_smartChart, value))
                {
                    var previousValue = _smartChart;
                    _smartChart = value;
                    FixupSmartChart(previousValue);
                }
            }
        }
        private SmartChartDto _smartChart;

        #endregion

        #region Association Fixup
    
        private void FixupAspNetUser(AspNetUserDto previousValue)
        {
            if (previousValue != null && previousValue.ChartComments.Contains(this))
            {
                previousValue.ChartComments.Remove(this);
            }
    
            if (AspNetUser != null)
            {
                if (!AspNetUser.ChartComments.Contains(this))
                {
                    AspNetUser.ChartComments.Add(this);
                }
                if (IdUser != AspNetUser.Id)
                {
                    IdUser = AspNetUser.Id;
                }
            }
        }
    
        private void FixupSmartChart(SmartChartDto previousValue)
        {
            if (previousValue != null && previousValue.ChartComments.Contains(this))
            {
                previousValue.ChartComments.Remove(this);
            }
    
            if (SmartChart != null)
            {
                if (!SmartChart.ChartComments.Contains(this))
                {
                    SmartChart.ChartComments.Add(this);
                }
                if (IdSmartChart != SmartChart.idSmartChart)
                {
                    IdSmartChart = SmartChart.idSmartChart;
                }
            }
        }

        #endregion

    }
}
