//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace SmartSocialServices.DataTransferObjects
{
    
    [DataContract(Name = "ServiceSubscriptionDto", Namespace = "http://www.SmartSocial.com/dto/" , IsReference = true) ]
    public partial class ServiceSubscriptionDto
    {
         #region Primitive Properties
    	
    	[DataMember(EmitDefaultValue = false)]
        public virtual int idServiceSubscription
        {
            get;
            set;
        }
    	
    	[DataMember(EmitDefaultValue = false)]
        public virtual string SubscriptionName
        {
            get;
            set;
        }
    	
    	[DataMember(EmitDefaultValue = false)]
        public virtual Nullable<System.DateTime> StartDate
        {
            get;
            set;
        }
    	
    	[DataMember(EmitDefaultValue = false)]
        public virtual Nullable<System.DateTime> EndDate
        {
            get;
            set;
        }
    	
    	[DataMember(EmitDefaultValue = false)]
        public virtual Nullable<bool> IsActive
        {
            get;
            set;
        }
    	
    	[DataMember(EmitDefaultValue = false)]
        public virtual string idChargifySuscription
        {
            get;
            set;
        }
    	
    	[DataMember(EmitDefaultValue = false)]
        public virtual string idChargifyCustomer
        {
            get;
            set;
        }
    	
    	[DataMember(EmitDefaultValue = false)]
        public virtual Nullable<int> idLead
        {
     
    		
            get { return _idLead; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_idLead != value)
                    {
                        if (Lead != null && Lead.idLead != value)
                        {
                            Lead = null;
                        }
                        _idLead = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _idLead;

        #endregion

        #region Navigation Properties
    
    	[DataMember(EmitDefaultValue = false)]
        public virtual LeadDto Lead
        {
            get { return _lead; }
            set
            {
                if (!ReferenceEquals(_lead, value))
                {
                    var previousValue = _lead;
                    _lead = value;
                    FixupLead(previousValue);
                }
            }
        }
        private LeadDto _lead;
    
    	[DataMember(EmitDefaultValue = false)]
        public virtual ICollection<ServiceDeliveryDto> ServiceDeliveries
        {
            get
            {
                if (_serviceDeliveries == null)
                {
                    var newCollection = new FixupCollection<ServiceDeliveryDto>();
                    newCollection.CollectionChanged += FixupServiceDeliveries;
                    _serviceDeliveries = newCollection;
                }
                return _serviceDeliveries;
            }
            set
            {
                if (!ReferenceEquals(_serviceDeliveries, value))
                {
                    var previousValue = _serviceDeliveries as FixupCollection<ServiceDeliveryDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupServiceDeliveries;
                    }
                    _serviceDeliveries = value;
                    var newValue = value as FixupCollection<ServiceDeliveryDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupServiceDeliveries;
                    }
                }
            }
        }
        private ICollection<ServiceDeliveryDto> _serviceDeliveries;
    
    	[DataMember(EmitDefaultValue = false)]
        public virtual ICollection<UsersXSubscriptionDto> UsersXSubscriptions
        {
            get
            {
                if (_usersXSubscriptions == null)
                {
                    var newCollection = new FixupCollection<UsersXSubscriptionDto>();
                    newCollection.CollectionChanged += FixupUsersXSubscriptions;
                    _usersXSubscriptions = newCollection;
                }
                return _usersXSubscriptions;
            }
            set
            {
                if (!ReferenceEquals(_usersXSubscriptions, value))
                {
                    var previousValue = _usersXSubscriptions as FixupCollection<UsersXSubscriptionDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUsersXSubscriptions;
                    }
                    _usersXSubscriptions = value;
                    var newValue = value as FixupCollection<UsersXSubscriptionDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUsersXSubscriptions;
                    }
                }
            }
        }
        private ICollection<UsersXSubscriptionDto> _usersXSubscriptions;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupLead(LeadDto previousValue)
        {
            if (previousValue != null && previousValue.ServiceSubscriptions.Contains(this))
            {
                previousValue.ServiceSubscriptions.Remove(this);
            }
    
            if (Lead != null)
            {
                if (!Lead.ServiceSubscriptions.Contains(this))
                {
                    Lead.ServiceSubscriptions.Add(this);
                }
                if (idLead != Lead.idLead)
                {
                    idLead = Lead.idLead;
                }
            }
            else if (!_settingFK)
            {
                idLead = null;
            }
        }
    
        private void FixupServiceDeliveries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ServiceDeliveryDto item in e.NewItems)
                {
                    item.ServiceSubscription = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ServiceDeliveryDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.ServiceSubscription, this))
                    {
                        item.ServiceSubscription = null;
                    }
                }
            }
        }
    
        private void FixupUsersXSubscriptions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UsersXSubscriptionDto item in e.NewItems)
                {
                    item.ServiceSubscription = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UsersXSubscriptionDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.ServiceSubscription, this))
                    {
                        item.ServiceSubscription = null;
                    }
                }
            }
        }

        #endregion

    }
}
