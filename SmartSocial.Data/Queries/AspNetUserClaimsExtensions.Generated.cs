#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace SmartSocial.Data
{
    /// <summary>
    /// The query extension class for AspNetUserClaims.
    /// </summary>
    public static partial class AspNetUserClaimsExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SmartSocial.Data.AspNetUserClaims GetByKey(this IQueryable<SmartSocial.Data.AspNetUserClaims> queryable, int id)
        {
            var entity = queryable as System.Data.Linq.Table<SmartSocial.Data.AspNetUserClaims>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((SmartSocial.Data.SmartSocialdbDataContext)entity.Context, id);

            return queryable.FirstOrDefault(a => a.Id == id);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<SmartSocial.Data.AspNetUserClaims> table, int id)
        {
            return table.Delete(a => a.Id == id);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserClaims.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserClaims> ById(this IQueryable<SmartSocial.Data.AspNetUserClaims> queryable, int id)
        {
            return queryable.Where(a => a.Id == id);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserClaims.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserClaims> ById(this IQueryable<SmartSocial.Data.AspNetUserClaims> queryable, ComparisonOperator comparisonOperator, int id)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.Id > id);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.Id >= id);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.Id < id);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.Id <= id);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.Id != id);
                default:
                    return queryable.Where(a => a.Id == id);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserClaims.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserClaims> ById(this IQueryable<SmartSocial.Data.AspNetUserClaims> queryable, int id, params int[] additionalValues)
        {
            var idList = new List<int> { id };

            if (additionalValues != null)
                idList.AddRange(additionalValues);

            if (idList.Count == 1)
                return queryable.ById(idList[0]);

            return queryable.ById(idList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserClaims.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserClaims> ById(this IQueryable<SmartSocial.Data.AspNetUserClaims> queryable, IEnumerable<int> values)
        {
            return queryable.Where(a => values.Contains(a.Id));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserClaims.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserClaims> ByUserId(this IQueryable<SmartSocial.Data.AspNetUserClaims> queryable, string userId)
        {
            return queryable.Where(a => a.UserId == userId);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserClaims.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserClaims> ByUserId(this IQueryable<SmartSocial.Data.AspNetUserClaims> queryable, ContainmentOperator containmentOperator, string userId)
        {
            if (userId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userId", "Parameter 'userId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.UserId.Contains(userId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.UserId.StartsWith(userId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.UserId.EndsWith(userId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.UserId.Contains(userId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.UserId != userId);
                default:
                    return queryable.Where(a => a.UserId == userId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserClaims.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserClaims> ByUserId(this IQueryable<SmartSocial.Data.AspNetUserClaims> queryable, string userId, params string[] additionalValues)
        {
            var userIdList = new List<string> { userId };

            if (additionalValues != null)
                userIdList.AddRange(additionalValues);

            if (userIdList.Count == 1)
                return queryable.ByUserId(userIdList[0]);

            return queryable.ByUserId(userIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserClaims.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserClaims> ByUserId(this IQueryable<SmartSocial.Data.AspNetUserClaims> queryable, IEnumerable<string> values)
        {
            return queryable.Where(a => values.Contains(a.UserId));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserClaims.ClaimType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="claimType">ClaimType to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserClaims> ByClaimType(this IQueryable<SmartSocial.Data.AspNetUserClaims> queryable, string claimType)
        {
            // support nulls
            return claimType == null 
                ? queryable.Where(a => a.ClaimType == null) 
                : queryable.Where(a => a.ClaimType == claimType);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserClaims.ClaimType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="claimType">ClaimType to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserClaims> ByClaimType(this IQueryable<SmartSocial.Data.AspNetUserClaims> queryable, ContainmentOperator containmentOperator, string claimType)
        {
            if (claimType == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("claimType", "Parameter 'claimType' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.ClaimType.Contains(claimType));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.ClaimType.StartsWith(claimType));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.ClaimType.EndsWith(claimType));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.ClaimType.Contains(claimType) == false);
                case ContainmentOperator.NotEquals:
                    return claimType == null 
                        ? queryable.Where(a => a.ClaimType != null) 
                        : queryable.Where(a => a.ClaimType != claimType);
                default:
                    return claimType == null 
                        ? queryable.Where(a => a.ClaimType == null) 
                        : queryable.Where(a => a.ClaimType == claimType);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserClaims.ClaimType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="claimType">ClaimType to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserClaims> ByClaimType(this IQueryable<SmartSocial.Data.AspNetUserClaims> queryable, string claimType, params string[] additionalValues)
        {
            var claimTypeList = new List<string> { claimType };

            if (additionalValues != null)
                claimTypeList.AddRange(additionalValues);
            else
                claimTypeList.Add(null);

            if (claimTypeList.Count == 1)
                return queryable.ByClaimType(claimTypeList[0]);

            return queryable.ByClaimType(claimTypeList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserClaims.ClaimType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserClaims> ByClaimType(this IQueryable<SmartSocial.Data.AspNetUserClaims> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.AspNetUserClaims, bool>("ClaimType", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserClaims.ClaimValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="claimValue">ClaimValue to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserClaims> ByClaimValue(this IQueryable<SmartSocial.Data.AspNetUserClaims> queryable, string claimValue)
        {
            // support nulls
            return claimValue == null 
                ? queryable.Where(a => a.ClaimValue == null) 
                : queryable.Where(a => a.ClaimValue == claimValue);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserClaims.ClaimValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="claimValue">ClaimValue to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserClaims> ByClaimValue(this IQueryable<SmartSocial.Data.AspNetUserClaims> queryable, ContainmentOperator containmentOperator, string claimValue)
        {
            if (claimValue == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("claimValue", "Parameter 'claimValue' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.ClaimValue.Contains(claimValue));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.ClaimValue.StartsWith(claimValue));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.ClaimValue.EndsWith(claimValue));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.ClaimValue.Contains(claimValue) == false);
                case ContainmentOperator.NotEquals:
                    return claimValue == null 
                        ? queryable.Where(a => a.ClaimValue != null) 
                        : queryable.Where(a => a.ClaimValue != claimValue);
                default:
                    return claimValue == null 
                        ? queryable.Where(a => a.ClaimValue == null) 
                        : queryable.Where(a => a.ClaimValue == claimValue);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserClaims.ClaimValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="claimValue">ClaimValue to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserClaims> ByClaimValue(this IQueryable<SmartSocial.Data.AspNetUserClaims> queryable, string claimValue, params string[] additionalValues)
        {
            var claimValueList = new List<string> { claimValue };

            if (additionalValues != null)
                claimValueList.AddRange(additionalValues);
            else
                claimValueList.Add(null);

            if (claimValueList.Count == 1)
                return queryable.ByClaimValue(claimValueList[0]);

            return queryable.ByClaimValue(claimValueList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserClaims.ClaimValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserClaims> ByClaimValue(this IQueryable<SmartSocial.Data.AspNetUserClaims> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.AspNetUserClaims, bool>("ClaimValue", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<SmartSocial.Data.SmartSocialdbDataContext, int, SmartSocial.Data.AspNetUserClaims> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (SmartSocial.Data.SmartSocialdbDataContext db, int id) =>
                        db.AspNetUserClaims.FirstOrDefault(a => a.Id == id));

        }
        #endregion
    }
}
#pragma warning restore 1591
