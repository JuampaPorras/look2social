#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace SmartSocial.Data
{
    /// <summary>
    /// The query extension class for AspNetUserLogins.
    /// </summary>
    public static partial class AspNetUserLoginsExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SmartSocial.Data.AspNetUserLogins GetByKey(this IQueryable<SmartSocial.Data.AspNetUserLogins> queryable, string loginProvider, string providerKey, string userId)
        {
            var entity = queryable as System.Data.Linq.Table<SmartSocial.Data.AspNetUserLogins>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((SmartSocial.Data.SmartSocialdbDataContext)entity.Context, loginProvider, providerKey, userId);

            return queryable.FirstOrDefault(a => a.LoginProvider == loginProvider 
					&& a.ProviderKey == providerKey 
					&& a.UserId == userId);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<SmartSocial.Data.AspNetUserLogins> table, string loginProvider, string providerKey, string userId)
        {
            return table.Delete(a => a.LoginProvider == loginProvider 
					&& a.ProviderKey == providerKey 
					&& a.UserId == userId);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserLogins.LoginProvider"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="loginProvider">LoginProvider to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserLogins> ByLoginProvider(this IQueryable<SmartSocial.Data.AspNetUserLogins> queryable, string loginProvider)
        {
            return queryable.Where(a => a.LoginProvider == loginProvider);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserLogins.LoginProvider"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="loginProvider">LoginProvider to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserLogins> ByLoginProvider(this IQueryable<SmartSocial.Data.AspNetUserLogins> queryable, ContainmentOperator containmentOperator, string loginProvider)
        {
            if (loginProvider == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("loginProvider", "Parameter 'loginProvider' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.LoginProvider.Contains(loginProvider));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.LoginProvider.StartsWith(loginProvider));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.LoginProvider.EndsWith(loginProvider));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.LoginProvider.Contains(loginProvider) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.LoginProvider != loginProvider);
                default:
                    return queryable.Where(a => a.LoginProvider == loginProvider);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserLogins.LoginProvider"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="loginProvider">LoginProvider to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserLogins> ByLoginProvider(this IQueryable<SmartSocial.Data.AspNetUserLogins> queryable, string loginProvider, params string[] additionalValues)
        {
            var loginProviderList = new List<string> { loginProvider };

            if (additionalValues != null)
                loginProviderList.AddRange(additionalValues);

            if (loginProviderList.Count == 1)
                return queryable.ByLoginProvider(loginProviderList[0]);

            return queryable.ByLoginProvider(loginProviderList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserLogins.LoginProvider"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserLogins> ByLoginProvider(this IQueryable<SmartSocial.Data.AspNetUserLogins> queryable, IEnumerable<string> values)
        {
            return queryable.Where(a => values.Contains(a.LoginProvider));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserLogins.ProviderKey"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="providerKey">ProviderKey to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserLogins> ByProviderKey(this IQueryable<SmartSocial.Data.AspNetUserLogins> queryable, string providerKey)
        {
            return queryable.Where(a => a.ProviderKey == providerKey);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserLogins.ProviderKey"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="providerKey">ProviderKey to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserLogins> ByProviderKey(this IQueryable<SmartSocial.Data.AspNetUserLogins> queryable, ContainmentOperator containmentOperator, string providerKey)
        {
            if (providerKey == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("providerKey", "Parameter 'providerKey' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.ProviderKey.Contains(providerKey));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.ProviderKey.StartsWith(providerKey));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.ProviderKey.EndsWith(providerKey));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.ProviderKey.Contains(providerKey) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.ProviderKey != providerKey);
                default:
                    return queryable.Where(a => a.ProviderKey == providerKey);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserLogins.ProviderKey"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="providerKey">ProviderKey to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserLogins> ByProviderKey(this IQueryable<SmartSocial.Data.AspNetUserLogins> queryable, string providerKey, params string[] additionalValues)
        {
            var providerKeyList = new List<string> { providerKey };

            if (additionalValues != null)
                providerKeyList.AddRange(additionalValues);

            if (providerKeyList.Count == 1)
                return queryable.ByProviderKey(providerKeyList[0]);

            return queryable.ByProviderKey(providerKeyList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserLogins.ProviderKey"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserLogins> ByProviderKey(this IQueryable<SmartSocial.Data.AspNetUserLogins> queryable, IEnumerable<string> values)
        {
            return queryable.Where(a => values.Contains(a.ProviderKey));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserLogins.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserLogins> ByUserId(this IQueryable<SmartSocial.Data.AspNetUserLogins> queryable, string userId)
        {
            return queryable.Where(a => a.UserId == userId);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserLogins.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserLogins> ByUserId(this IQueryable<SmartSocial.Data.AspNetUserLogins> queryable, ContainmentOperator containmentOperator, string userId)
        {
            if (userId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userId", "Parameter 'userId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.UserId.Contains(userId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.UserId.StartsWith(userId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.UserId.EndsWith(userId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.UserId.Contains(userId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.UserId != userId);
                default:
                    return queryable.Where(a => a.UserId == userId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserLogins.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserLogins> ByUserId(this IQueryable<SmartSocial.Data.AspNetUserLogins> queryable, string userId, params string[] additionalValues)
        {
            var userIdList = new List<string> { userId };

            if (additionalValues != null)
                userIdList.AddRange(additionalValues);

            if (userIdList.Count == 1)
                return queryable.ByUserId(userIdList[0]);

            return queryable.ByUserId(userIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUserLogins.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUserLogins> ByUserId(this IQueryable<SmartSocial.Data.AspNetUserLogins> queryable, IEnumerable<string> values)
        {
            return queryable.Where(a => values.Contains(a.UserId));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<SmartSocial.Data.SmartSocialdbDataContext, string, string, string, SmartSocial.Data.AspNetUserLogins> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (SmartSocial.Data.SmartSocialdbDataContext db, string loginProvider, string providerKey, string userId) =>
                        db.AspNetUserLogins.FirstOrDefault(a => a.LoginProvider == loginProvider 
							&& a.ProviderKey == providerKey 
							&& a.UserId == userId));

        }
        #endregion
    }
}
#pragma warning restore 1591
