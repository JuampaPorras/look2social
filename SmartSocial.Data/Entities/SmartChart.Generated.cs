#pragma warning disable 1591
#pragma warning disable 0414        
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;

namespace SmartSocial.Data
{
    /// <summary>
    /// The class representing the dbo.SmartChart table.
    /// </summary>
    [System.Data.Linq.Mapping.Table(Name="dbo.SmartChart")]
    [System.Runtime.Serialization.DataContract(IsReference = true)]
    [System.ComponentModel.DataAnnotations.ScaffoldTable(true)]
    [System.ComponentModel.DataAnnotations.MetadataType(typeof(SmartSocial.Data.SmartChart.Metadata))]
    [System.Data.Services.Common.DataServiceKey("IdSmartChart")]
    [System.Diagnostics.DebuggerDisplay("IdSmartChart: {IdSmartChart}")]
    public partial class SmartChart
        : LinqEntityBase, ICloneable 
    {
        #region Static Constructor
        /// <summary>
        /// Initializes the <see cref="SmartChart"/> class.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        static SmartChart()
        {
            AddSharedRules();
        }
        #endregion

        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="SmartChart"/> class.
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCode]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public SmartChart()
        {
            Initialize();
        }

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private void Initialize()
        {
            _chartType = default(System.Data.Linq.EntityRef<ChartType>);
            _smartReport = default(System.Data.Linq.EntityRef<SmartReport>);
            _dataProvider = default(System.Data.Linq.EntityRef<DataProvider>);
            _chartCommentList = new System.Data.Linq.EntitySet<ChartComment>(OnChartCommentListAdd, OnChartCommentListRemove);
            _chartSeriesList = new System.Data.Linq.EntitySet<ChartSeries>(OnChartSeriesListAdd, OnChartSeriesListRemove);
            OnCreated();
        }
        #endregion

        #region Column Mapped Properties

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private int _idSmartChart = default(int);

        /// <summary>
        /// Gets the idSmartChart column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "idSmartChart", Storage = "_idSmartChart", DbType = "int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true, CanBeNull = false)]
        [System.Runtime.Serialization.DataMember(Order = 1)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public int IdSmartChart
        {
            get { return _idSmartChart; }
            set
            {
                if (_idSmartChart != value)
                {
                    OnIdSmartChartChanging(value);
                    SendPropertyChanging("IdSmartChart");
                    _idSmartChart = value;
                    SendPropertyChanged("IdSmartChart");
                    OnIdSmartChartChanged();
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private Nullable<int> _idSmartReport;

        /// <summary>
        /// Gets or sets the idSmartReport column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "idSmartReport", Storage = "_idSmartReport", DbType = "int")]
        [System.Runtime.Serialization.DataMember(Order = 2)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public Nullable<int> IdSmartReport
        {
            get { return _idSmartReport; }
            set
            {
                if (_idSmartReport != value)
                {
                    if (_smartReport.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnIdSmartReportChanging(value);
                    SendPropertyChanging("IdSmartReport");
                    _idSmartReport = value;
                    SendPropertyChanged("IdSmartReport");
                    OnIdSmartReportChanged();
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private string _chartName;

        /// <summary>
        /// Gets or sets the ChartName column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "ChartName", Storage = "_chartName", DbType = "nvarchar(MAX)")]
        [System.Runtime.Serialization.DataMember(Order = 3)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public string ChartName
        {
            get { return _chartName; }
            set
            {
                if (_chartName != value)
                {
                    OnChartNameChanging(value);
                    SendPropertyChanging("ChartName");
                    _chartName = value;
                    SendPropertyChanged("ChartName");
                    OnChartNameChanged();
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private string _fileName;

        /// <summary>
        /// Gets or sets the FileName column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "FileName", Storage = "_fileName", DbType = "nvarchar(MAX)")]
        [System.Runtime.Serialization.DataMember(Order = 4)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public string FileName
        {
            get { return _fileName; }
            set
            {
                if (_fileName != value)
                {
                    OnFileNameChanging(value);
                    SendPropertyChanging("FileName");
                    _fileName = value;
                    SendPropertyChanged("FileName");
                    OnFileNameChanged();
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private string _insights;

        /// <summary>
        /// Gets or sets the Insights column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "Insights", Storage = "_insights", DbType = "nvarchar(MAX)")]
        [System.Runtime.Serialization.DataMember(Order = 5)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public string Insights
        {
            get { return _insights; }
            set
            {
                if (_insights != value)
                {
                    OnInsightsChanging(value);
                    SendPropertyChanging("Insights");
                    _insights = value;
                    SendPropertyChanged("Insights");
                    OnInsightsChanged();
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private Nullable<int> _idChartType;

        /// <summary>
        /// Gets or sets the IdChartType column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "IdChartType", Storage = "_idChartType", DbType = "int")]
        [System.Runtime.Serialization.DataMember(Order = 6)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public Nullable<int> IdChartType
        {
            get { return _idChartType; }
            set
            {
                if (_idChartType != value)
                {
                    if (_chartType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnIdChartTypeChanging(value);
                    SendPropertyChanging("IdChartType");
                    _idChartType = value;
                    SendPropertyChanged("IdChartType");
                    OnIdChartTypeChanged();
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private string _axisSeriesTitle;

        /// <summary>
        /// Gets or sets the AxisSeriesTitle column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "AxisSeriesTitle", Storage = "_axisSeriesTitle", DbType = "nvarchar(MAX)")]
        [System.Runtime.Serialization.DataMember(Order = 7)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public string AxisSeriesTitle
        {
            get { return _axisSeriesTitle; }
            set
            {
                if (_axisSeriesTitle != value)
                {
                    OnAxisSeriesTitleChanging(value);
                    SendPropertyChanging("AxisSeriesTitle");
                    _axisSeriesTitle = value;
                    SendPropertyChanged("AxisSeriesTitle");
                    OnAxisSeriesTitleChanged();
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private string _axisValuesTitle;

        /// <summary>
        /// Gets or sets the AxisValuesTitle column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "AxisValuesTitle", Storage = "_axisValuesTitle", DbType = "nvarchar(MAX)")]
        [System.Runtime.Serialization.DataMember(Order = 8)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public string AxisValuesTitle
        {
            get { return _axisValuesTitle; }
            set
            {
                if (_axisValuesTitle != value)
                {
                    OnAxisValuesTitleChanging(value);
                    SendPropertyChanging("AxisValuesTitle");
                    _axisValuesTitle = value;
                    SendPropertyChanged("AxisValuesTitle");
                    OnAxisValuesTitleChanged();
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private Nullable<int> _chartOrder;

        /// <summary>
        /// Gets or sets the ChartOrder column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "ChartOrder", Storage = "_chartOrder", DbType = "int")]
        [System.Runtime.Serialization.DataMember(Order = 9)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public Nullable<int> ChartOrder
        {
            get { return _chartOrder; }
            set
            {
                if (_chartOrder != value)
                {
                    OnChartOrderChanging(value);
                    SendPropertyChanging("ChartOrder");
                    _chartOrder = value;
                    SendPropertyChanged("ChartOrder");
                    OnChartOrderChanged();
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private string _socialPostFilter;

        /// <summary>
        /// Gets or sets the SocialPostFilter column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "SocialPostFilter", Storage = "_socialPostFilter", DbType = "nvarchar(MAX)")]
        [System.Runtime.Serialization.DataMember(Order = 10)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public string SocialPostFilter
        {
            get { return _socialPostFilter; }
            set
            {
                if (_socialPostFilter != value)
                {
                    OnSocialPostFilterChanging(value);
                    SendPropertyChanging("SocialPostFilter");
                    _socialPostFilter = value;
                    SendPropertyChanged("SocialPostFilter");
                    OnSocialPostFilterChanged();
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private string _cssClasses;

        /// <summary>
        /// Gets or sets the CssClasses column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "CssClasses", Storage = "_cssClasses", DbType = "nvarchar(MAX)")]
        [System.Runtime.Serialization.DataMember(Order = 11)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public string CssClasses
        {
            get { return _cssClasses; }
            set
            {
                if (_cssClasses != value)
                {
                    OnCssClassesChanging(value);
                    SendPropertyChanging("CssClasses");
                    _cssClasses = value;
                    SendPropertyChanged("CssClasses");
                    OnCssClassesChanged();
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private Nullable<int> _idDataProvider;

        /// <summary>
        /// Gets or sets the IdDataProvider column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "IdDataProvider", Storage = "_idDataProvider", DbType = "int")]
        [System.Runtime.Serialization.DataMember(Order = 12)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public Nullable<int> IdDataProvider
        {
            get { return _idDataProvider; }
            set
            {
                if (_idDataProvider != value)
                {
                    if (_dataProvider.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnIdDataProviderChanging(value);
                    SendPropertyChanging("IdDataProvider");
                    _idDataProvider = value;
                    SendPropertyChanged("IdDataProvider");
                    OnIdDataProviderChanged();
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private string _htmlStyles;

        /// <summary>
        /// Gets or sets the HtmlStyles column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "HtmlStyles", Storage = "_htmlStyles", DbType = "nvarchar(MAX)")]
        [System.Runtime.Serialization.DataMember(Order = 13)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public string HtmlStyles
        {
            get { return _htmlStyles; }
            set
            {
                if (_htmlStyles != value)
                {
                    OnHtmlStylesChanging(value);
                    SendPropertyChanging("HtmlStyles");
                    _htmlStyles = value;
                    SendPropertyChanged("HtmlStyles");
                    OnHtmlStylesChanged();
                }
            }
        }
        #endregion

        #region Association Mapped Properties

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private System.Data.Linq.EntityRef<ChartType> _chartType;

        /// <summary>
        /// Gets or sets the <see cref="ChartType"/> association.
        /// </summary>
        [System.Data.Linq.Mapping.Association(Name = "ChartType_SmartChart", Storage = "_chartType", ThisKey = "IdChartType", OtherKey = "IdChartType", IsForeignKey = true)]
        [System.Runtime.Serialization.DataMember(Order = 14, EmitDefaultValue = false)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public ChartType ChartType
        {
            get { return (serializing && !_chartType.HasLoadedOrAssignedValue) ? null : _chartType.Entity; }
            set
            {
                ChartType previousValue = _chartType.Entity;
                if (previousValue != value || _chartType.HasLoadedOrAssignedValue == false)
                {
                    OnChartTypeChanging(value);
                    SendPropertyChanging("ChartType");
                    if (previousValue != null)
                    {
                        _chartType.Entity = null;
                        previousValue.SmartChartList.Remove(this);
                    }
                    _chartType.Entity = value;
                    if (value != null)
                    {
                        value.SmartChartList.Add(this);
                        _idChartType = value.IdChartType;
                    }
                    else
                    {
                        _idChartType = default(Nullable<int>);
                    }
                    SendPropertyChanged("ChartType");
                    OnChartTypeChanged();
                }
            }
        }
        
        
        

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private System.Data.Linq.EntityRef<SmartReport> _smartReport;

        /// <summary>
        /// Gets or sets the <see cref="SmartReport"/> association.
        /// </summary>
        [System.Data.Linq.Mapping.Association(Name = "SmartReport_SmartChart", Storage = "_smartReport", ThisKey = "IdSmartReport", OtherKey = "IdSmartReport", IsForeignKey = true, DeleteRule = "CASCADE")]
        [System.Runtime.Serialization.DataMember(Order = 15, EmitDefaultValue = false)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public SmartReport SmartReport
        {
            get { return (serializing && !_smartReport.HasLoadedOrAssignedValue) ? null : _smartReport.Entity; }
            set
            {
                SmartReport previousValue = _smartReport.Entity;
                if (previousValue != value || _smartReport.HasLoadedOrAssignedValue == false)
                {
                    OnSmartReportChanging(value);
                    SendPropertyChanging("SmartReport");
                    if (previousValue != null)
                    {
                        _smartReport.Entity = null;
                        previousValue.SmartChartList.Remove(this);
                    }
                    _smartReport.Entity = value;
                    if (value != null)
                    {
                        value.SmartChartList.Add(this);
                        _idSmartReport = value.IdSmartReport;
                    }
                    else
                    {
                        _idSmartReport = default(Nullable<int>);
                    }
                    SendPropertyChanged("SmartReport");
                    OnSmartReportChanged();
                }
            }
        }
        
        
        

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private System.Data.Linq.EntityRef<DataProvider> _dataProvider;

        /// <summary>
        /// Gets or sets the <see cref="DataProvider"/> association.
        /// </summary>
        [System.Data.Linq.Mapping.Association(Name = "DataProvider_SmartChart", Storage = "_dataProvider", ThisKey = "IdDataProvider", OtherKey = "IdDataProvider", IsForeignKey = true)]
        [System.Runtime.Serialization.DataMember(Order = 16, EmitDefaultValue = false)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public DataProvider DataProvider
        {
            get { return (serializing && !_dataProvider.HasLoadedOrAssignedValue) ? null : _dataProvider.Entity; }
            set
            {
                DataProvider previousValue = _dataProvider.Entity;
                if (previousValue != value || _dataProvider.HasLoadedOrAssignedValue == false)
                {
                    OnDataProviderChanging(value);
                    SendPropertyChanging("DataProvider");
                    if (previousValue != null)
                    {
                        _dataProvider.Entity = null;
                        previousValue.SmartChartList.Remove(this);
                    }
                    _dataProvider.Entity = value;
                    if (value != null)
                    {
                        value.SmartChartList.Add(this);
                        _idDataProvider = value.IdDataProvider;
                    }
                    else
                    {
                        _idDataProvider = default(Nullable<int>);
                    }
                    SendPropertyChanged("DataProvider");
                    OnDataProviderChanged();
                }
            }
        }
        
        
        

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private System.Data.Linq.EntitySet<ChartComment> _chartCommentList;

        /// <summary>
        /// Gets or sets the <see cref="ChartComment"/> association.
        /// </summary>
        [System.Data.Linq.Mapping.Association(Name = "SmartChart_ChartComment", Storage = "_chartCommentList", ThisKey = "IdSmartChart", OtherKey = "IdSmartChart")]
        [System.Runtime.Serialization.DataMember(Order=17, EmitDefaultValue=false)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public System.Data.Linq.EntitySet<ChartComment> ChartCommentList
        {
            get { return (serializing && !_chartCommentList.HasLoadedOrAssignedValues) ? null : _chartCommentList; }
            set { _chartCommentList.Assign(value); }
        }
        
        

        [System.Diagnostics.DebuggerNonUserCode]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private void OnChartCommentListAdd(ChartComment entity)
        {
            SendPropertyChanging(null);
            entity.SmartChart = this;
            SendPropertyChanged(null);
        }

        [System.Diagnostics.DebuggerNonUserCode]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private void OnChartCommentListRemove(ChartComment entity)
        {
            SendPropertyChanging(null);
            entity.SmartChart = null;
            SendPropertyChanged(null);
        }

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private System.Data.Linq.EntitySet<ChartSeries> _chartSeriesList;

        /// <summary>
        /// Gets or sets the <see cref="ChartSeries"/> association.
        /// </summary>
        [System.Data.Linq.Mapping.Association(Name = "SmartChart_ChartSeries", Storage = "_chartSeriesList", ThisKey = "IdSmartChart", OtherKey = "IdSmartChart")]
        [System.Runtime.Serialization.DataMember(Order=18, EmitDefaultValue=false)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public System.Data.Linq.EntitySet<ChartSeries> ChartSeriesList
        {
            get { return (serializing && !_chartSeriesList.HasLoadedOrAssignedValues) ? null : _chartSeriesList; }
            set { _chartSeriesList.Assign(value); }
        }
        
        

        [System.Diagnostics.DebuggerNonUserCode]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private void OnChartSeriesListAdd(ChartSeries entity)
        {
            SendPropertyChanging(null);
            entity.SmartChart = this;
            SendPropertyChanged(null);
        }

        [System.Diagnostics.DebuggerNonUserCode]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private void OnChartSeriesListRemove(ChartSeries entity)
        {
            SendPropertyChanging(null);
            entity.SmartChart = null;
            SendPropertyChanged(null);
        }
        #endregion

        #region Extensibility Method Definitions
        /// <summary>Called by the static constructor to add shared rules.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        static partial void AddSharedRules();
        /// <summary>Called when this instance is loaded.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnCreated();
        /// <summary>Called when <see cref="IdSmartChart"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnIdSmartChartChanging(int value);
        /// <summary>Called after <see cref="IdSmartChart"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnIdSmartChartChanged();
        /// <summary>Called when <see cref="IdSmartReport"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnIdSmartReportChanging(Nullable<int> value);
        /// <summary>Called after <see cref="IdSmartReport"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnIdSmartReportChanged();
        /// <summary>Called when <see cref="ChartName"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnChartNameChanging(string value);
        /// <summary>Called after <see cref="ChartName"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnChartNameChanged();
        /// <summary>Called when <see cref="FileName"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnFileNameChanging(string value);
        /// <summary>Called after <see cref="FileName"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnFileNameChanged();
        /// <summary>Called when <see cref="Insights"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnInsightsChanging(string value);
        /// <summary>Called after <see cref="Insights"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnInsightsChanged();
        /// <summary>Called when <see cref="IdChartType"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnIdChartTypeChanging(Nullable<int> value);
        /// <summary>Called after <see cref="IdChartType"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnIdChartTypeChanged();
        /// <summary>Called when <see cref="AxisSeriesTitle"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnAxisSeriesTitleChanging(string value);
        /// <summary>Called after <see cref="AxisSeriesTitle"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnAxisSeriesTitleChanged();
        /// <summary>Called when <see cref="AxisValuesTitle"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnAxisValuesTitleChanging(string value);
        /// <summary>Called after <see cref="AxisValuesTitle"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnAxisValuesTitleChanged();
        /// <summary>Called when <see cref="ChartOrder"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnChartOrderChanging(Nullable<int> value);
        /// <summary>Called after <see cref="ChartOrder"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnChartOrderChanged();
        /// <summary>Called when <see cref="SocialPostFilter"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnSocialPostFilterChanging(string value);
        /// <summary>Called after <see cref="SocialPostFilter"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnSocialPostFilterChanged();
        /// <summary>Called when <see cref="CssClasses"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnCssClassesChanging(string value);
        /// <summary>Called after <see cref="CssClasses"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnCssClassesChanged();
        /// <summary>Called when <see cref="IdDataProvider"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnIdDataProviderChanging(Nullable<int> value);
        /// <summary>Called after <see cref="IdDataProvider"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnIdDataProviderChanged();
        /// <summary>Called when <see cref="HtmlStyles"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnHtmlStylesChanging(string value);
        /// <summary>Called after <see cref="HtmlStyles"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnHtmlStylesChanged();
        /// <summary>Called when <see cref="ChartType"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnChartTypeChanging(ChartType value);
        /// <summary>Called after <see cref="ChartType"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnChartTypeChanged();
        /// <summary>Called when <see cref="SmartReport"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnSmartReportChanging(SmartReport value);
        /// <summary>Called after <see cref="SmartReport"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnSmartReportChanged();
        /// <summary>Called when <see cref="DataProvider"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnDataProviderChanging(DataProvider value);
        /// <summary>Called after <see cref="DataProvider"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnDataProviderChanged();

        #endregion

        #region Serialization
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private bool serializing;

        /// <summary>
        /// Called when serializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public void OnSerializing(System.Runtime.Serialization.StreamingContext context) {
            serializing = true;
        }

        /// <summary>
        /// Called when serialized.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerialized]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public void OnSerialized(System.Runtime.Serialization.StreamingContext context) {
            serializing = false;
        }

        /// <summary>
        /// Called when deserializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnDeserializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public void OnDeserializing(System.Runtime.Serialization.StreamingContext context) {
            Initialize();
        }

        /// <summary>
        /// Deserializes an instance of <see cref="SmartChart"/> from XML.
        /// </summary>
        /// <param name="xml">The XML string representing a <see cref="SmartChart"/> instance.</param>
        /// <returns>An instance of <see cref="SmartChart"/> that is deserialized from the XML string.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SmartChart FromXml(string xml)
        {
            var deserializer = new System.Runtime.Serialization.DataContractSerializer(typeof(SmartChart));

            using (var sr = new System.IO.StringReader(xml))
            using (var reader = System.Xml.XmlReader.Create(sr))
            {
                return deserializer.ReadObject(reader) as SmartChart;
            }
        }

        /// <summary>
        /// Deserializes an instance of <see cref="SmartChart"/> from a byte array.
        /// </summary>
        /// <param name="buffer">The byte array representing a <see cref="SmartChart"/> instance.</param>
        /// <returns>An instance of <see cref="SmartChart"/> that is deserialized from the byte array.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SmartChart FromBinary(byte[] buffer)
        {
            var deserializer = new System.Runtime.Serialization.DataContractSerializer(typeof(SmartChart));

            using (var ms = new System.IO.MemoryStream(buffer))
            using (var reader = System.Xml.XmlDictionaryReader.CreateBinaryReader(ms, System.Xml.XmlDictionaryReaderQuotas.Max))
            {
                return deserializer.ReadObject(reader) as SmartChart;
            }
        }
        
        #endregion

        #region Clone
        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        object ICloneable.Clone()
        {
            var serializer = new System.Runtime.Serialization.DataContractSerializer(GetType());
            using (var ms = new System.IO.MemoryStream())
            {
                serializer.WriteObject(ms, this);
                ms.Position = 0;
                return serializer.ReadObject(ms);
            }
        }

        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        /// <remarks>
        /// Only loaded <see cref="T:System.Data.Linq.EntityRef`1"/> and <see cref="T:System.Data.Linq.EntitySet`1" /> child accessions will be cloned.
        /// </remarks>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public SmartChart Clone()
        {
            return (SmartChart)((ICloneable)this).Clone();
        }
        #endregion

        #region Detach Methods
        /// <summary>
        /// Detach this instance from the <see cref="System.Data.Linq.DataContext"/>.
        /// </summary>
        /// <remarks>
        /// Detaching the entity will stop all lazy loading and allow it to be added to another <see cref="System.Data.Linq.DataContext"/>.
        /// </remarks>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public override void Detach()
        {
            if (!IsAttached())
                return;

            base.Detach();
            _chartType = Detach(_chartType);
            _smartReport = Detach(_smartReport);
            _dataProvider = Detach(_dataProvider);
            _chartCommentList = Detach(_chartCommentList, OnChartCommentListAdd, OnChartCommentListRemove);
            _chartSeriesList = Detach(_chartSeriesList, OnChartSeriesListAdd, OnChartSeriesListRemove);
        }
        #endregion
    }
}
#pragma warning restore 1591
#pragma warning restore 0414
