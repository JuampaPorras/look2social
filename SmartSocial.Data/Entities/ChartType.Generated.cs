#pragma warning disable 1591
#pragma warning disable 0414        
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;

namespace SmartSocial.Data
{
    /// <summary>
    /// The class representing the dbo.ChartType table.
    /// </summary>
    [System.Data.Linq.Mapping.Table(Name="dbo.ChartType")]
    [System.Runtime.Serialization.DataContract(IsReference = true)]
    [System.ComponentModel.DataAnnotations.ScaffoldTable(true)]
    [System.ComponentModel.DataAnnotations.MetadataType(typeof(SmartSocial.Data.ChartType.Metadata))]
    [System.Data.Services.Common.DataServiceKey("IdChartType")]
    [System.Diagnostics.DebuggerDisplay("IdChartType: {IdChartType}")]
    public partial class ChartType
        : LinqEntityBase, ICloneable 
    {
        #region Static Constructor
        /// <summary>
        /// Initializes the <see cref="ChartType"/> class.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        static ChartType()
        {
            AddSharedRules();
        }
        #endregion

        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="ChartType"/> class.
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCode]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public ChartType()
        {
            Initialize();
        }

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private void Initialize()
        {
            _smartChartList = new System.Data.Linq.EntitySet<SmartChart>(OnSmartChartListAdd, OnSmartChartListRemove);
            _dataProviderXChartTypeList = new System.Data.Linq.EntitySet<DataProviderXChartType>(OnDataProviderXChartTypeListAdd, OnDataProviderXChartTypeListRemove);
            OnCreated();
        }
        #endregion

        #region Column Mapped Properties

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private int _idChartType = default(int);

        /// <summary>
        /// Gets the idChartType column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "idChartType", Storage = "_idChartType", DbType = "int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true, CanBeNull = false)]
        [System.Runtime.Serialization.DataMember(Order = 1)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public int IdChartType
        {
            get { return _idChartType; }
            set
            {
                if (_idChartType != value)
                {
                    OnIdChartTypeChanging(value);
                    SendPropertyChanging("IdChartType");
                    _idChartType = value;
                    SendPropertyChanged("IdChartType");
                    OnIdChartTypeChanged();
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private string _chartTypeName;

        /// <summary>
        /// Gets or sets the ChartTypeName column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "ChartTypeName", Storage = "_chartTypeName", DbType = "nvarchar(MAX)")]
        [System.Runtime.Serialization.DataMember(Order = 2)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public string ChartTypeName
        {
            get { return _chartTypeName; }
            set
            {
                if (_chartTypeName != value)
                {
                    OnChartTypeNameChanging(value);
                    SendPropertyChanging("ChartTypeName");
                    _chartTypeName = value;
                    SendPropertyChanged("ChartTypeName");
                    OnChartTypeNameChanged();
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private string _storedProcedureName;

        /// <summary>
        /// Gets or sets the StoredProcedureName column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "StoredProcedureName", Storage = "_storedProcedureName", DbType = "nvarchar(MAX)")]
        [System.Runtime.Serialization.DataMember(Order = 3)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public string StoredProcedureName
        {
            get { return _storedProcedureName; }
            set
            {
                if (_storedProcedureName != value)
                {
                    OnStoredProcedureNameChanging(value);
                    SendPropertyChanging("StoredProcedureName");
                    _storedProcedureName = value;
                    SendPropertyChanged("StoredProcedureName");
                    OnStoredProcedureNameChanged();
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private string _description;

        /// <summary>
        /// Gets or sets the Description column value.
        /// </summary>
        [System.Data.Linq.Mapping.Column(Name = "Description", Storage = "_description", DbType = "nvarchar(MAX)")]
        [System.Runtime.Serialization.DataMember(Order = 4)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    OnDescriptionChanging(value);
                    SendPropertyChanging("Description");
                    _description = value;
                    SendPropertyChanged("Description");
                    OnDescriptionChanged();
                }
            }
        }
        #endregion

        #region Association Mapped Properties

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private System.Data.Linq.EntitySet<SmartChart> _smartChartList;

        /// <summary>
        /// Gets or sets the <see cref="SmartChart"/> association.
        /// </summary>
        [System.Data.Linq.Mapping.Association(Name = "ChartType_SmartChart", Storage = "_smartChartList", ThisKey = "IdChartType", OtherKey = "IdChartType")]
        [System.Runtime.Serialization.DataMember(Order=5, EmitDefaultValue=false)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public System.Data.Linq.EntitySet<SmartChart> SmartChartList
        {
            get { return (serializing && !_smartChartList.HasLoadedOrAssignedValues) ? null : _smartChartList; }
            set { _smartChartList.Assign(value); }
        }
        
        

        [System.Diagnostics.DebuggerNonUserCode]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private void OnSmartChartListAdd(SmartChart entity)
        {
            SendPropertyChanging(null);
            entity.ChartType = this;
            SendPropertyChanged(null);
        }

        [System.Diagnostics.DebuggerNonUserCode]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private void OnSmartChartListRemove(SmartChart entity)
        {
            SendPropertyChanging(null);
            entity.ChartType = null;
            SendPropertyChanged(null);
        }

        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private System.Data.Linq.EntitySet<DataProviderXChartType> _dataProviderXChartTypeList;

        /// <summary>
        /// Gets or sets the <see cref="DataProviderXChartType"/> association.
        /// </summary>
        [System.Data.Linq.Mapping.Association(Name = "ChartType_DataProviderXChartType", Storage = "_dataProviderXChartTypeList", ThisKey = "IdChartType", OtherKey = "IdChartType")]
        [System.Runtime.Serialization.DataMember(Order=6, EmitDefaultValue=false)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public System.Data.Linq.EntitySet<DataProviderXChartType> DataProviderXChartTypeList
        {
            get { return (serializing && !_dataProviderXChartTypeList.HasLoadedOrAssignedValues) ? null : _dataProviderXChartTypeList; }
            set { _dataProviderXChartTypeList.Assign(value); }
        }
        
        

        [System.Diagnostics.DebuggerNonUserCode]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private void OnDataProviderXChartTypeListAdd(DataProviderXChartType entity)
        {
            SendPropertyChanging(null);
            entity.ChartType = this;
            SendPropertyChanged(null);
        }

        [System.Diagnostics.DebuggerNonUserCode]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private void OnDataProviderXChartTypeListRemove(DataProviderXChartType entity)
        {
            SendPropertyChanging(null);
            entity.ChartType = null;
            SendPropertyChanged(null);
        }
        #endregion

        #region Extensibility Method Definitions
        /// <summary>Called by the static constructor to add shared rules.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        static partial void AddSharedRules();
        /// <summary>Called when this instance is loaded.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnCreated();
        /// <summary>Called when <see cref="IdChartType"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnIdChartTypeChanging(int value);
        /// <summary>Called after <see cref="IdChartType"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnIdChartTypeChanged();
        /// <summary>Called when <see cref="ChartTypeName"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnChartTypeNameChanging(string value);
        /// <summary>Called after <see cref="ChartTypeName"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnChartTypeNameChanged();
        /// <summary>Called when <see cref="StoredProcedureName"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnStoredProcedureNameChanging(string value);
        /// <summary>Called after <see cref="StoredProcedureName"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnStoredProcedureNameChanged();
        /// <summary>Called when <see cref="Description"/> is changing.</summary>
        /// <param name="value">The new value.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnDescriptionChanging(string value);
        /// <summary>Called after <see cref="Description"/> has Changed.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        partial void OnDescriptionChanged();

        #endregion

        #region Serialization
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        private bool serializing;

        /// <summary>
        /// Called when serializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public void OnSerializing(System.Runtime.Serialization.StreamingContext context) {
            serializing = true;
        }

        /// <summary>
        /// Called when serialized.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnSerialized]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public void OnSerialized(System.Runtime.Serialization.StreamingContext context) {
            serializing = false;
        }

        /// <summary>
        /// Called when deserializing.
        /// </summary>
        /// <param name="context">The <see cref="System.Runtime.Serialization.StreamingContext"/> for the serialization.</param>
        [System.Runtime.Serialization.OnDeserializing]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public void OnDeserializing(System.Runtime.Serialization.StreamingContext context) {
            Initialize();
        }

        /// <summary>
        /// Deserializes an instance of <see cref="ChartType"/> from XML.
        /// </summary>
        /// <param name="xml">The XML string representing a <see cref="ChartType"/> instance.</param>
        /// <returns>An instance of <see cref="ChartType"/> that is deserialized from the XML string.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static ChartType FromXml(string xml)
        {
            var deserializer = new System.Runtime.Serialization.DataContractSerializer(typeof(ChartType));

            using (var sr = new System.IO.StringReader(xml))
            using (var reader = System.Xml.XmlReader.Create(sr))
            {
                return deserializer.ReadObject(reader) as ChartType;
            }
        }

        /// <summary>
        /// Deserializes an instance of <see cref="ChartType"/> from a byte array.
        /// </summary>
        /// <param name="buffer">The byte array representing a <see cref="ChartType"/> instance.</param>
        /// <returns>An instance of <see cref="ChartType"/> that is deserialized from the byte array.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static ChartType FromBinary(byte[] buffer)
        {
            var deserializer = new System.Runtime.Serialization.DataContractSerializer(typeof(ChartType));

            using (var ms = new System.IO.MemoryStream(buffer))
            using (var reader = System.Xml.XmlDictionaryReader.CreateBinaryReader(ms, System.Xml.XmlDictionaryReaderQuotas.Max))
            {
                return deserializer.ReadObject(reader) as ChartType;
            }
        }
        
        #endregion

        #region Clone
        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        object ICloneable.Clone()
        {
            var serializer = new System.Runtime.Serialization.DataContractSerializer(GetType());
            using (var ms = new System.IO.MemoryStream())
            {
                serializer.WriteObject(ms, this);
                ms.Position = 0;
                return serializer.ReadObject(ms);
            }
        }

        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        /// <remarks>
        /// Only loaded <see cref="T:System.Data.Linq.EntityRef`1"/> and <see cref="T:System.Data.Linq.EntitySet`1" /> child accessions will be cloned.
        /// </remarks>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public ChartType Clone()
        {
            return (ChartType)((ICloneable)this).Clone();
        }
        #endregion

        #region Detach Methods
        /// <summary>
        /// Detach this instance from the <see cref="System.Data.Linq.DataContext"/>.
        /// </summary>
        /// <remarks>
        /// Detaching the entity will stop all lazy loading and allow it to be added to another <see cref="System.Data.Linq.DataContext"/>.
        /// </remarks>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public override void Detach()
        {
            if (!IsAttached())
                return;

            base.Detach();
            _smartChartList = Detach(_smartChartList, OnSmartChartListAdd, OnSmartChartListRemove);
            _dataProviderXChartTypeList = Detach(_dataProviderXChartTypeList, OnDataProviderXChartTypeListAdd, OnDataProviderXChartTypeListRemove);
        }
        #endregion
    }
}
#pragma warning restore 1591
#pragma warning restore 0414
