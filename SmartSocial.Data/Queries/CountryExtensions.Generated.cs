#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace SmartSocial.Data
{
    /// <summary>
    /// The query extension class for Country.
    /// </summary>
    public static partial class CountryExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SmartSocial.Data.Country GetByKey(this IQueryable<SmartSocial.Data.Country> queryable, int idCountry)
        {
            var entity = queryable as System.Data.Linq.Table<SmartSocial.Data.Country>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((SmartSocial.Data.SmartSocialdbDataContext)entity.Context, idCountry);

            return queryable.FirstOrDefault(c => c.IdCountry == idCountry);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<SmartSocial.Data.Country> table, int idCountry)
        {
            return table.Delete(c => c.IdCountry == idCountry);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.IdCountry"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idCountry">IdCountry to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByIdCountry(this IQueryable<SmartSocial.Data.Country> queryable, int idCountry)
        {
            return queryable.Where(c => c.IdCountry == idCountry);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.IdCountry"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idCountry">IdCountry to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByIdCountry(this IQueryable<SmartSocial.Data.Country> queryable, ComparisonOperator comparisonOperator, int idCountry)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.IdCountry > idCountry);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.IdCountry >= idCountry);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.IdCountry < idCountry);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.IdCountry <= idCountry);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.IdCountry != idCountry);
                default:
                    return queryable.Where(c => c.IdCountry == idCountry);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.IdCountry"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idCountry">IdCountry to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByIdCountry(this IQueryable<SmartSocial.Data.Country> queryable, int idCountry, params int[] additionalValues)
        {
            var idCountryList = new List<int> { idCountry };

            if (additionalValues != null)
                idCountryList.AddRange(additionalValues);

            if (idCountryList.Count == 1)
                return queryable.ByIdCountry(idCountryList[0]);

            return queryable.ByIdCountry(idCountryList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.IdCountry"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByIdCountry(this IQueryable<SmartSocial.Data.Country> queryable, IEnumerable<int> values)
        {
            return queryable.Where(c => values.Contains(c.IdCountry));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.Iso2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="iso2">Iso2 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByIso2(this IQueryable<SmartSocial.Data.Country> queryable, string iso2)
        {
            // support nulls
            return iso2 == null 
                ? queryable.Where(c => c.Iso2 == null) 
                : queryable.Where(c => c.Iso2 == iso2);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.Iso2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="iso2">Iso2 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByIso2(this IQueryable<SmartSocial.Data.Country> queryable, ContainmentOperator containmentOperator, string iso2)
        {
            if (iso2 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("iso2", "Parameter 'iso2' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.Iso2.Contains(iso2));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.Iso2.StartsWith(iso2));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.Iso2.EndsWith(iso2));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.Iso2.Contains(iso2) == false);
                case ContainmentOperator.NotEquals:
                    return iso2 == null 
                        ? queryable.Where(c => c.Iso2 != null) 
                        : queryable.Where(c => c.Iso2 != iso2);
                default:
                    return iso2 == null 
                        ? queryable.Where(c => c.Iso2 == null) 
                        : queryable.Where(c => c.Iso2 == iso2);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.Iso2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="iso2">Iso2 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByIso2(this IQueryable<SmartSocial.Data.Country> queryable, string iso2, params string[] additionalValues)
        {
            var iso2List = new List<string> { iso2 };

            if (additionalValues != null)
                iso2List.AddRange(additionalValues);
            else
                iso2List.Add(null);

            if (iso2List.Count == 1)
                return queryable.ByIso2(iso2List[0]);

            return queryable.ByIso2(iso2List);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.Iso2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByIso2(this IQueryable<SmartSocial.Data.Country> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.Country, bool>("Iso2", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.CountryName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="countryName">CountryName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByCountryName(this IQueryable<SmartSocial.Data.Country> queryable, string countryName)
        {
            // support nulls
            return countryName == null 
                ? queryable.Where(c => c.CountryName == null) 
                : queryable.Where(c => c.CountryName == countryName);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.CountryName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="countryName">CountryName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByCountryName(this IQueryable<SmartSocial.Data.Country> queryable, ContainmentOperator containmentOperator, string countryName)
        {
            if (countryName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("countryName", "Parameter 'countryName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.CountryName.Contains(countryName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.CountryName.StartsWith(countryName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.CountryName.EndsWith(countryName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.CountryName.Contains(countryName) == false);
                case ContainmentOperator.NotEquals:
                    return countryName == null 
                        ? queryable.Where(c => c.CountryName != null) 
                        : queryable.Where(c => c.CountryName != countryName);
                default:
                    return countryName == null 
                        ? queryable.Where(c => c.CountryName == null) 
                        : queryable.Where(c => c.CountryName == countryName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.CountryName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="countryName">CountryName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByCountryName(this IQueryable<SmartSocial.Data.Country> queryable, string countryName, params string[] additionalValues)
        {
            var countryNameList = new List<string> { countryName };

            if (additionalValues != null)
                countryNameList.AddRange(additionalValues);
            else
                countryNameList.Add(null);

            if (countryNameList.Count == 1)
                return queryable.ByCountryName(countryNameList[0]);

            return queryable.ByCountryName(countryNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.CountryName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByCountryName(this IQueryable<SmartSocial.Data.Country> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.Country, bool>("CountryName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.LongCountryName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="longCountryName">LongCountryName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByLongCountryName(this IQueryable<SmartSocial.Data.Country> queryable, string longCountryName)
        {
            // support nulls
            return longCountryName == null 
                ? queryable.Where(c => c.LongCountryName == null) 
                : queryable.Where(c => c.LongCountryName == longCountryName);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.LongCountryName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="longCountryName">LongCountryName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByLongCountryName(this IQueryable<SmartSocial.Data.Country> queryable, ContainmentOperator containmentOperator, string longCountryName)
        {
            if (longCountryName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("longCountryName", "Parameter 'longCountryName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.LongCountryName.Contains(longCountryName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.LongCountryName.StartsWith(longCountryName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.LongCountryName.EndsWith(longCountryName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.LongCountryName.Contains(longCountryName) == false);
                case ContainmentOperator.NotEquals:
                    return longCountryName == null 
                        ? queryable.Where(c => c.LongCountryName != null) 
                        : queryable.Where(c => c.LongCountryName != longCountryName);
                default:
                    return longCountryName == null 
                        ? queryable.Where(c => c.LongCountryName == null) 
                        : queryable.Where(c => c.LongCountryName == longCountryName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.LongCountryName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="longCountryName">LongCountryName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByLongCountryName(this IQueryable<SmartSocial.Data.Country> queryable, string longCountryName, params string[] additionalValues)
        {
            var longCountryNameList = new List<string> { longCountryName };

            if (additionalValues != null)
                longCountryNameList.AddRange(additionalValues);
            else
                longCountryNameList.Add(null);

            if (longCountryNameList.Count == 1)
                return queryable.ByLongCountryName(longCountryNameList[0]);

            return queryable.ByLongCountryName(longCountryNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.LongCountryName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByLongCountryName(this IQueryable<SmartSocial.Data.Country> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.Country, bool>("LongCountryName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.Iso3"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="iso3">Iso3 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByIso3(this IQueryable<SmartSocial.Data.Country> queryable, string iso3)
        {
            // support nulls
            return iso3 == null 
                ? queryable.Where(c => c.Iso3 == null) 
                : queryable.Where(c => c.Iso3 == iso3);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.Iso3"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="iso3">Iso3 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByIso3(this IQueryable<SmartSocial.Data.Country> queryable, ContainmentOperator containmentOperator, string iso3)
        {
            if (iso3 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("iso3", "Parameter 'iso3' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.Iso3.Contains(iso3));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.Iso3.StartsWith(iso3));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.Iso3.EndsWith(iso3));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.Iso3.Contains(iso3) == false);
                case ContainmentOperator.NotEquals:
                    return iso3 == null 
                        ? queryable.Where(c => c.Iso3 != null) 
                        : queryable.Where(c => c.Iso3 != iso3);
                default:
                    return iso3 == null 
                        ? queryable.Where(c => c.Iso3 == null) 
                        : queryable.Where(c => c.Iso3 == iso3);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.Iso3"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="iso3">Iso3 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByIso3(this IQueryable<SmartSocial.Data.Country> queryable, string iso3, params string[] additionalValues)
        {
            var iso3List = new List<string> { iso3 };

            if (additionalValues != null)
                iso3List.AddRange(additionalValues);
            else
                iso3List.Add(null);

            if (iso3List.Count == 1)
                return queryable.ByIso3(iso3List[0]);

            return queryable.ByIso3(iso3List);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.Iso3"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByIso3(this IQueryable<SmartSocial.Data.Country> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.Country, bool>("Iso3", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.NumCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="numCode">NumCode to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByNumCode(this IQueryable<SmartSocial.Data.Country> queryable, string numCode)
        {
            // support nulls
            return numCode == null 
                ? queryable.Where(c => c.NumCode == null) 
                : queryable.Where(c => c.NumCode == numCode);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.NumCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="numCode">NumCode to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByNumCode(this IQueryable<SmartSocial.Data.Country> queryable, ContainmentOperator containmentOperator, string numCode)
        {
            if (numCode == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("numCode", "Parameter 'numCode' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.NumCode.Contains(numCode));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.NumCode.StartsWith(numCode));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.NumCode.EndsWith(numCode));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.NumCode.Contains(numCode) == false);
                case ContainmentOperator.NotEquals:
                    return numCode == null 
                        ? queryable.Where(c => c.NumCode != null) 
                        : queryable.Where(c => c.NumCode != numCode);
                default:
                    return numCode == null 
                        ? queryable.Where(c => c.NumCode == null) 
                        : queryable.Where(c => c.NumCode == numCode);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.NumCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="numCode">NumCode to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByNumCode(this IQueryable<SmartSocial.Data.Country> queryable, string numCode, params string[] additionalValues)
        {
            var numCodeList = new List<string> { numCode };

            if (additionalValues != null)
                numCodeList.AddRange(additionalValues);
            else
                numCodeList.Add(null);

            if (numCodeList.Count == 1)
                return queryable.ByNumCode(numCodeList[0]);

            return queryable.ByNumCode(numCodeList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.NumCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByNumCode(this IQueryable<SmartSocial.Data.Country> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.Country, bool>("NumCode", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.UNMemberState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="uNMemberState">UNMemberState to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByUNMemberState(this IQueryable<SmartSocial.Data.Country> queryable, string uNMemberState)
        {
            // support nulls
            return uNMemberState == null 
                ? queryable.Where(c => c.UNMemberState == null) 
                : queryable.Where(c => c.UNMemberState == uNMemberState);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.UNMemberState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="uNMemberState">UNMemberState to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByUNMemberState(this IQueryable<SmartSocial.Data.Country> queryable, ContainmentOperator containmentOperator, string uNMemberState)
        {
            if (uNMemberState == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("uNMemberState", "Parameter 'uNMemberState' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.UNMemberState.Contains(uNMemberState));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.UNMemberState.StartsWith(uNMemberState));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.UNMemberState.EndsWith(uNMemberState));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.UNMemberState.Contains(uNMemberState) == false);
                case ContainmentOperator.NotEquals:
                    return uNMemberState == null 
                        ? queryable.Where(c => c.UNMemberState != null) 
                        : queryable.Where(c => c.UNMemberState != uNMemberState);
                default:
                    return uNMemberState == null 
                        ? queryable.Where(c => c.UNMemberState == null) 
                        : queryable.Where(c => c.UNMemberState == uNMemberState);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.UNMemberState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="uNMemberState">UNMemberState to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByUNMemberState(this IQueryable<SmartSocial.Data.Country> queryable, string uNMemberState, params string[] additionalValues)
        {
            var uNMemberStateList = new List<string> { uNMemberState };

            if (additionalValues != null)
                uNMemberStateList.AddRange(additionalValues);
            else
                uNMemberStateList.Add(null);

            if (uNMemberStateList.Count == 1)
                return queryable.ByUNMemberState(uNMemberStateList[0]);

            return queryable.ByUNMemberState(uNMemberStateList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.UNMemberState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByUNMemberState(this IQueryable<SmartSocial.Data.Country> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.Country, bool>("UNMemberState", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.CallingCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="callingCode">CallingCode to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByCallingCode(this IQueryable<SmartSocial.Data.Country> queryable, string callingCode)
        {
            // support nulls
            return callingCode == null 
                ? queryable.Where(c => c.CallingCode == null) 
                : queryable.Where(c => c.CallingCode == callingCode);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.CallingCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="callingCode">CallingCode to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByCallingCode(this IQueryable<SmartSocial.Data.Country> queryable, ContainmentOperator containmentOperator, string callingCode)
        {
            if (callingCode == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("callingCode", "Parameter 'callingCode' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.CallingCode.Contains(callingCode));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.CallingCode.StartsWith(callingCode));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.CallingCode.EndsWith(callingCode));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.CallingCode.Contains(callingCode) == false);
                case ContainmentOperator.NotEquals:
                    return callingCode == null 
                        ? queryable.Where(c => c.CallingCode != null) 
                        : queryable.Where(c => c.CallingCode != callingCode);
                default:
                    return callingCode == null 
                        ? queryable.Where(c => c.CallingCode == null) 
                        : queryable.Where(c => c.CallingCode == callingCode);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.CallingCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="callingCode">CallingCode to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByCallingCode(this IQueryable<SmartSocial.Data.Country> queryable, string callingCode, params string[] additionalValues)
        {
            var callingCodeList = new List<string> { callingCode };

            if (additionalValues != null)
                callingCodeList.AddRange(additionalValues);
            else
                callingCodeList.Add(null);

            if (callingCodeList.Count == 1)
                return queryable.ByCallingCode(callingCodeList[0]);

            return queryable.ByCallingCode(callingCodeList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.CallingCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByCallingCode(this IQueryable<SmartSocial.Data.Country> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.Country, bool>("CallingCode", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.Cctld"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cctld">Cctld to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByCctld(this IQueryable<SmartSocial.Data.Country> queryable, string cctld)
        {
            // support nulls
            return cctld == null 
                ? queryable.Where(c => c.Cctld == null) 
                : queryable.Where(c => c.Cctld == cctld);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.Cctld"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cctld">Cctld to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByCctld(this IQueryable<SmartSocial.Data.Country> queryable, ContainmentOperator containmentOperator, string cctld)
        {
            if (cctld == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("cctld", "Parameter 'cctld' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.Cctld.Contains(cctld));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.Cctld.StartsWith(cctld));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.Cctld.EndsWith(cctld));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.Cctld.Contains(cctld) == false);
                case ContainmentOperator.NotEquals:
                    return cctld == null 
                        ? queryable.Where(c => c.Cctld != null) 
                        : queryable.Where(c => c.Cctld != cctld);
                default:
                    return cctld == null 
                        ? queryable.Where(c => c.Cctld == null) 
                        : queryable.Where(c => c.Cctld == cctld);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.Cctld"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cctld">Cctld to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByCctld(this IQueryable<SmartSocial.Data.Country> queryable, string cctld, params string[] additionalValues)
        {
            var cctldList = new List<string> { cctld };

            if (additionalValues != null)
                cctldList.AddRange(additionalValues);
            else
                cctldList.Add(null);

            if (cctldList.Count == 1)
                return queryable.ByCctld(cctldList[0]);

            return queryable.ByCctld(cctldList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.Cctld"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByCctld(this IQueryable<SmartSocial.Data.Country> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.Country, bool>("Cctld", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.FlagImageFilename"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="flagImageFilename">FlagImageFilename to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByFlagImageFilename(this IQueryable<SmartSocial.Data.Country> queryable, string flagImageFilename)
        {
            // support nulls
            return flagImageFilename == null 
                ? queryable.Where(c => c.FlagImageFilename == null) 
                : queryable.Where(c => c.FlagImageFilename == flagImageFilename);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.FlagImageFilename"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="flagImageFilename">FlagImageFilename to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByFlagImageFilename(this IQueryable<SmartSocial.Data.Country> queryable, ContainmentOperator containmentOperator, string flagImageFilename)
        {
            if (flagImageFilename == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("flagImageFilename", "Parameter 'flagImageFilename' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.FlagImageFilename.Contains(flagImageFilename));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.FlagImageFilename.StartsWith(flagImageFilename));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.FlagImageFilename.EndsWith(flagImageFilename));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.FlagImageFilename.Contains(flagImageFilename) == false);
                case ContainmentOperator.NotEquals:
                    return flagImageFilename == null 
                        ? queryable.Where(c => c.FlagImageFilename != null) 
                        : queryable.Where(c => c.FlagImageFilename != flagImageFilename);
                default:
                    return flagImageFilename == null 
                        ? queryable.Where(c => c.FlagImageFilename == null) 
                        : queryable.Where(c => c.FlagImageFilename == flagImageFilename);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.FlagImageFilename"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="flagImageFilename">FlagImageFilename to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByFlagImageFilename(this IQueryable<SmartSocial.Data.Country> queryable, string flagImageFilename, params string[] additionalValues)
        {
            var flagImageFilenameList = new List<string> { flagImageFilename };

            if (additionalValues != null)
                flagImageFilenameList.AddRange(additionalValues);
            else
                flagImageFilenameList.Add(null);

            if (flagImageFilenameList.Count == 1)
                return queryable.ByFlagImageFilename(flagImageFilenameList[0]);

            return queryable.ByFlagImageFilename(flagImageFilenameList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Country.FlagImageFilename"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Country> ByFlagImageFilename(this IQueryable<SmartSocial.Data.Country> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.Country, bool>("FlagImageFilename", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<SmartSocial.Data.SmartSocialdbDataContext, int, SmartSocial.Data.Country> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (SmartSocial.Data.SmartSocialdbDataContext db, int idCountry) =>
                        db.Country.FirstOrDefault(c => c.IdCountry == idCountry));

        }
        #endregion
    }
}
#pragma warning restore 1591
