#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace SmartSocial.Data
{
    /// <summary>
    /// The query extension class for Leads.
    /// </summary>
    public static partial class LeadsExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SmartSocial.Data.Leads GetByKey(this IQueryable<SmartSocial.Data.Leads> queryable, int idLead)
        {
            var entity = queryable as System.Data.Linq.Table<SmartSocial.Data.Leads>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((SmartSocial.Data.SmartSocialdbDataContext)entity.Context, idLead);

            return queryable.FirstOrDefault(l => l.IdLead == idLead);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<SmartSocial.Data.Leads> table, int idLead)
        {
            return table.Delete(l => l.IdLead == idLead);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IdLead"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idLead">IdLead to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIdLead(this IQueryable<SmartSocial.Data.Leads> queryable, int idLead)
        {
            return queryable.Where(l => l.IdLead == idLead);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IdLead"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idLead">IdLead to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIdLead(this IQueryable<SmartSocial.Data.Leads> queryable, ComparisonOperator comparisonOperator, int idLead)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(l => l.IdLead > idLead);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(l => l.IdLead >= idLead);
                case ComparisonOperator.LessThan:
                    return queryable.Where(l => l.IdLead < idLead);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(l => l.IdLead <= idLead);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.IdLead != idLead);
                default:
                    return queryable.Where(l => l.IdLead == idLead);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IdLead"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idLead">IdLead to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIdLead(this IQueryable<SmartSocial.Data.Leads> queryable, int idLead, params int[] additionalValues)
        {
            var idLeadList = new List<int> { idLead };

            if (additionalValues != null)
                idLeadList.AddRange(additionalValues);

            if (idLeadList.Count == 1)
                return queryable.ByIdLead(idLeadList[0]);

            return queryable.ByIdLead(idLeadList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IdLead"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIdLead(this IQueryable<SmartSocial.Data.Leads> queryable, IEnumerable<int> values)
        {
            return queryable.Where(l => values.Contains(l.IdLead));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByFirstName(this IQueryable<SmartSocial.Data.Leads> queryable, string firstName)
        {
            return queryable.Where(l => l.FirstName == firstName);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByFirstName(this IQueryable<SmartSocial.Data.Leads> queryable, ContainmentOperator containmentOperator, string firstName)
        {
            if (firstName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("firstName", "Parameter 'firstName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.FirstName.Contains(firstName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.FirstName.StartsWith(firstName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.FirstName.EndsWith(firstName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.FirstName.Contains(firstName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(l => l.FirstName != firstName);
                default:
                    return queryable.Where(l => l.FirstName == firstName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByFirstName(this IQueryable<SmartSocial.Data.Leads> queryable, string firstName, params string[] additionalValues)
        {
            var firstNameList = new List<string> { firstName };

            if (additionalValues != null)
                firstNameList.AddRange(additionalValues);

            if (firstNameList.Count == 1)
                return queryable.ByFirstName(firstNameList[0]);

            return queryable.ByFirstName(firstNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByFirstName(this IQueryable<SmartSocial.Data.Leads> queryable, IEnumerable<string> values)
        {
            return queryable.Where(l => values.Contains(l.FirstName));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByLastName(this IQueryable<SmartSocial.Data.Leads> queryable, string lastName)
        {
            return queryable.Where(l => l.LastName == lastName);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByLastName(this IQueryable<SmartSocial.Data.Leads> queryable, ContainmentOperator containmentOperator, string lastName)
        {
            if (lastName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("lastName", "Parameter 'lastName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.LastName.Contains(lastName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.LastName.StartsWith(lastName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.LastName.EndsWith(lastName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.LastName.Contains(lastName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(l => l.LastName != lastName);
                default:
                    return queryable.Where(l => l.LastName == lastName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByLastName(this IQueryable<SmartSocial.Data.Leads> queryable, string lastName, params string[] additionalValues)
        {
            var lastNameList = new List<string> { lastName };

            if (additionalValues != null)
                lastNameList.AddRange(additionalValues);

            if (lastNameList.Count == 1)
                return queryable.ByLastName(lastNameList[0]);

            return queryable.ByLastName(lastNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByLastName(this IQueryable<SmartSocial.Data.Leads> queryable, IEnumerable<string> values)
        {
            return queryable.Where(l => values.Contains(l.LastName));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByEmail(this IQueryable<SmartSocial.Data.Leads> queryable, string email)
        {
            return queryable.Where(l => l.Email == email);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByEmail(this IQueryable<SmartSocial.Data.Leads> queryable, ContainmentOperator containmentOperator, string email)
        {
            if (email == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("email", "Parameter 'email' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.Email.Contains(email));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.Email.StartsWith(email));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.Email.EndsWith(email));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.Email.Contains(email) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(l => l.Email != email);
                default:
                    return queryable.Where(l => l.Email == email);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByEmail(this IQueryable<SmartSocial.Data.Leads> queryable, string email, params string[] additionalValues)
        {
            var emailList = new List<string> { email };

            if (additionalValues != null)
                emailList.AddRange(additionalValues);

            if (emailList.Count == 1)
                return queryable.ByEmail(emailList[0]);

            return queryable.ByEmail(emailList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByEmail(this IQueryable<SmartSocial.Data.Leads> queryable, IEnumerable<string> values)
        {
            return queryable.Where(l => values.Contains(l.Email));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.PhoneNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phoneNumber">PhoneNumber to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByPhoneNumber(this IQueryable<SmartSocial.Data.Leads> queryable, string phoneNumber)
        {
            // support nulls
            return phoneNumber == null 
                ? queryable.Where(l => l.PhoneNumber == null) 
                : queryable.Where(l => l.PhoneNumber == phoneNumber);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.PhoneNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phoneNumber">PhoneNumber to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByPhoneNumber(this IQueryable<SmartSocial.Data.Leads> queryable, ContainmentOperator containmentOperator, string phoneNumber)
        {
            if (phoneNumber == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("phoneNumber", "Parameter 'phoneNumber' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.PhoneNumber.Contains(phoneNumber));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.PhoneNumber.StartsWith(phoneNumber));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.PhoneNumber.EndsWith(phoneNumber));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.PhoneNumber.Contains(phoneNumber) == false);
                case ContainmentOperator.NotEquals:
                    return phoneNumber == null 
                        ? queryable.Where(l => l.PhoneNumber != null) 
                        : queryable.Where(l => l.PhoneNumber != phoneNumber);
                default:
                    return phoneNumber == null 
                        ? queryable.Where(l => l.PhoneNumber == null) 
                        : queryable.Where(l => l.PhoneNumber == phoneNumber);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.PhoneNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phoneNumber">PhoneNumber to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByPhoneNumber(this IQueryable<SmartSocial.Data.Leads> queryable, string phoneNumber, params string[] additionalValues)
        {
            var phoneNumberList = new List<string> { phoneNumber };

            if (additionalValues != null)
                phoneNumberList.AddRange(additionalValues);
            else
                phoneNumberList.Add(null);

            if (phoneNumberList.Count == 1)
                return queryable.ByPhoneNumber(phoneNumberList[0]);

            return queryable.ByPhoneNumber(phoneNumberList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.PhoneNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByPhoneNumber(this IQueryable<SmartSocial.Data.Leads> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.Leads, bool>("PhoneNumber", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.CompanyName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="companyName">CompanyName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByCompanyName(this IQueryable<SmartSocial.Data.Leads> queryable, string companyName)
        {
            // support nulls
            return companyName == null 
                ? queryable.Where(l => l.CompanyName == null) 
                : queryable.Where(l => l.CompanyName == companyName);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.CompanyName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="companyName">CompanyName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByCompanyName(this IQueryable<SmartSocial.Data.Leads> queryable, ContainmentOperator containmentOperator, string companyName)
        {
            if (companyName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("companyName", "Parameter 'companyName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.CompanyName.Contains(companyName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.CompanyName.StartsWith(companyName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.CompanyName.EndsWith(companyName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.CompanyName.Contains(companyName) == false);
                case ContainmentOperator.NotEquals:
                    return companyName == null 
                        ? queryable.Where(l => l.CompanyName != null) 
                        : queryable.Where(l => l.CompanyName != companyName);
                default:
                    return companyName == null 
                        ? queryable.Where(l => l.CompanyName == null) 
                        : queryable.Where(l => l.CompanyName == companyName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.CompanyName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="companyName">CompanyName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByCompanyName(this IQueryable<SmartSocial.Data.Leads> queryable, string companyName, params string[] additionalValues)
        {
            var companyNameList = new List<string> { companyName };

            if (additionalValues != null)
                companyNameList.AddRange(additionalValues);
            else
                companyNameList.Add(null);

            if (companyNameList.Count == 1)
                return queryable.ByCompanyName(companyNameList[0]);

            return queryable.ByCompanyName(companyNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.CompanyName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByCompanyName(this IQueryable<SmartSocial.Data.Leads> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.Leads, bool>("CompanyName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.ServicesDescription"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="servicesDescription">ServicesDescription to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByServicesDescription(this IQueryable<SmartSocial.Data.Leads> queryable, string servicesDescription)
        {
            // support nulls
            return servicesDescription == null 
                ? queryable.Where(l => l.ServicesDescription == null) 
                : queryable.Where(l => l.ServicesDescription == servicesDescription);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.ServicesDescription"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="servicesDescription">ServicesDescription to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByServicesDescription(this IQueryable<SmartSocial.Data.Leads> queryable, ContainmentOperator containmentOperator, string servicesDescription)
        {
            if (servicesDescription == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("servicesDescription", "Parameter 'servicesDescription' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.ServicesDescription.Contains(servicesDescription));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.ServicesDescription.StartsWith(servicesDescription));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.ServicesDescription.EndsWith(servicesDescription));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.ServicesDescription.Contains(servicesDescription) == false);
                case ContainmentOperator.NotEquals:
                    return servicesDescription == null 
                        ? queryable.Where(l => l.ServicesDescription != null) 
                        : queryable.Where(l => l.ServicesDescription != servicesDescription);
                default:
                    return servicesDescription == null 
                        ? queryable.Where(l => l.ServicesDescription == null) 
                        : queryable.Where(l => l.ServicesDescription == servicesDescription);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.ServicesDescription"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="servicesDescription">ServicesDescription to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByServicesDescription(this IQueryable<SmartSocial.Data.Leads> queryable, string servicesDescription, params string[] additionalValues)
        {
            var servicesDescriptionList = new List<string> { servicesDescription };

            if (additionalValues != null)
                servicesDescriptionList.AddRange(additionalValues);
            else
                servicesDescriptionList.Add(null);

            if (servicesDescriptionList.Count == 1)
                return queryable.ByServicesDescription(servicesDescriptionList[0]);

            return queryable.ByServicesDescription(servicesDescriptionList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.ServicesDescription"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByServicesDescription(this IQueryable<SmartSocial.Data.Leads> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.Leads, bool>("ServicesDescription", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.Keywords"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="keywords">Keywords to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByKeywords(this IQueryable<SmartSocial.Data.Leads> queryable, string keywords)
        {
            // support nulls
            return keywords == null 
                ? queryable.Where(l => l.Keywords == null) 
                : queryable.Where(l => l.Keywords == keywords);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.Keywords"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="keywords">Keywords to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByKeywords(this IQueryable<SmartSocial.Data.Leads> queryable, ContainmentOperator containmentOperator, string keywords)
        {
            if (keywords == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("keywords", "Parameter 'keywords' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.Keywords.Contains(keywords));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.Keywords.StartsWith(keywords));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.Keywords.EndsWith(keywords));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.Keywords.Contains(keywords) == false);
                case ContainmentOperator.NotEquals:
                    return keywords == null 
                        ? queryable.Where(l => l.Keywords != null) 
                        : queryable.Where(l => l.Keywords != keywords);
                default:
                    return keywords == null 
                        ? queryable.Where(l => l.Keywords == null) 
                        : queryable.Where(l => l.Keywords == keywords);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.Keywords"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="keywords">Keywords to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByKeywords(this IQueryable<SmartSocial.Data.Leads> queryable, string keywords, params string[] additionalValues)
        {
            var keywordsList = new List<string> { keywords };

            if (additionalValues != null)
                keywordsList.AddRange(additionalValues);
            else
                keywordsList.Add(null);

            if (keywordsList.Count == 1)
                return queryable.ByKeywords(keywordsList[0]);

            return queryable.ByKeywords(keywordsList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.Keywords"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByKeywords(this IQueryable<SmartSocial.Data.Leads> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.Leads, bool>("Keywords", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.MainCompetitors"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="mainCompetitors">MainCompetitors to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByMainCompetitors(this IQueryable<SmartSocial.Data.Leads> queryable, string mainCompetitors)
        {
            // support nulls
            return mainCompetitors == null 
                ? queryable.Where(l => l.MainCompetitors == null) 
                : queryable.Where(l => l.MainCompetitors == mainCompetitors);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.MainCompetitors"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="mainCompetitors">MainCompetitors to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByMainCompetitors(this IQueryable<SmartSocial.Data.Leads> queryable, ContainmentOperator containmentOperator, string mainCompetitors)
        {
            if (mainCompetitors == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("mainCompetitors", "Parameter 'mainCompetitors' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.MainCompetitors.Contains(mainCompetitors));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.MainCompetitors.StartsWith(mainCompetitors));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.MainCompetitors.EndsWith(mainCompetitors));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.MainCompetitors.Contains(mainCompetitors) == false);
                case ContainmentOperator.NotEquals:
                    return mainCompetitors == null 
                        ? queryable.Where(l => l.MainCompetitors != null) 
                        : queryable.Where(l => l.MainCompetitors != mainCompetitors);
                default:
                    return mainCompetitors == null 
                        ? queryable.Where(l => l.MainCompetitors == null) 
                        : queryable.Where(l => l.MainCompetitors == mainCompetitors);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.MainCompetitors"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="mainCompetitors">MainCompetitors to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByMainCompetitors(this IQueryable<SmartSocial.Data.Leads> queryable, string mainCompetitors, params string[] additionalValues)
        {
            var mainCompetitorsList = new List<string> { mainCompetitors };

            if (additionalValues != null)
                mainCompetitorsList.AddRange(additionalValues);
            else
                mainCompetitorsList.Add(null);

            if (mainCompetitorsList.Count == 1)
                return queryable.ByMainCompetitors(mainCompetitorsList[0]);

            return queryable.ByMainCompetitors(mainCompetitorsList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.MainCompetitors"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByMainCompetitors(this IQueryable<SmartSocial.Data.Leads> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.Leads, bool>("MainCompetitors", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.Nickname"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="nickname">Nickname to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByNickname(this IQueryable<SmartSocial.Data.Leads> queryable, string nickname)
        {
            // support nulls
            return nickname == null 
                ? queryable.Where(l => l.Nickname == null) 
                : queryable.Where(l => l.Nickname == nickname);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.Nickname"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="nickname">Nickname to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByNickname(this IQueryable<SmartSocial.Data.Leads> queryable, ContainmentOperator containmentOperator, string nickname)
        {
            if (nickname == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("nickname", "Parameter 'nickname' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.Nickname.Contains(nickname));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.Nickname.StartsWith(nickname));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.Nickname.EndsWith(nickname));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.Nickname.Contains(nickname) == false);
                case ContainmentOperator.NotEquals:
                    return nickname == null 
                        ? queryable.Where(l => l.Nickname != null) 
                        : queryable.Where(l => l.Nickname != nickname);
                default:
                    return nickname == null 
                        ? queryable.Where(l => l.Nickname == null) 
                        : queryable.Where(l => l.Nickname == nickname);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.Nickname"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="nickname">Nickname to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByNickname(this IQueryable<SmartSocial.Data.Leads> queryable, string nickname, params string[] additionalValues)
        {
            var nicknameList = new List<string> { nickname };

            if (additionalValues != null)
                nicknameList.AddRange(additionalValues);
            else
                nicknameList.Add(null);

            if (nicknameList.Count == 1)
                return queryable.ByNickname(nicknameList[0]);

            return queryable.ByNickname(nicknameList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.Nickname"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByNickname(this IQueryable<SmartSocial.Data.Leads> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.Leads, bool>("Nickname", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.MarketPlaceName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="marketPlaceName">MarketPlaceName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByMarketPlaceName(this IQueryable<SmartSocial.Data.Leads> queryable, string marketPlaceName)
        {
            // support nulls
            return marketPlaceName == null 
                ? queryable.Where(l => l.MarketPlaceName == null) 
                : queryable.Where(l => l.MarketPlaceName == marketPlaceName);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.MarketPlaceName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="marketPlaceName">MarketPlaceName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByMarketPlaceName(this IQueryable<SmartSocial.Data.Leads> queryable, ContainmentOperator containmentOperator, string marketPlaceName)
        {
            if (marketPlaceName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("marketPlaceName", "Parameter 'marketPlaceName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.MarketPlaceName.Contains(marketPlaceName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.MarketPlaceName.StartsWith(marketPlaceName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.MarketPlaceName.EndsWith(marketPlaceName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.MarketPlaceName.Contains(marketPlaceName) == false);
                case ContainmentOperator.NotEquals:
                    return marketPlaceName == null 
                        ? queryable.Where(l => l.MarketPlaceName != null) 
                        : queryable.Where(l => l.MarketPlaceName != marketPlaceName);
                default:
                    return marketPlaceName == null 
                        ? queryable.Where(l => l.MarketPlaceName == null) 
                        : queryable.Where(l => l.MarketPlaceName == marketPlaceName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.MarketPlaceName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="marketPlaceName">MarketPlaceName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByMarketPlaceName(this IQueryable<SmartSocial.Data.Leads> queryable, string marketPlaceName, params string[] additionalValues)
        {
            var marketPlaceNameList = new List<string> { marketPlaceName };

            if (additionalValues != null)
                marketPlaceNameList.AddRange(additionalValues);
            else
                marketPlaceNameList.Add(null);

            if (marketPlaceNameList.Count == 1)
                return queryable.ByMarketPlaceName(marketPlaceNameList[0]);

            return queryable.ByMarketPlaceName(marketPlaceNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.MarketPlaceName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByMarketPlaceName(this IQueryable<SmartSocial.Data.Leads> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.Leads, bool>("MarketPlaceName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.DesireReportName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="desireReportName">DesireReportName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByDesireReportName(this IQueryable<SmartSocial.Data.Leads> queryable, string desireReportName)
        {
            // support nulls
            return desireReportName == null 
                ? queryable.Where(l => l.DesireReportName == null) 
                : queryable.Where(l => l.DesireReportName == desireReportName);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.DesireReportName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="desireReportName">DesireReportName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByDesireReportName(this IQueryable<SmartSocial.Data.Leads> queryable, ContainmentOperator containmentOperator, string desireReportName)
        {
            if (desireReportName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("desireReportName", "Parameter 'desireReportName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.DesireReportName.Contains(desireReportName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.DesireReportName.StartsWith(desireReportName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.DesireReportName.EndsWith(desireReportName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.DesireReportName.Contains(desireReportName) == false);
                case ContainmentOperator.NotEquals:
                    return desireReportName == null 
                        ? queryable.Where(l => l.DesireReportName != null) 
                        : queryable.Where(l => l.DesireReportName != desireReportName);
                default:
                    return desireReportName == null 
                        ? queryable.Where(l => l.DesireReportName == null) 
                        : queryable.Where(l => l.DesireReportName == desireReportName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.DesireReportName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="desireReportName">DesireReportName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByDesireReportName(this IQueryable<SmartSocial.Data.Leads> queryable, string desireReportName, params string[] additionalValues)
        {
            var desireReportNameList = new List<string> { desireReportName };

            if (additionalValues != null)
                desireReportNameList.AddRange(additionalValues);
            else
                desireReportNameList.Add(null);

            if (desireReportNameList.Count == 1)
                return queryable.ByDesireReportName(desireReportNameList[0]);

            return queryable.ByDesireReportName(desireReportNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.DesireReportName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByDesireReportName(this IQueryable<SmartSocial.Data.Leads> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.Leads, bool>("DesireReportName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.CompanyWebSite"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="companyWebSite">CompanyWebSite to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByCompanyWebSite(this IQueryable<SmartSocial.Data.Leads> queryable, string companyWebSite)
        {
            // support nulls
            return companyWebSite == null 
                ? queryable.Where(l => l.CompanyWebSite == null) 
                : queryable.Where(l => l.CompanyWebSite == companyWebSite);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.CompanyWebSite"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="companyWebSite">CompanyWebSite to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByCompanyWebSite(this IQueryable<SmartSocial.Data.Leads> queryable, ContainmentOperator containmentOperator, string companyWebSite)
        {
            if (companyWebSite == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("companyWebSite", "Parameter 'companyWebSite' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.CompanyWebSite.Contains(companyWebSite));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.CompanyWebSite.StartsWith(companyWebSite));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.CompanyWebSite.EndsWith(companyWebSite));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.CompanyWebSite.Contains(companyWebSite) == false);
                case ContainmentOperator.NotEquals:
                    return companyWebSite == null 
                        ? queryable.Where(l => l.CompanyWebSite != null) 
                        : queryable.Where(l => l.CompanyWebSite != companyWebSite);
                default:
                    return companyWebSite == null 
                        ? queryable.Where(l => l.CompanyWebSite == null) 
                        : queryable.Where(l => l.CompanyWebSite == companyWebSite);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.CompanyWebSite"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="companyWebSite">CompanyWebSite to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByCompanyWebSite(this IQueryable<SmartSocial.Data.Leads> queryable, string companyWebSite, params string[] additionalValues)
        {
            var companyWebSiteList = new List<string> { companyWebSite };

            if (additionalValues != null)
                companyWebSiteList.AddRange(additionalValues);
            else
                companyWebSiteList.Add(null);

            if (companyWebSiteList.Count == 1)
                return queryable.ByCompanyWebSite(companyWebSiteList[0]);

            return queryable.ByCompanyWebSite(companyWebSiteList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.CompanyWebSite"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByCompanyWebSite(this IQueryable<SmartSocial.Data.Leads> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.Leads, bool>("CompanyWebSite", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.Notes"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="notes">Notes to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByNotes(this IQueryable<SmartSocial.Data.Leads> queryable, string notes)
        {
            // support nulls
            return notes == null 
                ? queryable.Where(l => l.Notes == null) 
                : queryable.Where(l => l.Notes == notes);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.Notes"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="notes">Notes to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByNotes(this IQueryable<SmartSocial.Data.Leads> queryable, ContainmentOperator containmentOperator, string notes)
        {
            if (notes == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("notes", "Parameter 'notes' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.Notes.Contains(notes));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.Notes.StartsWith(notes));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.Notes.EndsWith(notes));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.Notes.Contains(notes) == false);
                case ContainmentOperator.NotEquals:
                    return notes == null 
                        ? queryable.Where(l => l.Notes != null) 
                        : queryable.Where(l => l.Notes != notes);
                default:
                    return notes == null 
                        ? queryable.Where(l => l.Notes == null) 
                        : queryable.Where(l => l.Notes == notes);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.Notes"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="notes">Notes to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByNotes(this IQueryable<SmartSocial.Data.Leads> queryable, string notes, params string[] additionalValues)
        {
            var notesList = new List<string> { notes };

            if (additionalValues != null)
                notesList.AddRange(additionalValues);
            else
                notesList.Add(null);

            if (notesList.Count == 1)
                return queryable.ByNotes(notesList[0]);

            return queryable.ByNotes(notesList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.Notes"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByNotes(this IQueryable<SmartSocial.Data.Leads> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.Leads, bool>("Notes", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IntakeToken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="intakeToken">IntakeToken to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIntakeToken(this IQueryable<SmartSocial.Data.Leads> queryable, string intakeToken)
        {
            // support nulls
            return intakeToken == null 
                ? queryable.Where(l => l.IntakeToken == null) 
                : queryable.Where(l => l.IntakeToken == intakeToken);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IntakeToken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="intakeToken">IntakeToken to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIntakeToken(this IQueryable<SmartSocial.Data.Leads> queryable, ContainmentOperator containmentOperator, string intakeToken)
        {
            if (intakeToken == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("intakeToken", "Parameter 'intakeToken' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.IntakeToken.Contains(intakeToken));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.IntakeToken.StartsWith(intakeToken));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.IntakeToken.EndsWith(intakeToken));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.IntakeToken.Contains(intakeToken) == false);
                case ContainmentOperator.NotEquals:
                    return intakeToken == null 
                        ? queryable.Where(l => l.IntakeToken != null) 
                        : queryable.Where(l => l.IntakeToken != intakeToken);
                default:
                    return intakeToken == null 
                        ? queryable.Where(l => l.IntakeToken == null) 
                        : queryable.Where(l => l.IntakeToken == intakeToken);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IntakeToken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="intakeToken">IntakeToken to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIntakeToken(this IQueryable<SmartSocial.Data.Leads> queryable, string intakeToken, params string[] additionalValues)
        {
            var intakeTokenList = new List<string> { intakeToken };

            if (additionalValues != null)
                intakeTokenList.AddRange(additionalValues);
            else
                intakeTokenList.Add(null);

            if (intakeTokenList.Count == 1)
                return queryable.ByIntakeToken(intakeTokenList[0]);

            return queryable.ByIntakeToken(intakeTokenList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IntakeToken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIntakeToken(this IQueryable<SmartSocial.Data.Leads> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.Leads, bool>("IntakeToken", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IntakeUrl"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="intakeUrl">IntakeUrl to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIntakeUrl(this IQueryable<SmartSocial.Data.Leads> queryable, string intakeUrl)
        {
            // support nulls
            return intakeUrl == null 
                ? queryable.Where(l => l.IntakeUrl == null) 
                : queryable.Where(l => l.IntakeUrl == intakeUrl);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IntakeUrl"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="intakeUrl">IntakeUrl to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIntakeUrl(this IQueryable<SmartSocial.Data.Leads> queryable, ContainmentOperator containmentOperator, string intakeUrl)
        {
            if (intakeUrl == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("intakeUrl", "Parameter 'intakeUrl' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.IntakeUrl.Contains(intakeUrl));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.IntakeUrl.StartsWith(intakeUrl));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.IntakeUrl.EndsWith(intakeUrl));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.IntakeUrl.Contains(intakeUrl) == false);
                case ContainmentOperator.NotEquals:
                    return intakeUrl == null 
                        ? queryable.Where(l => l.IntakeUrl != null) 
                        : queryable.Where(l => l.IntakeUrl != intakeUrl);
                default:
                    return intakeUrl == null 
                        ? queryable.Where(l => l.IntakeUrl == null) 
                        : queryable.Where(l => l.IntakeUrl == intakeUrl);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IntakeUrl"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="intakeUrl">IntakeUrl to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIntakeUrl(this IQueryable<SmartSocial.Data.Leads> queryable, string intakeUrl, params string[] additionalValues)
        {
            var intakeUrlList = new List<string> { intakeUrl };

            if (additionalValues != null)
                intakeUrlList.AddRange(additionalValues);
            else
                intakeUrlList.Add(null);

            if (intakeUrlList.Count == 1)
                return queryable.ByIntakeUrl(intakeUrlList[0]);

            return queryable.ByIntakeUrl(intakeUrlList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IntakeUrl"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIntakeUrl(this IQueryable<SmartSocial.Data.Leads> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.Leads, bool>("IntakeUrl", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.DateCreated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateCreated">DateCreated to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByDateCreated(this IQueryable<SmartSocial.Data.Leads> queryable, System.DateTime dateCreated)
        {
            return queryable.Where(l => l.DateCreated == dateCreated);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.DateCreated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateCreated">DateCreated to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByDateCreated(this IQueryable<SmartSocial.Data.Leads> queryable, ComparisonOperator comparisonOperator, System.DateTime dateCreated)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(l => l.DateCreated > dateCreated);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(l => l.DateCreated >= dateCreated);
                case ComparisonOperator.LessThan:
                    return queryable.Where(l => l.DateCreated < dateCreated);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(l => l.DateCreated <= dateCreated);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.DateCreated != dateCreated);
                default:
                    return queryable.Where(l => l.DateCreated == dateCreated);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.DateCreated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateCreated">DateCreated to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByDateCreated(this IQueryable<SmartSocial.Data.Leads> queryable, System.DateTime dateCreated, params System.DateTime[] additionalValues)
        {
            var dateCreatedList = new List<System.DateTime> { dateCreated };

            if (additionalValues != null)
                dateCreatedList.AddRange(additionalValues);

            if (dateCreatedList.Count == 1)
                return queryable.ByDateCreated(dateCreatedList[0]);

            return queryable.ByDateCreated(dateCreatedList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.DateCreated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByDateCreated(this IQueryable<SmartSocial.Data.Leads> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(l => values.Contains(l.DateCreated));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByDateUpdated(this IQueryable<SmartSocial.Data.Leads> queryable, System.DateTime dateUpdated)
        {
            return queryable.Where(l => l.DateUpdated == dateUpdated);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByDateUpdated(this IQueryable<SmartSocial.Data.Leads> queryable, ComparisonOperator comparisonOperator, System.DateTime dateUpdated)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(l => l.DateUpdated > dateUpdated);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(l => l.DateUpdated >= dateUpdated);
                case ComparisonOperator.LessThan:
                    return queryable.Where(l => l.DateUpdated < dateUpdated);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(l => l.DateUpdated <= dateUpdated);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.DateUpdated != dateUpdated);
                default:
                    return queryable.Where(l => l.DateUpdated == dateUpdated);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByDateUpdated(this IQueryable<SmartSocial.Data.Leads> queryable, System.DateTime dateUpdated, params System.DateTime[] additionalValues)
        {
            var dateUpdatedList = new List<System.DateTime> { dateUpdated };

            if (additionalValues != null)
                dateUpdatedList.AddRange(additionalValues);

            if (dateUpdatedList.Count == 1)
                return queryable.ByDateUpdated(dateUpdatedList[0]);

            return queryable.ByDateUpdated(dateUpdatedList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByDateUpdated(this IQueryable<SmartSocial.Data.Leads> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(l => values.Contains(l.DateUpdated));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IntakeEmailSentDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="intakeEmailSentDate">IntakeEmailSentDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIntakeEmailSentDate(this IQueryable<SmartSocial.Data.Leads> queryable, System.DateTime? intakeEmailSentDate)
        {
            // support nulls
            return intakeEmailSentDate == null 
                ? queryable.Where(l => l.IntakeEmailSentDate == null) 
                : queryable.Where(l => l.IntakeEmailSentDate == intakeEmailSentDate);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IntakeEmailSentDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="intakeEmailSentDate">IntakeEmailSentDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIntakeEmailSentDate(this IQueryable<SmartSocial.Data.Leads> queryable, ComparisonOperator comparisonOperator, System.DateTime? intakeEmailSentDate)
        {
            if (intakeEmailSentDate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("intakeEmailSentDate", "Parameter 'intakeEmailSentDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(l => l.IntakeEmailSentDate > intakeEmailSentDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(l => l.IntakeEmailSentDate >= intakeEmailSentDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(l => l.IntakeEmailSentDate < intakeEmailSentDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(l => l.IntakeEmailSentDate <= intakeEmailSentDate);
                case ComparisonOperator.NotEquals:
                    return intakeEmailSentDate == null 
                        ? queryable.Where(l => l.IntakeEmailSentDate != null) 
                        : queryable.Where(l => l.IntakeEmailSentDate != intakeEmailSentDate);
                default:
                    return intakeEmailSentDate == null 
                        ? queryable.Where(l => l.IntakeEmailSentDate == null) 
                        : queryable.Where(l => l.IntakeEmailSentDate == intakeEmailSentDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IntakeEmailSentDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="intakeEmailSentDate">IntakeEmailSentDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIntakeEmailSentDate(this IQueryable<SmartSocial.Data.Leads> queryable, System.DateTime? intakeEmailSentDate, params System.DateTime?[] additionalValues)
        {
            var intakeEmailSentDateList = new List<System.DateTime?> { intakeEmailSentDate };

            if (additionalValues != null)
                intakeEmailSentDateList.AddRange(additionalValues);
            else
                intakeEmailSentDateList.Add(null);

            if (intakeEmailSentDateList.Count == 1)
                return queryable.ByIntakeEmailSentDate(intakeEmailSentDateList[0]);

            return queryable.ByIntakeEmailSentDate(intakeEmailSentDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IntakeEmailSentDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIntakeEmailSentDate(this IQueryable<SmartSocial.Data.Leads> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.Leads, bool>("IntakeEmailSentDate", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IsActive"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isActive">IsActive to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIsActive(this IQueryable<SmartSocial.Data.Leads> queryable, bool isActive)
        {
            return queryable.Where(l => l.IsActive == isActive);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IsActive"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isActive">IsActive to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIsActive(this IQueryable<SmartSocial.Data.Leads> queryable, ComparisonOperator comparisonOperator, bool isActive)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support bool type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.IsActive != isActive);
                default:
                    return queryable.Where(l => l.IsActive == isActive);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IsActive"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isActive">IsActive to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIsActive(this IQueryable<SmartSocial.Data.Leads> queryable, bool isActive, params bool[] additionalValues)
        {
            var isActiveList = new List<bool> { isActive };

            if (additionalValues != null)
                isActiveList.AddRange(additionalValues);

            if (isActiveList.Count == 1)
                return queryable.ByIsActive(isActiveList[0]);

            return queryable.ByIsActive(isActiveList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IsActive"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIsActive(this IQueryable<SmartSocial.Data.Leads> queryable, IEnumerable<bool> values)
        {
            return queryable.Where(l => values.Contains(l.IsActive));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IsIntakeAnswered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isIntakeAnswered">IsIntakeAnswered to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIsIntakeAnswered(this IQueryable<SmartSocial.Data.Leads> queryable, bool isIntakeAnswered)
        {
            return queryable.Where(l => l.IsIntakeAnswered == isIntakeAnswered);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IsIntakeAnswered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isIntakeAnswered">IsIntakeAnswered to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIsIntakeAnswered(this IQueryable<SmartSocial.Data.Leads> queryable, ComparisonOperator comparisonOperator, bool isIntakeAnswered)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support bool type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.IsIntakeAnswered != isIntakeAnswered);
                default:
                    return queryable.Where(l => l.IsIntakeAnswered == isIntakeAnswered);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IsIntakeAnswered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isIntakeAnswered">IsIntakeAnswered to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIsIntakeAnswered(this IQueryable<SmartSocial.Data.Leads> queryable, bool isIntakeAnswered, params bool[] additionalValues)
        {
            var isIntakeAnsweredList = new List<bool> { isIntakeAnswered };

            if (additionalValues != null)
                isIntakeAnsweredList.AddRange(additionalValues);

            if (isIntakeAnsweredList.Count == 1)
                return queryable.ByIsIntakeAnswered(isIntakeAnsweredList[0]);

            return queryable.ByIsIntakeAnswered(isIntakeAnsweredList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.Leads.IsIntakeAnswered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.Leads> ByIsIntakeAnswered(this IQueryable<SmartSocial.Data.Leads> queryable, IEnumerable<bool> values)
        {
            return queryable.Where(l => values.Contains(l.IsIntakeAnswered));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<SmartSocial.Data.SmartSocialdbDataContext, int, SmartSocial.Data.Leads> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (SmartSocial.Data.SmartSocialdbDataContext db, int idLead) =>
                        db.Leads.FirstOrDefault(l => l.IdLead == idLead));

        }
        #endregion
    }
}
#pragma warning restore 1591
