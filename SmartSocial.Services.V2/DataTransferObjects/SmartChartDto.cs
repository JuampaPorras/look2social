//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace SmartSocial.Services.V2.DataTransferObjects
{
    
    [DataContract(Name = "SmartChartDto", Namespace = "http://www.mavizontech.com/dto/" , IsReference = true) ]
    public partial class SmartChartDto
    {
         #region Primitive Properties
    	
    	[DataMember]
        public virtual int idSmartChart
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual Nullable<int> idSmartReport
        {
     
    		
            get { return _idSmartReport; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_idSmartReport != value)
                    {
                        if (SmartReport != null && SmartReport.idSmartReport != value)
                        {
                            SmartReport = null;
                        }
                        _idSmartReport = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _idSmartReport;
    	
    	[DataMember]
        public virtual string ChartName
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual string FileName
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual string Insights
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual Nullable<int> IdChartType
        {
     
    		
            get { return _idChartType; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_idChartType != value)
                    {
                        if (ChartType != null && ChartType.idChartType != value)
                        {
                            ChartType = null;
                        }
                        _idChartType = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _idChartType;
    	
    	[DataMember]
        public virtual Nullable<int> IdDataProvider
        {
     
    		
            get { return _idDataProvider; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_idDataProvider != value)
                    {
                        if (DataProvider != null && DataProvider.idDataProvider != value)
                        {
                            DataProvider = null;
                        }
                        _idDataProvider = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _idDataProvider;
    	
    	[DataMember]
        public virtual string AxisSeriesTitle
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual string AxisValuesTitle
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual string CssClasses
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual string HtmlStyles
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual Nullable<int> ChartOrder
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual string SocialPostFilter
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    	[DataMember]
        public virtual ChartTypeDto ChartType
        {
            get { return _chartType; }
            set
            {
                if (!ReferenceEquals(_chartType, value))
                {
                    var previousValue = _chartType;
                    _chartType = value;
                    FixupChartType(previousValue);
                }
            }
        }
        private ChartTypeDto _chartType;
    
    	[DataMember]
        public virtual ICollection<ChartCommentDto> ChartComments
        {
            get
            {
                if (_chartComments == null)
                {
                    var newCollection = new FixupCollection<ChartCommentDto>();
                    newCollection.CollectionChanged += FixupChartComments;
                    _chartComments = newCollection;
                }
                return _chartComments;
            }
            set
            {
                if (!ReferenceEquals(_chartComments, value))
                {
                    var previousValue = _chartComments as FixupCollection<ChartCommentDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChartComments;
                    }
                    _chartComments = value;
                    var newValue = value as FixupCollection<ChartCommentDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChartComments;
                    }
                }
            }
        }
        private ICollection<ChartCommentDto> _chartComments;
    
    	[DataMember]
        public virtual ICollection<ChartSeryDto> ChartSeries
        {
            get
            {
                if (_chartSeries == null)
                {
                    var newCollection = new FixupCollection<ChartSeryDto>();
                    newCollection.CollectionChanged += FixupChartSeries;
                    _chartSeries = newCollection;
                }
                return _chartSeries;
            }
            set
            {
                if (!ReferenceEquals(_chartSeries, value))
                {
                    var previousValue = _chartSeries as FixupCollection<ChartSeryDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChartSeries;
                    }
                    _chartSeries = value;
                    var newValue = value as FixupCollection<ChartSeryDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChartSeries;
                    }
                }
            }
        }
        private ICollection<ChartSeryDto> _chartSeries;
    
    	[DataMember]
        public virtual DataProviderDto DataProvider
        {
            get { return _dataProvider; }
            set
            {
                if (!ReferenceEquals(_dataProvider, value))
                {
                    var previousValue = _dataProvider;
                    _dataProvider = value;
                    FixupDataProvider(previousValue);
                }
            }
        }
        private DataProviderDto _dataProvider;
    
    	[DataMember]
        public virtual SmartReportDto SmartReport
        {
            get { return _smartReport; }
            set
            {
                if (!ReferenceEquals(_smartReport, value))
                {
                    var previousValue = _smartReport;
                    _smartReport = value;
                    FixupSmartReport(previousValue);
                }
            }
        }
        private SmartReportDto _smartReport;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupChartType(ChartTypeDto previousValue)
        {
            if (previousValue != null && previousValue.SmartCharts.Contains(this))
            {
                previousValue.SmartCharts.Remove(this);
            }
    
            if (ChartType != null)
            {
                if (!ChartType.SmartCharts.Contains(this))
                {
                    ChartType.SmartCharts.Add(this);
                }
                if (IdChartType != ChartType.idChartType)
                {
                    IdChartType = ChartType.idChartType;
                }
            }
            else if (!_settingFK)
            {
                IdChartType = null;
            }
        }
    
        private void FixupDataProvider(DataProviderDto previousValue)
        {
            if (previousValue != null && previousValue.SmartCharts.Contains(this))
            {
                previousValue.SmartCharts.Remove(this);
            }
    
            if (DataProvider != null)
            {
                if (!DataProvider.SmartCharts.Contains(this))
                {
                    DataProvider.SmartCharts.Add(this);
                }
                if (IdDataProvider != DataProvider.idDataProvider)
                {
                    IdDataProvider = DataProvider.idDataProvider;
                }
            }
            else if (!_settingFK)
            {
                IdDataProvider = null;
            }
        }
    
        private void FixupSmartReport(SmartReportDto previousValue)
        {
            if (previousValue != null && previousValue.SmartCharts.Contains(this))
            {
                previousValue.SmartCharts.Remove(this);
            }
    
            if (SmartReport != null)
            {
                if (!SmartReport.SmartCharts.Contains(this))
                {
                    SmartReport.SmartCharts.Add(this);
                }
                if (idSmartReport != SmartReport.idSmartReport)
                {
                    idSmartReport = SmartReport.idSmartReport;
                }
            }
            else if (!_settingFK)
            {
                idSmartReport = null;
            }
        }
    
        private void FixupChartComments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ChartCommentDto item in e.NewItems)
                {
                    item.SmartChart = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ChartCommentDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.SmartChart, this))
                    {
                        item.SmartChart = null;
                    }
                }
            }
        }
    
        private void FixupChartSeries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ChartSeryDto item in e.NewItems)
                {
                    item.SmartChart = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ChartSeryDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.SmartChart, this))
                    {
                        item.SmartChart = null;
                    }
                }
            }
        }

        #endregion

    }
}
