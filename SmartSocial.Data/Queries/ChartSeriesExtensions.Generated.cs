#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace SmartSocial.Data
{
    /// <summary>
    /// The query extension class for ChartSeries.
    /// </summary>
    public static partial class ChartSeriesExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SmartSocial.Data.ChartSeries GetByKey(this IQueryable<SmartSocial.Data.ChartSeries> queryable, int idChartSeries)
        {
            var entity = queryable as System.Data.Linq.Table<SmartSocial.Data.ChartSeries>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((SmartSocial.Data.SmartSocialdbDataContext)entity.Context, idChartSeries);

            return queryable.FirstOrDefault(c => c.IdChartSeries == idChartSeries);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<SmartSocial.Data.ChartSeries> table, int idChartSeries)
        {
            return table.Delete(c => c.IdChartSeries == idChartSeries);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartSeries.IdChartSeries"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idChartSeries">IdChartSeries to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartSeries> ByIdChartSeries(this IQueryable<SmartSocial.Data.ChartSeries> queryable, int idChartSeries)
        {
            return queryable.Where(c => c.IdChartSeries == idChartSeries);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartSeries.IdChartSeries"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idChartSeries">IdChartSeries to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartSeries> ByIdChartSeries(this IQueryable<SmartSocial.Data.ChartSeries> queryable, ComparisonOperator comparisonOperator, int idChartSeries)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.IdChartSeries > idChartSeries);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.IdChartSeries >= idChartSeries);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.IdChartSeries < idChartSeries);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.IdChartSeries <= idChartSeries);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.IdChartSeries != idChartSeries);
                default:
                    return queryable.Where(c => c.IdChartSeries == idChartSeries);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartSeries.IdChartSeries"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idChartSeries">IdChartSeries to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartSeries> ByIdChartSeries(this IQueryable<SmartSocial.Data.ChartSeries> queryable, int idChartSeries, params int[] additionalValues)
        {
            var idChartSeriesList = new List<int> { idChartSeries };

            if (additionalValues != null)
                idChartSeriesList.AddRange(additionalValues);

            if (idChartSeriesList.Count == 1)
                return queryable.ByIdChartSeries(idChartSeriesList[0]);

            return queryable.ByIdChartSeries(idChartSeriesList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartSeries.IdChartSeries"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartSeries> ByIdChartSeries(this IQueryable<SmartSocial.Data.ChartSeries> queryable, IEnumerable<int> values)
        {
            return queryable.Where(c => values.Contains(c.IdChartSeries));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartSeries.IdSmartChart"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idSmartChart">IdSmartChart to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartSeries> ByIdSmartChart(this IQueryable<SmartSocial.Data.ChartSeries> queryable, int? idSmartChart)
        {
            // support nulls
            return idSmartChart == null 
                ? queryable.Where(c => c.IdSmartChart == null) 
                : queryable.Where(c => c.IdSmartChart == idSmartChart);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartSeries.IdSmartChart"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idSmartChart">IdSmartChart to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartSeries> ByIdSmartChart(this IQueryable<SmartSocial.Data.ChartSeries> queryable, ComparisonOperator comparisonOperator, int? idSmartChart)
        {
            if (idSmartChart == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("idSmartChart", "Parameter 'idSmartChart' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.IdSmartChart > idSmartChart);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.IdSmartChart >= idSmartChart);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.IdSmartChart < idSmartChart);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.IdSmartChart <= idSmartChart);
                case ComparisonOperator.NotEquals:
                    return idSmartChart == null 
                        ? queryable.Where(c => c.IdSmartChart != null) 
                        : queryable.Where(c => c.IdSmartChart != idSmartChart);
                default:
                    return idSmartChart == null 
                        ? queryable.Where(c => c.IdSmartChart == null) 
                        : queryable.Where(c => c.IdSmartChart == idSmartChart);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartSeries.IdSmartChart"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idSmartChart">IdSmartChart to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartSeries> ByIdSmartChart(this IQueryable<SmartSocial.Data.ChartSeries> queryable, int? idSmartChart, params int?[] additionalValues)
        {
            var idSmartChartList = new List<int?> { idSmartChart };

            if (additionalValues != null)
                idSmartChartList.AddRange(additionalValues);
            else
                idSmartChartList.Add(null);

            if (idSmartChartList.Count == 1)
                return queryable.ByIdSmartChart(idSmartChartList[0]);

            return queryable.ByIdSmartChart(idSmartChartList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartSeries.IdSmartChart"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartSeries> ByIdSmartChart(this IQueryable<SmartSocial.Data.ChartSeries> queryable, IEnumerable<int?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.ChartSeries, bool>("IdSmartChart", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartSeries.SeriesName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="seriesName">SeriesName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartSeries> BySeriesName(this IQueryable<SmartSocial.Data.ChartSeries> queryable, string seriesName)
        {
            // support nulls
            return seriesName == null 
                ? queryable.Where(c => c.SeriesName == null) 
                : queryable.Where(c => c.SeriesName == seriesName);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartSeries.SeriesName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="seriesName">SeriesName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartSeries> BySeriesName(this IQueryable<SmartSocial.Data.ChartSeries> queryable, ContainmentOperator containmentOperator, string seriesName)
        {
            if (seriesName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("seriesName", "Parameter 'seriesName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.SeriesName.Contains(seriesName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.SeriesName.StartsWith(seriesName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.SeriesName.EndsWith(seriesName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.SeriesName.Contains(seriesName) == false);
                case ContainmentOperator.NotEquals:
                    return seriesName == null 
                        ? queryable.Where(c => c.SeriesName != null) 
                        : queryable.Where(c => c.SeriesName != seriesName);
                default:
                    return seriesName == null 
                        ? queryable.Where(c => c.SeriesName == null) 
                        : queryable.Where(c => c.SeriesName == seriesName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartSeries.SeriesName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="seriesName">SeriesName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartSeries> BySeriesName(this IQueryable<SmartSocial.Data.ChartSeries> queryable, string seriesName, params string[] additionalValues)
        {
            var seriesNameList = new List<string> { seriesName };

            if (additionalValues != null)
                seriesNameList.AddRange(additionalValues);
            else
                seriesNameList.Add(null);

            if (seriesNameList.Count == 1)
                return queryable.BySeriesName(seriesNameList[0]);

            return queryable.BySeriesName(seriesNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartSeries.SeriesName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartSeries> BySeriesName(this IQueryable<SmartSocial.Data.ChartSeries> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.ChartSeries, bool>("SeriesName", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<SmartSocial.Data.SmartSocialdbDataContext, int, SmartSocial.Data.ChartSeries> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (SmartSocial.Data.SmartSocialdbDataContext db, int idChartSeries) =>
                        db.ChartSeries.FirstOrDefault(c => c.IdChartSeries == idChartSeries));

        }
        #endregion
    }
}
#pragma warning restore 1591
