#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace SmartSocial.Data
{
    /// <summary>
    /// The query extension class for AspNetUsers.
    /// </summary>
    public static partial class AspNetUsersExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SmartSocial.Data.AspNetUsers GetByKey(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, string id)
        {
            var entity = queryable as System.Data.Linq.Table<SmartSocial.Data.AspNetUsers>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((SmartSocial.Data.SmartSocialdbDataContext)entity.Context, id);

            return queryable.FirstOrDefault(a => a.Id == id);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<SmartSocial.Data.AspNetUsers> table, string id)
        {
            return table.Delete(a => a.Id == id);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ById(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, string id)
        {
            return queryable.Where(a => a.Id == id);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ById(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, ContainmentOperator containmentOperator, string id)
        {
            if (id == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("id", "Parameter 'id' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Id.Contains(id));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Id.StartsWith(id));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Id.EndsWith(id));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Id.Contains(id) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.Id != id);
                default:
                    return queryable.Where(a => a.Id == id);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ById(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, string id, params string[] additionalValues)
        {
            var idList = new List<string> { id };

            if (additionalValues != null)
                idList.AddRange(additionalValues);

            if (idList.Count == 1)
                return queryable.ById(idList[0]);

            return queryable.ById(idList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ById(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, IEnumerable<string> values)
        {
            return queryable.Where(a => values.Contains(a.Id));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByEmail(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, string email)
        {
            // support nulls
            return email == null 
                ? queryable.Where(a => a.Email == null) 
                : queryable.Where(a => a.Email == email);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByEmail(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, ContainmentOperator containmentOperator, string email)
        {
            if (email == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("email", "Parameter 'email' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Email.Contains(email));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Email.StartsWith(email));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Email.EndsWith(email));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Email.Contains(email) == false);
                case ContainmentOperator.NotEquals:
                    return email == null 
                        ? queryable.Where(a => a.Email != null) 
                        : queryable.Where(a => a.Email != email);
                default:
                    return email == null 
                        ? queryable.Where(a => a.Email == null) 
                        : queryable.Where(a => a.Email == email);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByEmail(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, string email, params string[] additionalValues)
        {
            var emailList = new List<string> { email };

            if (additionalValues != null)
                emailList.AddRange(additionalValues);
            else
                emailList.Add(null);

            if (emailList.Count == 1)
                return queryable.ByEmail(emailList[0]);

            return queryable.ByEmail(emailList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByEmail(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.AspNetUsers, bool>("Email", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.EmailConfirmed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailConfirmed">EmailConfirmed to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByEmailConfirmed(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, bool emailConfirmed)
        {
            return queryable.Where(a => a.EmailConfirmed == emailConfirmed);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.EmailConfirmed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailConfirmed">EmailConfirmed to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByEmailConfirmed(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, ComparisonOperator comparisonOperator, bool emailConfirmed)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support bool type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.EmailConfirmed != emailConfirmed);
                default:
                    return queryable.Where(a => a.EmailConfirmed == emailConfirmed);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.EmailConfirmed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailConfirmed">EmailConfirmed to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByEmailConfirmed(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, bool emailConfirmed, params bool[] additionalValues)
        {
            var emailConfirmedList = new List<bool> { emailConfirmed };

            if (additionalValues != null)
                emailConfirmedList.AddRange(additionalValues);

            if (emailConfirmedList.Count == 1)
                return queryable.ByEmailConfirmed(emailConfirmedList[0]);

            return queryable.ByEmailConfirmed(emailConfirmedList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.EmailConfirmed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByEmailConfirmed(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, IEnumerable<bool> values)
        {
            return queryable.Where(a => values.Contains(a.EmailConfirmed));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.PasswordHash"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordHash">PasswordHash to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByPasswordHash(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, string passwordHash)
        {
            // support nulls
            return passwordHash == null 
                ? queryable.Where(a => a.PasswordHash == null) 
                : queryable.Where(a => a.PasswordHash == passwordHash);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.PasswordHash"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordHash">PasswordHash to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByPasswordHash(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, ContainmentOperator containmentOperator, string passwordHash)
        {
            if (passwordHash == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("passwordHash", "Parameter 'passwordHash' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.PasswordHash.Contains(passwordHash));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.PasswordHash.StartsWith(passwordHash));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.PasswordHash.EndsWith(passwordHash));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.PasswordHash.Contains(passwordHash) == false);
                case ContainmentOperator.NotEquals:
                    return passwordHash == null 
                        ? queryable.Where(a => a.PasswordHash != null) 
                        : queryable.Where(a => a.PasswordHash != passwordHash);
                default:
                    return passwordHash == null 
                        ? queryable.Where(a => a.PasswordHash == null) 
                        : queryable.Where(a => a.PasswordHash == passwordHash);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.PasswordHash"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordHash">PasswordHash to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByPasswordHash(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, string passwordHash, params string[] additionalValues)
        {
            var passwordHashList = new List<string> { passwordHash };

            if (additionalValues != null)
                passwordHashList.AddRange(additionalValues);
            else
                passwordHashList.Add(null);

            if (passwordHashList.Count == 1)
                return queryable.ByPasswordHash(passwordHashList[0]);

            return queryable.ByPasswordHash(passwordHashList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.PasswordHash"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByPasswordHash(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.AspNetUsers, bool>("PasswordHash", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.SecurityStamp"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="securityStamp">SecurityStamp to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> BySecurityStamp(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, string securityStamp)
        {
            // support nulls
            return securityStamp == null 
                ? queryable.Where(a => a.SecurityStamp == null) 
                : queryable.Where(a => a.SecurityStamp == securityStamp);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.SecurityStamp"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="securityStamp">SecurityStamp to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> BySecurityStamp(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, ContainmentOperator containmentOperator, string securityStamp)
        {
            if (securityStamp == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("securityStamp", "Parameter 'securityStamp' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.SecurityStamp.Contains(securityStamp));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.SecurityStamp.StartsWith(securityStamp));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.SecurityStamp.EndsWith(securityStamp));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.SecurityStamp.Contains(securityStamp) == false);
                case ContainmentOperator.NotEquals:
                    return securityStamp == null 
                        ? queryable.Where(a => a.SecurityStamp != null) 
                        : queryable.Where(a => a.SecurityStamp != securityStamp);
                default:
                    return securityStamp == null 
                        ? queryable.Where(a => a.SecurityStamp == null) 
                        : queryable.Where(a => a.SecurityStamp == securityStamp);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.SecurityStamp"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="securityStamp">SecurityStamp to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> BySecurityStamp(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, string securityStamp, params string[] additionalValues)
        {
            var securityStampList = new List<string> { securityStamp };

            if (additionalValues != null)
                securityStampList.AddRange(additionalValues);
            else
                securityStampList.Add(null);

            if (securityStampList.Count == 1)
                return queryable.BySecurityStamp(securityStampList[0]);

            return queryable.BySecurityStamp(securityStampList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.SecurityStamp"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> BySecurityStamp(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.AspNetUsers, bool>("SecurityStamp", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.PhoneNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phoneNumber">PhoneNumber to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByPhoneNumber(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, string phoneNumber)
        {
            // support nulls
            return phoneNumber == null 
                ? queryable.Where(a => a.PhoneNumber == null) 
                : queryable.Where(a => a.PhoneNumber == phoneNumber);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.PhoneNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phoneNumber">PhoneNumber to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByPhoneNumber(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, ContainmentOperator containmentOperator, string phoneNumber)
        {
            if (phoneNumber == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("phoneNumber", "Parameter 'phoneNumber' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.PhoneNumber.Contains(phoneNumber));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.PhoneNumber.StartsWith(phoneNumber));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.PhoneNumber.EndsWith(phoneNumber));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.PhoneNumber.Contains(phoneNumber) == false);
                case ContainmentOperator.NotEquals:
                    return phoneNumber == null 
                        ? queryable.Where(a => a.PhoneNumber != null) 
                        : queryable.Where(a => a.PhoneNumber != phoneNumber);
                default:
                    return phoneNumber == null 
                        ? queryable.Where(a => a.PhoneNumber == null) 
                        : queryable.Where(a => a.PhoneNumber == phoneNumber);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.PhoneNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phoneNumber">PhoneNumber to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByPhoneNumber(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, string phoneNumber, params string[] additionalValues)
        {
            var phoneNumberList = new List<string> { phoneNumber };

            if (additionalValues != null)
                phoneNumberList.AddRange(additionalValues);
            else
                phoneNumberList.Add(null);

            if (phoneNumberList.Count == 1)
                return queryable.ByPhoneNumber(phoneNumberList[0]);

            return queryable.ByPhoneNumber(phoneNumberList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.PhoneNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByPhoneNumber(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.AspNetUsers, bool>("PhoneNumber", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.PhoneNumberConfirmed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phoneNumberConfirmed">PhoneNumberConfirmed to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByPhoneNumberConfirmed(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, bool phoneNumberConfirmed)
        {
            return queryable.Where(a => a.PhoneNumberConfirmed == phoneNumberConfirmed);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.PhoneNumberConfirmed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phoneNumberConfirmed">PhoneNumberConfirmed to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByPhoneNumberConfirmed(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, ComparisonOperator comparisonOperator, bool phoneNumberConfirmed)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support bool type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.PhoneNumberConfirmed != phoneNumberConfirmed);
                default:
                    return queryable.Where(a => a.PhoneNumberConfirmed == phoneNumberConfirmed);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.PhoneNumberConfirmed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phoneNumberConfirmed">PhoneNumberConfirmed to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByPhoneNumberConfirmed(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, bool phoneNumberConfirmed, params bool[] additionalValues)
        {
            var phoneNumberConfirmedList = new List<bool> { phoneNumberConfirmed };

            if (additionalValues != null)
                phoneNumberConfirmedList.AddRange(additionalValues);

            if (phoneNumberConfirmedList.Count == 1)
                return queryable.ByPhoneNumberConfirmed(phoneNumberConfirmedList[0]);

            return queryable.ByPhoneNumberConfirmed(phoneNumberConfirmedList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.PhoneNumberConfirmed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByPhoneNumberConfirmed(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, IEnumerable<bool> values)
        {
            return queryable.Where(a => values.Contains(a.PhoneNumberConfirmed));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.TwoFactorEnabled"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="twoFactorEnabled">TwoFactorEnabled to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByTwoFactorEnabled(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, bool twoFactorEnabled)
        {
            return queryable.Where(a => a.TwoFactorEnabled == twoFactorEnabled);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.TwoFactorEnabled"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="twoFactorEnabled">TwoFactorEnabled to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByTwoFactorEnabled(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, ComparisonOperator comparisonOperator, bool twoFactorEnabled)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support bool type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.TwoFactorEnabled != twoFactorEnabled);
                default:
                    return queryable.Where(a => a.TwoFactorEnabled == twoFactorEnabled);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.TwoFactorEnabled"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="twoFactorEnabled">TwoFactorEnabled to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByTwoFactorEnabled(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, bool twoFactorEnabled, params bool[] additionalValues)
        {
            var twoFactorEnabledList = new List<bool> { twoFactorEnabled };

            if (additionalValues != null)
                twoFactorEnabledList.AddRange(additionalValues);

            if (twoFactorEnabledList.Count == 1)
                return queryable.ByTwoFactorEnabled(twoFactorEnabledList[0]);

            return queryable.ByTwoFactorEnabled(twoFactorEnabledList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.TwoFactorEnabled"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByTwoFactorEnabled(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, IEnumerable<bool> values)
        {
            return queryable.Where(a => values.Contains(a.TwoFactorEnabled));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.LockoutEndDateUtc"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lockoutEndDateUtc">LockoutEndDateUtc to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByLockoutEndDateUtc(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, System.DateTime? lockoutEndDateUtc)
        {
            // support nulls
            return lockoutEndDateUtc == null 
                ? queryable.Where(a => a.LockoutEndDateUtc == null) 
                : queryable.Where(a => a.LockoutEndDateUtc == lockoutEndDateUtc);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.LockoutEndDateUtc"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lockoutEndDateUtc">LockoutEndDateUtc to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByLockoutEndDateUtc(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, ComparisonOperator comparisonOperator, System.DateTime? lockoutEndDateUtc)
        {
            if (lockoutEndDateUtc == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("lockoutEndDateUtc", "Parameter 'lockoutEndDateUtc' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.LockoutEndDateUtc > lockoutEndDateUtc);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.LockoutEndDateUtc >= lockoutEndDateUtc);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.LockoutEndDateUtc < lockoutEndDateUtc);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.LockoutEndDateUtc <= lockoutEndDateUtc);
                case ComparisonOperator.NotEquals:
                    return lockoutEndDateUtc == null 
                        ? queryable.Where(a => a.LockoutEndDateUtc != null) 
                        : queryable.Where(a => a.LockoutEndDateUtc != lockoutEndDateUtc);
                default:
                    return lockoutEndDateUtc == null 
                        ? queryable.Where(a => a.LockoutEndDateUtc == null) 
                        : queryable.Where(a => a.LockoutEndDateUtc == lockoutEndDateUtc);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.LockoutEndDateUtc"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lockoutEndDateUtc">LockoutEndDateUtc to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByLockoutEndDateUtc(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, System.DateTime? lockoutEndDateUtc, params System.DateTime?[] additionalValues)
        {
            var lockoutEndDateUtcList = new List<System.DateTime?> { lockoutEndDateUtc };

            if (additionalValues != null)
                lockoutEndDateUtcList.AddRange(additionalValues);
            else
                lockoutEndDateUtcList.Add(null);

            if (lockoutEndDateUtcList.Count == 1)
                return queryable.ByLockoutEndDateUtc(lockoutEndDateUtcList[0]);

            return queryable.ByLockoutEndDateUtc(lockoutEndDateUtcList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.LockoutEndDateUtc"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByLockoutEndDateUtc(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.AspNetUsers, bool>("LockoutEndDateUtc", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.LockoutEnabled"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lockoutEnabled">LockoutEnabled to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByLockoutEnabled(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, bool lockoutEnabled)
        {
            return queryable.Where(a => a.LockoutEnabled == lockoutEnabled);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.LockoutEnabled"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lockoutEnabled">LockoutEnabled to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByLockoutEnabled(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, ComparisonOperator comparisonOperator, bool lockoutEnabled)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support bool type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.LockoutEnabled != lockoutEnabled);
                default:
                    return queryable.Where(a => a.LockoutEnabled == lockoutEnabled);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.LockoutEnabled"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lockoutEnabled">LockoutEnabled to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByLockoutEnabled(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, bool lockoutEnabled, params bool[] additionalValues)
        {
            var lockoutEnabledList = new List<bool> { lockoutEnabled };

            if (additionalValues != null)
                lockoutEnabledList.AddRange(additionalValues);

            if (lockoutEnabledList.Count == 1)
                return queryable.ByLockoutEnabled(lockoutEnabledList[0]);

            return queryable.ByLockoutEnabled(lockoutEnabledList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.LockoutEnabled"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByLockoutEnabled(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, IEnumerable<bool> values)
        {
            return queryable.Where(a => values.Contains(a.LockoutEnabled));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.AccessFailedCount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="accessFailedCount">AccessFailedCount to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByAccessFailedCount(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, int accessFailedCount)
        {
            return queryable.Where(a => a.AccessFailedCount == accessFailedCount);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.AccessFailedCount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="accessFailedCount">AccessFailedCount to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByAccessFailedCount(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, ComparisonOperator comparisonOperator, int accessFailedCount)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.AccessFailedCount > accessFailedCount);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.AccessFailedCount >= accessFailedCount);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.AccessFailedCount < accessFailedCount);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.AccessFailedCount <= accessFailedCount);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.AccessFailedCount != accessFailedCount);
                default:
                    return queryable.Where(a => a.AccessFailedCount == accessFailedCount);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.AccessFailedCount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="accessFailedCount">AccessFailedCount to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByAccessFailedCount(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, int accessFailedCount, params int[] additionalValues)
        {
            var accessFailedCountList = new List<int> { accessFailedCount };

            if (additionalValues != null)
                accessFailedCountList.AddRange(additionalValues);

            if (accessFailedCountList.Count == 1)
                return queryable.ByAccessFailedCount(accessFailedCountList[0]);

            return queryable.ByAccessFailedCount(accessFailedCountList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.AccessFailedCount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByAccessFailedCount(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, IEnumerable<int> values)
        {
            return queryable.Where(a => values.Contains(a.AccessFailedCount));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.UserName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userName">UserName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByUserName(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, string userName)
        {
            return queryable.Where(a => a.UserName == userName);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.UserName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userName">UserName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByUserName(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, ContainmentOperator containmentOperator, string userName)
        {
            if (userName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userName", "Parameter 'userName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.UserName.Contains(userName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.UserName.StartsWith(userName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.UserName.EndsWith(userName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.UserName.Contains(userName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.UserName != userName);
                default:
                    return queryable.Where(a => a.UserName == userName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.UserName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userName">UserName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByUserName(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, string userName, params string[] additionalValues)
        {
            var userNameList = new List<string> { userName };

            if (additionalValues != null)
                userNameList.AddRange(additionalValues);

            if (userNameList.Count == 1)
                return queryable.ByUserName(userNameList[0]);

            return queryable.ByUserName(userNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.UserName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByUserName(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, IEnumerable<string> values)
        {
            return queryable.Where(a => values.Contains(a.UserName));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByFirstName(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, string firstName)
        {
            // support nulls
            return firstName == null 
                ? queryable.Where(a => a.FirstName == null) 
                : queryable.Where(a => a.FirstName == firstName);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByFirstName(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, ContainmentOperator containmentOperator, string firstName)
        {
            if (firstName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("firstName", "Parameter 'firstName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.FirstName.Contains(firstName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.FirstName.StartsWith(firstName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.FirstName.EndsWith(firstName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.FirstName.Contains(firstName) == false);
                case ContainmentOperator.NotEquals:
                    return firstName == null 
                        ? queryable.Where(a => a.FirstName != null) 
                        : queryable.Where(a => a.FirstName != firstName);
                default:
                    return firstName == null 
                        ? queryable.Where(a => a.FirstName == null) 
                        : queryable.Where(a => a.FirstName == firstName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByFirstName(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, string firstName, params string[] additionalValues)
        {
            var firstNameList = new List<string> { firstName };

            if (additionalValues != null)
                firstNameList.AddRange(additionalValues);
            else
                firstNameList.Add(null);

            if (firstNameList.Count == 1)
                return queryable.ByFirstName(firstNameList[0]);

            return queryable.ByFirstName(firstNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByFirstName(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.AspNetUsers, bool>("FirstName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByLastName(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, string lastName)
        {
            // support nulls
            return lastName == null 
                ? queryable.Where(a => a.LastName == null) 
                : queryable.Where(a => a.LastName == lastName);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByLastName(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, ContainmentOperator containmentOperator, string lastName)
        {
            if (lastName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("lastName", "Parameter 'lastName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.LastName.Contains(lastName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.LastName.StartsWith(lastName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.LastName.EndsWith(lastName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.LastName.Contains(lastName) == false);
                case ContainmentOperator.NotEquals:
                    return lastName == null 
                        ? queryable.Where(a => a.LastName != null) 
                        : queryable.Where(a => a.LastName != lastName);
                default:
                    return lastName == null 
                        ? queryable.Where(a => a.LastName == null) 
                        : queryable.Where(a => a.LastName == lastName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByLastName(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, string lastName, params string[] additionalValues)
        {
            var lastNameList = new List<string> { lastName };

            if (additionalValues != null)
                lastNameList.AddRange(additionalValues);
            else
                lastNameList.Add(null);

            if (lastNameList.Count == 1)
                return queryable.ByLastName(lastNameList[0]);

            return queryable.ByLastName(lastNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByLastName(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.AspNetUsers, bool>("LastName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.Company"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="company">Company to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByCompany(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, string company)
        {
            // support nulls
            return company == null 
                ? queryable.Where(a => a.Company == null) 
                : queryable.Where(a => a.Company == company);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.Company"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="company">Company to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByCompany(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, ContainmentOperator containmentOperator, string company)
        {
            if (company == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("company", "Parameter 'company' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Company.Contains(company));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Company.StartsWith(company));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Company.EndsWith(company));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Company.Contains(company) == false);
                case ContainmentOperator.NotEquals:
                    return company == null 
                        ? queryable.Where(a => a.Company != null) 
                        : queryable.Where(a => a.Company != company);
                default:
                    return company == null 
                        ? queryable.Where(a => a.Company == null) 
                        : queryable.Where(a => a.Company == company);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.Company"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="company">Company to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByCompany(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, string company, params string[] additionalValues)
        {
            var companyList = new List<string> { company };

            if (additionalValues != null)
                companyList.AddRange(additionalValues);
            else
                companyList.Add(null);

            if (companyList.Count == 1)
                return queryable.ByCompany(companyList[0]);

            return queryable.ByCompany(companyList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.Company"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByCompany(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.AspNetUsers, bool>("Company", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.IdCompany"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idCompany">IdCompany to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByIdCompany(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, int? idCompany)
        {
            // support nulls
            return idCompany == null 
                ? queryable.Where(a => a.IdCompany == null) 
                : queryable.Where(a => a.IdCompany == idCompany);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.IdCompany"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idCompany">IdCompany to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByIdCompany(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, ComparisonOperator comparisonOperator, int? idCompany)
        {
            if (idCompany == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("idCompany", "Parameter 'idCompany' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.IdCompany > idCompany);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.IdCompany >= idCompany);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.IdCompany < idCompany);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.IdCompany <= idCompany);
                case ComparisonOperator.NotEquals:
                    return idCompany == null 
                        ? queryable.Where(a => a.IdCompany != null) 
                        : queryable.Where(a => a.IdCompany != idCompany);
                default:
                    return idCompany == null 
                        ? queryable.Where(a => a.IdCompany == null) 
                        : queryable.Where(a => a.IdCompany == idCompany);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.IdCompany"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idCompany">IdCompany to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByIdCompany(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, int? idCompany, params int?[] additionalValues)
        {
            var idCompanyList = new List<int?> { idCompany };

            if (additionalValues != null)
                idCompanyList.AddRange(additionalValues);
            else
                idCompanyList.Add(null);

            if (idCompanyList.Count == 1)
                return queryable.ByIdCompany(idCompanyList[0]);

            return queryable.ByIdCompany(idCompanyList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.IdCompany"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByIdCompany(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, IEnumerable<int?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.AspNetUsers, bool>("IdCompany", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.IdLastReport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idLastReport">IdLastReport to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByIdLastReport(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, int? idLastReport)
        {
            // support nulls
            return idLastReport == null 
                ? queryable.Where(a => a.IdLastReport == null) 
                : queryable.Where(a => a.IdLastReport == idLastReport);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.IdLastReport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idLastReport">IdLastReport to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByIdLastReport(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, ComparisonOperator comparisonOperator, int? idLastReport)
        {
            if (idLastReport == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("idLastReport", "Parameter 'idLastReport' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.IdLastReport > idLastReport);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.IdLastReport >= idLastReport);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.IdLastReport < idLastReport);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.IdLastReport <= idLastReport);
                case ComparisonOperator.NotEquals:
                    return idLastReport == null 
                        ? queryable.Where(a => a.IdLastReport != null) 
                        : queryable.Where(a => a.IdLastReport != idLastReport);
                default:
                    return idLastReport == null 
                        ? queryable.Where(a => a.IdLastReport == null) 
                        : queryable.Where(a => a.IdLastReport == idLastReport);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.IdLastReport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idLastReport">IdLastReport to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByIdLastReport(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, int? idLastReport, params int?[] additionalValues)
        {
            var idLastReportList = new List<int?> { idLastReport };

            if (additionalValues != null)
                idLastReportList.AddRange(additionalValues);
            else
                idLastReportList.Add(null);

            if (idLastReportList.Count == 1)
                return queryable.ByIdLastReport(idLastReportList[0]);

            return queryable.ByIdLastReport(idLastReportList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.AspNetUsers.IdLastReport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.AspNetUsers> ByIdLastReport(this IQueryable<SmartSocial.Data.AspNetUsers> queryable, IEnumerable<int?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.AspNetUsers, bool>("IdLastReport", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<SmartSocial.Data.SmartSocialdbDataContext, string, SmartSocial.Data.AspNetUsers> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (SmartSocial.Data.SmartSocialdbDataContext db, string id) =>
                        db.AspNetUsers.FirstOrDefault(a => a.Id == id));

        }
        #endregion
    }
}
#pragma warning restore 1591
