#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace SmartSocial.Data
{
    /// <summary>
    /// The query extension class for WebpagesMembership.
    /// </summary>
    public static partial class WebpagesMembershipExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SmartSocial.Data.WebpagesMembership GetByKey(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, int userId)
        {
            var entity = queryable as System.Data.Linq.Table<SmartSocial.Data.WebpagesMembership>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((SmartSocial.Data.SmartSocialdbDataContext)entity.Context, userId);

            return queryable.FirstOrDefault(w => w.UserId == userId);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<SmartSocial.Data.WebpagesMembership> table, int userId)
        {
            return table.Delete(w => w.UserId == userId);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByUserId(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, int userId)
        {
            return queryable.Where(w => w.UserId == userId);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByUserId(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, ComparisonOperator comparisonOperator, int userId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(w => w.UserId > userId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(w => w.UserId >= userId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(w => w.UserId < userId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(w => w.UserId <= userId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(w => w.UserId != userId);
                default:
                    return queryable.Where(w => w.UserId == userId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByUserId(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, int userId, params int[] additionalValues)
        {
            var userIdList = new List<int> { userId };

            if (additionalValues != null)
                userIdList.AddRange(additionalValues);

            if (userIdList.Count == 1)
                return queryable.ByUserId(userIdList[0]);

            return queryable.ByUserId(userIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByUserId(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, IEnumerable<int> values)
        {
            return queryable.Where(w => values.Contains(w.UserId));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.CreateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createDate">CreateDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByCreateDate(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, System.DateTime? createDate)
        {
            // support nulls
            return createDate == null 
                ? queryable.Where(w => w.CreateDate == null) 
                : queryable.Where(w => w.CreateDate == createDate);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.CreateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createDate">CreateDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByCreateDate(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, ComparisonOperator comparisonOperator, System.DateTime? createDate)
        {
            if (createDate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("createDate", "Parameter 'createDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(w => w.CreateDate > createDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(w => w.CreateDate >= createDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(w => w.CreateDate < createDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(w => w.CreateDate <= createDate);
                case ComparisonOperator.NotEquals:
                    return createDate == null 
                        ? queryable.Where(w => w.CreateDate != null) 
                        : queryable.Where(w => w.CreateDate != createDate);
                default:
                    return createDate == null 
                        ? queryable.Where(w => w.CreateDate == null) 
                        : queryable.Where(w => w.CreateDate == createDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.CreateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createDate">CreateDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByCreateDate(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, System.DateTime? createDate, params System.DateTime?[] additionalValues)
        {
            var createDateList = new List<System.DateTime?> { createDate };

            if (additionalValues != null)
                createDateList.AddRange(additionalValues);
            else
                createDateList.Add(null);

            if (createDateList.Count == 1)
                return queryable.ByCreateDate(createDateList[0]);

            return queryable.ByCreateDate(createDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.CreateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByCreateDate(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.WebpagesMembership, bool>("CreateDate", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.ConfirmationToken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="confirmationToken">ConfirmationToken to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByConfirmationToken(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, string confirmationToken)
        {
            // support nulls
            return confirmationToken == null 
                ? queryable.Where(w => w.ConfirmationToken == null) 
                : queryable.Where(w => w.ConfirmationToken == confirmationToken);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.ConfirmationToken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="confirmationToken">ConfirmationToken to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByConfirmationToken(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, ContainmentOperator containmentOperator, string confirmationToken)
        {
            if (confirmationToken == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("confirmationToken", "Parameter 'confirmationToken' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(w => w.ConfirmationToken.Contains(confirmationToken));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(w => w.ConfirmationToken.StartsWith(confirmationToken));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(w => w.ConfirmationToken.EndsWith(confirmationToken));
                case ContainmentOperator.NotContains:
                    return queryable.Where(w => w.ConfirmationToken.Contains(confirmationToken) == false);
                case ContainmentOperator.NotEquals:
                    return confirmationToken == null 
                        ? queryable.Where(w => w.ConfirmationToken != null) 
                        : queryable.Where(w => w.ConfirmationToken != confirmationToken);
                default:
                    return confirmationToken == null 
                        ? queryable.Where(w => w.ConfirmationToken == null) 
                        : queryable.Where(w => w.ConfirmationToken == confirmationToken);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.ConfirmationToken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="confirmationToken">ConfirmationToken to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByConfirmationToken(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, string confirmationToken, params string[] additionalValues)
        {
            var confirmationTokenList = new List<string> { confirmationToken };

            if (additionalValues != null)
                confirmationTokenList.AddRange(additionalValues);
            else
                confirmationTokenList.Add(null);

            if (confirmationTokenList.Count == 1)
                return queryable.ByConfirmationToken(confirmationTokenList[0]);

            return queryable.ByConfirmationToken(confirmationTokenList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.ConfirmationToken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByConfirmationToken(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.WebpagesMembership, bool>("ConfirmationToken", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.IsConfirmed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isConfirmed">IsConfirmed to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByIsConfirmed(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, bool? isConfirmed)
        {
            // support nulls
            return isConfirmed == null 
                ? queryable.Where(w => w.IsConfirmed == null) 
                : queryable.Where(w => w.IsConfirmed == isConfirmed);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.IsConfirmed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isConfirmed">IsConfirmed to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByIsConfirmed(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, ComparisonOperator comparisonOperator, bool? isConfirmed)
        {
            if (isConfirmed == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("isConfirmed", "Parameter 'isConfirmed' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support bool? type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return isConfirmed == null 
                        ? queryable.Where(w => w.IsConfirmed != null) 
                        : queryable.Where(w => w.IsConfirmed != isConfirmed);
                default:
                    return isConfirmed == null 
                        ? queryable.Where(w => w.IsConfirmed == null) 
                        : queryable.Where(w => w.IsConfirmed == isConfirmed);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.IsConfirmed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isConfirmed">IsConfirmed to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByIsConfirmed(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, bool? isConfirmed, params bool?[] additionalValues)
        {
            var isConfirmedList = new List<bool?> { isConfirmed };

            if (additionalValues != null)
                isConfirmedList.AddRange(additionalValues);
            else
                isConfirmedList.Add(null);

            if (isConfirmedList.Count == 1)
                return queryable.ByIsConfirmed(isConfirmedList[0]);

            return queryable.ByIsConfirmed(isConfirmedList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.IsConfirmed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByIsConfirmed(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, IEnumerable<bool?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.WebpagesMembership, bool>("IsConfirmed", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.LastPasswordFailureDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastPasswordFailureDate">LastPasswordFailureDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByLastPasswordFailureDate(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, System.DateTime? lastPasswordFailureDate)
        {
            // support nulls
            return lastPasswordFailureDate == null 
                ? queryable.Where(w => w.LastPasswordFailureDate == null) 
                : queryable.Where(w => w.LastPasswordFailureDate == lastPasswordFailureDate);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.LastPasswordFailureDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastPasswordFailureDate">LastPasswordFailureDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByLastPasswordFailureDate(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, ComparisonOperator comparisonOperator, System.DateTime? lastPasswordFailureDate)
        {
            if (lastPasswordFailureDate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("lastPasswordFailureDate", "Parameter 'lastPasswordFailureDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(w => w.LastPasswordFailureDate > lastPasswordFailureDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(w => w.LastPasswordFailureDate >= lastPasswordFailureDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(w => w.LastPasswordFailureDate < lastPasswordFailureDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(w => w.LastPasswordFailureDate <= lastPasswordFailureDate);
                case ComparisonOperator.NotEquals:
                    return lastPasswordFailureDate == null 
                        ? queryable.Where(w => w.LastPasswordFailureDate != null) 
                        : queryable.Where(w => w.LastPasswordFailureDate != lastPasswordFailureDate);
                default:
                    return lastPasswordFailureDate == null 
                        ? queryable.Where(w => w.LastPasswordFailureDate == null) 
                        : queryable.Where(w => w.LastPasswordFailureDate == lastPasswordFailureDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.LastPasswordFailureDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastPasswordFailureDate">LastPasswordFailureDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByLastPasswordFailureDate(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, System.DateTime? lastPasswordFailureDate, params System.DateTime?[] additionalValues)
        {
            var lastPasswordFailureDateList = new List<System.DateTime?> { lastPasswordFailureDate };

            if (additionalValues != null)
                lastPasswordFailureDateList.AddRange(additionalValues);
            else
                lastPasswordFailureDateList.Add(null);

            if (lastPasswordFailureDateList.Count == 1)
                return queryable.ByLastPasswordFailureDate(lastPasswordFailureDateList[0]);

            return queryable.ByLastPasswordFailureDate(lastPasswordFailureDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.LastPasswordFailureDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByLastPasswordFailureDate(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.WebpagesMembership, bool>("LastPasswordFailureDate", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.PasswordFailuresSinceLastSuccess"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordFailuresSinceLastSuccess">PasswordFailuresSinceLastSuccess to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPasswordFailuresSinceLastSuccess(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, int passwordFailuresSinceLastSuccess)
        {
            return queryable.Where(w => w.PasswordFailuresSinceLastSuccess == passwordFailuresSinceLastSuccess);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.PasswordFailuresSinceLastSuccess"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordFailuresSinceLastSuccess">PasswordFailuresSinceLastSuccess to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPasswordFailuresSinceLastSuccess(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, ComparisonOperator comparisonOperator, int passwordFailuresSinceLastSuccess)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(w => w.PasswordFailuresSinceLastSuccess > passwordFailuresSinceLastSuccess);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(w => w.PasswordFailuresSinceLastSuccess >= passwordFailuresSinceLastSuccess);
                case ComparisonOperator.LessThan:
                    return queryable.Where(w => w.PasswordFailuresSinceLastSuccess < passwordFailuresSinceLastSuccess);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(w => w.PasswordFailuresSinceLastSuccess <= passwordFailuresSinceLastSuccess);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(w => w.PasswordFailuresSinceLastSuccess != passwordFailuresSinceLastSuccess);
                default:
                    return queryable.Where(w => w.PasswordFailuresSinceLastSuccess == passwordFailuresSinceLastSuccess);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.PasswordFailuresSinceLastSuccess"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordFailuresSinceLastSuccess">PasswordFailuresSinceLastSuccess to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPasswordFailuresSinceLastSuccess(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, int passwordFailuresSinceLastSuccess, params int[] additionalValues)
        {
            var passwordFailuresSinceLastSuccessList = new List<int> { passwordFailuresSinceLastSuccess };

            if (additionalValues != null)
                passwordFailuresSinceLastSuccessList.AddRange(additionalValues);

            if (passwordFailuresSinceLastSuccessList.Count == 1)
                return queryable.ByPasswordFailuresSinceLastSuccess(passwordFailuresSinceLastSuccessList[0]);

            return queryable.ByPasswordFailuresSinceLastSuccess(passwordFailuresSinceLastSuccessList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.PasswordFailuresSinceLastSuccess"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPasswordFailuresSinceLastSuccess(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, IEnumerable<int> values)
        {
            return queryable.Where(w => values.Contains(w.PasswordFailuresSinceLastSuccess));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.Password"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="password">Password to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPassword(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, string password)
        {
            return queryable.Where(w => w.Password == password);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.Password"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="password">Password to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPassword(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, ContainmentOperator containmentOperator, string password)
        {
            if (password == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("password", "Parameter 'password' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(w => w.Password.Contains(password));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(w => w.Password.StartsWith(password));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(w => w.Password.EndsWith(password));
                case ContainmentOperator.NotContains:
                    return queryable.Where(w => w.Password.Contains(password) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(w => w.Password != password);
                default:
                    return queryable.Where(w => w.Password == password);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.Password"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="password">Password to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPassword(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, string password, params string[] additionalValues)
        {
            var passwordList = new List<string> { password };

            if (additionalValues != null)
                passwordList.AddRange(additionalValues);

            if (passwordList.Count == 1)
                return queryable.ByPassword(passwordList[0]);

            return queryable.ByPassword(passwordList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.Password"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPassword(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, IEnumerable<string> values)
        {
            return queryable.Where(w => values.Contains(w.Password));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.PasswordChangedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordChangedDate">PasswordChangedDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPasswordChangedDate(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, System.DateTime? passwordChangedDate)
        {
            // support nulls
            return passwordChangedDate == null 
                ? queryable.Where(w => w.PasswordChangedDate == null) 
                : queryable.Where(w => w.PasswordChangedDate == passwordChangedDate);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.PasswordChangedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordChangedDate">PasswordChangedDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPasswordChangedDate(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, ComparisonOperator comparisonOperator, System.DateTime? passwordChangedDate)
        {
            if (passwordChangedDate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("passwordChangedDate", "Parameter 'passwordChangedDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(w => w.PasswordChangedDate > passwordChangedDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(w => w.PasswordChangedDate >= passwordChangedDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(w => w.PasswordChangedDate < passwordChangedDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(w => w.PasswordChangedDate <= passwordChangedDate);
                case ComparisonOperator.NotEquals:
                    return passwordChangedDate == null 
                        ? queryable.Where(w => w.PasswordChangedDate != null) 
                        : queryable.Where(w => w.PasswordChangedDate != passwordChangedDate);
                default:
                    return passwordChangedDate == null 
                        ? queryable.Where(w => w.PasswordChangedDate == null) 
                        : queryable.Where(w => w.PasswordChangedDate == passwordChangedDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.PasswordChangedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordChangedDate">PasswordChangedDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPasswordChangedDate(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, System.DateTime? passwordChangedDate, params System.DateTime?[] additionalValues)
        {
            var passwordChangedDateList = new List<System.DateTime?> { passwordChangedDate };

            if (additionalValues != null)
                passwordChangedDateList.AddRange(additionalValues);
            else
                passwordChangedDateList.Add(null);

            if (passwordChangedDateList.Count == 1)
                return queryable.ByPasswordChangedDate(passwordChangedDateList[0]);

            return queryable.ByPasswordChangedDate(passwordChangedDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.PasswordChangedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPasswordChangedDate(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.WebpagesMembership, bool>("PasswordChangedDate", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.PasswordSalt"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordSalt">PasswordSalt to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPasswordSalt(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, string passwordSalt)
        {
            return queryable.Where(w => w.PasswordSalt == passwordSalt);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.PasswordSalt"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordSalt">PasswordSalt to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPasswordSalt(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, ContainmentOperator containmentOperator, string passwordSalt)
        {
            if (passwordSalt == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("passwordSalt", "Parameter 'passwordSalt' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(w => w.PasswordSalt.Contains(passwordSalt));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(w => w.PasswordSalt.StartsWith(passwordSalt));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(w => w.PasswordSalt.EndsWith(passwordSalt));
                case ContainmentOperator.NotContains:
                    return queryable.Where(w => w.PasswordSalt.Contains(passwordSalt) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(w => w.PasswordSalt != passwordSalt);
                default:
                    return queryable.Where(w => w.PasswordSalt == passwordSalt);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.PasswordSalt"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordSalt">PasswordSalt to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPasswordSalt(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, string passwordSalt, params string[] additionalValues)
        {
            var passwordSaltList = new List<string> { passwordSalt };

            if (additionalValues != null)
                passwordSaltList.AddRange(additionalValues);

            if (passwordSaltList.Count == 1)
                return queryable.ByPasswordSalt(passwordSaltList[0]);

            return queryable.ByPasswordSalt(passwordSaltList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.PasswordSalt"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPasswordSalt(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, IEnumerable<string> values)
        {
            return queryable.Where(w => values.Contains(w.PasswordSalt));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.PasswordVerificationToken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordVerificationToken">PasswordVerificationToken to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPasswordVerificationToken(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, string passwordVerificationToken)
        {
            // support nulls
            return passwordVerificationToken == null 
                ? queryable.Where(w => w.PasswordVerificationToken == null) 
                : queryable.Where(w => w.PasswordVerificationToken == passwordVerificationToken);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.PasswordVerificationToken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordVerificationToken">PasswordVerificationToken to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPasswordVerificationToken(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, ContainmentOperator containmentOperator, string passwordVerificationToken)
        {
            if (passwordVerificationToken == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("passwordVerificationToken", "Parameter 'passwordVerificationToken' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(w => w.PasswordVerificationToken.Contains(passwordVerificationToken));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(w => w.PasswordVerificationToken.StartsWith(passwordVerificationToken));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(w => w.PasswordVerificationToken.EndsWith(passwordVerificationToken));
                case ContainmentOperator.NotContains:
                    return queryable.Where(w => w.PasswordVerificationToken.Contains(passwordVerificationToken) == false);
                case ContainmentOperator.NotEquals:
                    return passwordVerificationToken == null 
                        ? queryable.Where(w => w.PasswordVerificationToken != null) 
                        : queryable.Where(w => w.PasswordVerificationToken != passwordVerificationToken);
                default:
                    return passwordVerificationToken == null 
                        ? queryable.Where(w => w.PasswordVerificationToken == null) 
                        : queryable.Where(w => w.PasswordVerificationToken == passwordVerificationToken);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.PasswordVerificationToken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordVerificationToken">PasswordVerificationToken to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPasswordVerificationToken(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, string passwordVerificationToken, params string[] additionalValues)
        {
            var passwordVerificationTokenList = new List<string> { passwordVerificationToken };

            if (additionalValues != null)
                passwordVerificationTokenList.AddRange(additionalValues);
            else
                passwordVerificationTokenList.Add(null);

            if (passwordVerificationTokenList.Count == 1)
                return queryable.ByPasswordVerificationToken(passwordVerificationTokenList[0]);

            return queryable.ByPasswordVerificationToken(passwordVerificationTokenList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.PasswordVerificationToken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPasswordVerificationToken(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.WebpagesMembership, bool>("PasswordVerificationToken", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.PasswordVerificationTokenExpirationDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordVerificationTokenExpirationDate">PasswordVerificationTokenExpirationDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPasswordVerificationTokenExpirationDate(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, System.DateTime? passwordVerificationTokenExpirationDate)
        {
            // support nulls
            return passwordVerificationTokenExpirationDate == null 
                ? queryable.Where(w => w.PasswordVerificationTokenExpirationDate == null) 
                : queryable.Where(w => w.PasswordVerificationTokenExpirationDate == passwordVerificationTokenExpirationDate);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.PasswordVerificationTokenExpirationDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordVerificationTokenExpirationDate">PasswordVerificationTokenExpirationDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPasswordVerificationTokenExpirationDate(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, ComparisonOperator comparisonOperator, System.DateTime? passwordVerificationTokenExpirationDate)
        {
            if (passwordVerificationTokenExpirationDate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("passwordVerificationTokenExpirationDate", "Parameter 'passwordVerificationTokenExpirationDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(w => w.PasswordVerificationTokenExpirationDate > passwordVerificationTokenExpirationDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(w => w.PasswordVerificationTokenExpirationDate >= passwordVerificationTokenExpirationDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(w => w.PasswordVerificationTokenExpirationDate < passwordVerificationTokenExpirationDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(w => w.PasswordVerificationTokenExpirationDate <= passwordVerificationTokenExpirationDate);
                case ComparisonOperator.NotEquals:
                    return passwordVerificationTokenExpirationDate == null 
                        ? queryable.Where(w => w.PasswordVerificationTokenExpirationDate != null) 
                        : queryable.Where(w => w.PasswordVerificationTokenExpirationDate != passwordVerificationTokenExpirationDate);
                default:
                    return passwordVerificationTokenExpirationDate == null 
                        ? queryable.Where(w => w.PasswordVerificationTokenExpirationDate == null) 
                        : queryable.Where(w => w.PasswordVerificationTokenExpirationDate == passwordVerificationTokenExpirationDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.PasswordVerificationTokenExpirationDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordVerificationTokenExpirationDate">PasswordVerificationTokenExpirationDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPasswordVerificationTokenExpirationDate(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, System.DateTime? passwordVerificationTokenExpirationDate, params System.DateTime?[] additionalValues)
        {
            var passwordVerificationTokenExpirationDateList = new List<System.DateTime?> { passwordVerificationTokenExpirationDate };

            if (additionalValues != null)
                passwordVerificationTokenExpirationDateList.AddRange(additionalValues);
            else
                passwordVerificationTokenExpirationDateList.Add(null);

            if (passwordVerificationTokenExpirationDateList.Count == 1)
                return queryable.ByPasswordVerificationTokenExpirationDate(passwordVerificationTokenExpirationDateList[0]);

            return queryable.ByPasswordVerificationTokenExpirationDate(passwordVerificationTokenExpirationDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.WebpagesMembership.PasswordVerificationTokenExpirationDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.WebpagesMembership> ByPasswordVerificationTokenExpirationDate(this IQueryable<SmartSocial.Data.WebpagesMembership> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.WebpagesMembership, bool>("PasswordVerificationTokenExpirationDate", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<SmartSocial.Data.SmartSocialdbDataContext, int, SmartSocial.Data.WebpagesMembership> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (SmartSocial.Data.SmartSocialdbDataContext db, int userId) =>
                        db.WebpagesMembership.FirstOrDefault(w => w.UserId == userId));

        }
        #endregion
    }
}
#pragma warning restore 1591
