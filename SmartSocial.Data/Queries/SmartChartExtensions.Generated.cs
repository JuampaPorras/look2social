#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace SmartSocial.Data
{
    /// <summary>
    /// The query extension class for SmartChart.
    /// </summary>
    public static partial class SmartChartExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SmartSocial.Data.SmartChart GetByKey(this IQueryable<SmartSocial.Data.SmartChart> queryable, int idSmartChart)
        {
            var entity = queryable as System.Data.Linq.Table<SmartSocial.Data.SmartChart>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((SmartSocial.Data.SmartSocialdbDataContext)entity.Context, idSmartChart);

            return queryable.FirstOrDefault(s => s.IdSmartChart == idSmartChart);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<SmartSocial.Data.SmartChart> table, int idSmartChart)
        {
            return table.Delete(s => s.IdSmartChart == idSmartChart);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.IdSmartChart"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idSmartChart">IdSmartChart to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByIdSmartChart(this IQueryable<SmartSocial.Data.SmartChart> queryable, int idSmartChart)
        {
            return queryable.Where(s => s.IdSmartChart == idSmartChart);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.IdSmartChart"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idSmartChart">IdSmartChart to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByIdSmartChart(this IQueryable<SmartSocial.Data.SmartChart> queryable, ComparisonOperator comparisonOperator, int idSmartChart)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.IdSmartChart > idSmartChart);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.IdSmartChart >= idSmartChart);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.IdSmartChart < idSmartChart);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.IdSmartChart <= idSmartChart);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.IdSmartChart != idSmartChart);
                default:
                    return queryable.Where(s => s.IdSmartChart == idSmartChart);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.IdSmartChart"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idSmartChart">IdSmartChart to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByIdSmartChart(this IQueryable<SmartSocial.Data.SmartChart> queryable, int idSmartChart, params int[] additionalValues)
        {
            var idSmartChartList = new List<int> { idSmartChart };

            if (additionalValues != null)
                idSmartChartList.AddRange(additionalValues);

            if (idSmartChartList.Count == 1)
                return queryable.ByIdSmartChart(idSmartChartList[0]);

            return queryable.ByIdSmartChart(idSmartChartList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.IdSmartChart"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByIdSmartChart(this IQueryable<SmartSocial.Data.SmartChart> queryable, IEnumerable<int> values)
        {
            return queryable.Where(s => values.Contains(s.IdSmartChart));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.IdSmartReport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idSmartReport">IdSmartReport to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByIdSmartReport(this IQueryable<SmartSocial.Data.SmartChart> queryable, int? idSmartReport)
        {
            // support nulls
            return idSmartReport == null 
                ? queryable.Where(s => s.IdSmartReport == null) 
                : queryable.Where(s => s.IdSmartReport == idSmartReport);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.IdSmartReport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idSmartReport">IdSmartReport to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByIdSmartReport(this IQueryable<SmartSocial.Data.SmartChart> queryable, ComparisonOperator comparisonOperator, int? idSmartReport)
        {
            if (idSmartReport == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("idSmartReport", "Parameter 'idSmartReport' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.IdSmartReport > idSmartReport);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.IdSmartReport >= idSmartReport);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.IdSmartReport < idSmartReport);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.IdSmartReport <= idSmartReport);
                case ComparisonOperator.NotEquals:
                    return idSmartReport == null 
                        ? queryable.Where(s => s.IdSmartReport != null) 
                        : queryable.Where(s => s.IdSmartReport != idSmartReport);
                default:
                    return idSmartReport == null 
                        ? queryable.Where(s => s.IdSmartReport == null) 
                        : queryable.Where(s => s.IdSmartReport == idSmartReport);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.IdSmartReport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idSmartReport">IdSmartReport to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByIdSmartReport(this IQueryable<SmartSocial.Data.SmartChart> queryable, int? idSmartReport, params int?[] additionalValues)
        {
            var idSmartReportList = new List<int?> { idSmartReport };

            if (additionalValues != null)
                idSmartReportList.AddRange(additionalValues);
            else
                idSmartReportList.Add(null);

            if (idSmartReportList.Count == 1)
                return queryable.ByIdSmartReport(idSmartReportList[0]);

            return queryable.ByIdSmartReport(idSmartReportList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.IdSmartReport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByIdSmartReport(this IQueryable<SmartSocial.Data.SmartChart> queryable, IEnumerable<int?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SmartChart, bool>("IdSmartReport", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.ChartName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="chartName">ChartName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByChartName(this IQueryable<SmartSocial.Data.SmartChart> queryable, string chartName)
        {
            // support nulls
            return chartName == null 
                ? queryable.Where(s => s.ChartName == null) 
                : queryable.Where(s => s.ChartName == chartName);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.ChartName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="chartName">ChartName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByChartName(this IQueryable<SmartSocial.Data.SmartChart> queryable, ContainmentOperator containmentOperator, string chartName)
        {
            if (chartName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("chartName", "Parameter 'chartName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.ChartName.Contains(chartName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.ChartName.StartsWith(chartName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.ChartName.EndsWith(chartName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.ChartName.Contains(chartName) == false);
                case ContainmentOperator.NotEquals:
                    return chartName == null 
                        ? queryable.Where(s => s.ChartName != null) 
                        : queryable.Where(s => s.ChartName != chartName);
                default:
                    return chartName == null 
                        ? queryable.Where(s => s.ChartName == null) 
                        : queryable.Where(s => s.ChartName == chartName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.ChartName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="chartName">ChartName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByChartName(this IQueryable<SmartSocial.Data.SmartChart> queryable, string chartName, params string[] additionalValues)
        {
            var chartNameList = new List<string> { chartName };

            if (additionalValues != null)
                chartNameList.AddRange(additionalValues);
            else
                chartNameList.Add(null);

            if (chartNameList.Count == 1)
                return queryable.ByChartName(chartNameList[0]);

            return queryable.ByChartName(chartNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.ChartName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByChartName(this IQueryable<SmartSocial.Data.SmartChart> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SmartChart, bool>("ChartName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.FileName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fileName">FileName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByFileName(this IQueryable<SmartSocial.Data.SmartChart> queryable, string fileName)
        {
            // support nulls
            return fileName == null 
                ? queryable.Where(s => s.FileName == null) 
                : queryable.Where(s => s.FileName == fileName);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.FileName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fileName">FileName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByFileName(this IQueryable<SmartSocial.Data.SmartChart> queryable, ContainmentOperator containmentOperator, string fileName)
        {
            if (fileName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("fileName", "Parameter 'fileName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.FileName.Contains(fileName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.FileName.StartsWith(fileName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.FileName.EndsWith(fileName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.FileName.Contains(fileName) == false);
                case ContainmentOperator.NotEquals:
                    return fileName == null 
                        ? queryable.Where(s => s.FileName != null) 
                        : queryable.Where(s => s.FileName != fileName);
                default:
                    return fileName == null 
                        ? queryable.Where(s => s.FileName == null) 
                        : queryable.Where(s => s.FileName == fileName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.FileName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fileName">FileName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByFileName(this IQueryable<SmartSocial.Data.SmartChart> queryable, string fileName, params string[] additionalValues)
        {
            var fileNameList = new List<string> { fileName };

            if (additionalValues != null)
                fileNameList.AddRange(additionalValues);
            else
                fileNameList.Add(null);

            if (fileNameList.Count == 1)
                return queryable.ByFileName(fileNameList[0]);

            return queryable.ByFileName(fileNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.FileName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByFileName(this IQueryable<SmartSocial.Data.SmartChart> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SmartChart, bool>("FileName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.Insights"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="insights">Insights to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByInsights(this IQueryable<SmartSocial.Data.SmartChart> queryable, string insights)
        {
            // support nulls
            return insights == null 
                ? queryable.Where(s => s.Insights == null) 
                : queryable.Where(s => s.Insights == insights);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.Insights"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="insights">Insights to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByInsights(this IQueryable<SmartSocial.Data.SmartChart> queryable, ContainmentOperator containmentOperator, string insights)
        {
            if (insights == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("insights", "Parameter 'insights' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Insights.Contains(insights));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Insights.StartsWith(insights));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Insights.EndsWith(insights));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Insights.Contains(insights) == false);
                case ContainmentOperator.NotEquals:
                    return insights == null 
                        ? queryable.Where(s => s.Insights != null) 
                        : queryable.Where(s => s.Insights != insights);
                default:
                    return insights == null 
                        ? queryable.Where(s => s.Insights == null) 
                        : queryable.Where(s => s.Insights == insights);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.Insights"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="insights">Insights to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByInsights(this IQueryable<SmartSocial.Data.SmartChart> queryable, string insights, params string[] additionalValues)
        {
            var insightsList = new List<string> { insights };

            if (additionalValues != null)
                insightsList.AddRange(additionalValues);
            else
                insightsList.Add(null);

            if (insightsList.Count == 1)
                return queryable.ByInsights(insightsList[0]);

            return queryable.ByInsights(insightsList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.Insights"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByInsights(this IQueryable<SmartSocial.Data.SmartChart> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SmartChart, bool>("Insights", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.IdChartType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idChartType">IdChartType to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByIdChartType(this IQueryable<SmartSocial.Data.SmartChart> queryable, int? idChartType)
        {
            // support nulls
            return idChartType == null 
                ? queryable.Where(s => s.IdChartType == null) 
                : queryable.Where(s => s.IdChartType == idChartType);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.IdChartType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idChartType">IdChartType to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByIdChartType(this IQueryable<SmartSocial.Data.SmartChart> queryable, ComparisonOperator comparisonOperator, int? idChartType)
        {
            if (idChartType == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("idChartType", "Parameter 'idChartType' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.IdChartType > idChartType);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.IdChartType >= idChartType);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.IdChartType < idChartType);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.IdChartType <= idChartType);
                case ComparisonOperator.NotEquals:
                    return idChartType == null 
                        ? queryable.Where(s => s.IdChartType != null) 
                        : queryable.Where(s => s.IdChartType != idChartType);
                default:
                    return idChartType == null 
                        ? queryable.Where(s => s.IdChartType == null) 
                        : queryable.Where(s => s.IdChartType == idChartType);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.IdChartType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idChartType">IdChartType to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByIdChartType(this IQueryable<SmartSocial.Data.SmartChart> queryable, int? idChartType, params int?[] additionalValues)
        {
            var idChartTypeList = new List<int?> { idChartType };

            if (additionalValues != null)
                idChartTypeList.AddRange(additionalValues);
            else
                idChartTypeList.Add(null);

            if (idChartTypeList.Count == 1)
                return queryable.ByIdChartType(idChartTypeList[0]);

            return queryable.ByIdChartType(idChartTypeList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.IdChartType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByIdChartType(this IQueryable<SmartSocial.Data.SmartChart> queryable, IEnumerable<int?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SmartChart, bool>("IdChartType", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.AxisSeriesTitle"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="axisSeriesTitle">AxisSeriesTitle to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByAxisSeriesTitle(this IQueryable<SmartSocial.Data.SmartChart> queryable, string axisSeriesTitle)
        {
            // support nulls
            return axisSeriesTitle == null 
                ? queryable.Where(s => s.AxisSeriesTitle == null) 
                : queryable.Where(s => s.AxisSeriesTitle == axisSeriesTitle);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.AxisSeriesTitle"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="axisSeriesTitle">AxisSeriesTitle to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByAxisSeriesTitle(this IQueryable<SmartSocial.Data.SmartChart> queryable, ContainmentOperator containmentOperator, string axisSeriesTitle)
        {
            if (axisSeriesTitle == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("axisSeriesTitle", "Parameter 'axisSeriesTitle' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.AxisSeriesTitle.Contains(axisSeriesTitle));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.AxisSeriesTitle.StartsWith(axisSeriesTitle));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.AxisSeriesTitle.EndsWith(axisSeriesTitle));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.AxisSeriesTitle.Contains(axisSeriesTitle) == false);
                case ContainmentOperator.NotEquals:
                    return axisSeriesTitle == null 
                        ? queryable.Where(s => s.AxisSeriesTitle != null) 
                        : queryable.Where(s => s.AxisSeriesTitle != axisSeriesTitle);
                default:
                    return axisSeriesTitle == null 
                        ? queryable.Where(s => s.AxisSeriesTitle == null) 
                        : queryable.Where(s => s.AxisSeriesTitle == axisSeriesTitle);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.AxisSeriesTitle"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="axisSeriesTitle">AxisSeriesTitle to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByAxisSeriesTitle(this IQueryable<SmartSocial.Data.SmartChart> queryable, string axisSeriesTitle, params string[] additionalValues)
        {
            var axisSeriesTitleList = new List<string> { axisSeriesTitle };

            if (additionalValues != null)
                axisSeriesTitleList.AddRange(additionalValues);
            else
                axisSeriesTitleList.Add(null);

            if (axisSeriesTitleList.Count == 1)
                return queryable.ByAxisSeriesTitle(axisSeriesTitleList[0]);

            return queryable.ByAxisSeriesTitle(axisSeriesTitleList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.AxisSeriesTitle"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByAxisSeriesTitle(this IQueryable<SmartSocial.Data.SmartChart> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SmartChart, bool>("AxisSeriesTitle", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.AxisValuesTitle"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="axisValuesTitle">AxisValuesTitle to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByAxisValuesTitle(this IQueryable<SmartSocial.Data.SmartChart> queryable, string axisValuesTitle)
        {
            // support nulls
            return axisValuesTitle == null 
                ? queryable.Where(s => s.AxisValuesTitle == null) 
                : queryable.Where(s => s.AxisValuesTitle == axisValuesTitle);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.AxisValuesTitle"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="axisValuesTitle">AxisValuesTitle to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByAxisValuesTitle(this IQueryable<SmartSocial.Data.SmartChart> queryable, ContainmentOperator containmentOperator, string axisValuesTitle)
        {
            if (axisValuesTitle == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("axisValuesTitle", "Parameter 'axisValuesTitle' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.AxisValuesTitle.Contains(axisValuesTitle));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.AxisValuesTitle.StartsWith(axisValuesTitle));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.AxisValuesTitle.EndsWith(axisValuesTitle));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.AxisValuesTitle.Contains(axisValuesTitle) == false);
                case ContainmentOperator.NotEquals:
                    return axisValuesTitle == null 
                        ? queryable.Where(s => s.AxisValuesTitle != null) 
                        : queryable.Where(s => s.AxisValuesTitle != axisValuesTitle);
                default:
                    return axisValuesTitle == null 
                        ? queryable.Where(s => s.AxisValuesTitle == null) 
                        : queryable.Where(s => s.AxisValuesTitle == axisValuesTitle);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.AxisValuesTitle"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="axisValuesTitle">AxisValuesTitle to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByAxisValuesTitle(this IQueryable<SmartSocial.Data.SmartChart> queryable, string axisValuesTitle, params string[] additionalValues)
        {
            var axisValuesTitleList = new List<string> { axisValuesTitle };

            if (additionalValues != null)
                axisValuesTitleList.AddRange(additionalValues);
            else
                axisValuesTitleList.Add(null);

            if (axisValuesTitleList.Count == 1)
                return queryable.ByAxisValuesTitle(axisValuesTitleList[0]);

            return queryable.ByAxisValuesTitle(axisValuesTitleList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.AxisValuesTitle"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByAxisValuesTitle(this IQueryable<SmartSocial.Data.SmartChart> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SmartChart, bool>("AxisValuesTitle", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.ChartOrder"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="chartOrder">ChartOrder to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByChartOrder(this IQueryable<SmartSocial.Data.SmartChart> queryable, int? chartOrder)
        {
            // support nulls
            return chartOrder == null 
                ? queryable.Where(s => s.ChartOrder == null) 
                : queryable.Where(s => s.ChartOrder == chartOrder);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.ChartOrder"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="chartOrder">ChartOrder to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByChartOrder(this IQueryable<SmartSocial.Data.SmartChart> queryable, ComparisonOperator comparisonOperator, int? chartOrder)
        {
            if (chartOrder == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("chartOrder", "Parameter 'chartOrder' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.ChartOrder > chartOrder);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.ChartOrder >= chartOrder);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.ChartOrder < chartOrder);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.ChartOrder <= chartOrder);
                case ComparisonOperator.NotEquals:
                    return chartOrder == null 
                        ? queryable.Where(s => s.ChartOrder != null) 
                        : queryable.Where(s => s.ChartOrder != chartOrder);
                default:
                    return chartOrder == null 
                        ? queryable.Where(s => s.ChartOrder == null) 
                        : queryable.Where(s => s.ChartOrder == chartOrder);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.ChartOrder"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="chartOrder">ChartOrder to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByChartOrder(this IQueryable<SmartSocial.Data.SmartChart> queryable, int? chartOrder, params int?[] additionalValues)
        {
            var chartOrderList = new List<int?> { chartOrder };

            if (additionalValues != null)
                chartOrderList.AddRange(additionalValues);
            else
                chartOrderList.Add(null);

            if (chartOrderList.Count == 1)
                return queryable.ByChartOrder(chartOrderList[0]);

            return queryable.ByChartOrder(chartOrderList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.ChartOrder"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByChartOrder(this IQueryable<SmartSocial.Data.SmartChart> queryable, IEnumerable<int?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SmartChart, bool>("ChartOrder", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.SocialPostFilter"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="socialPostFilter">SocialPostFilter to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> BySocialPostFilter(this IQueryable<SmartSocial.Data.SmartChart> queryable, string socialPostFilter)
        {
            // support nulls
            return socialPostFilter == null 
                ? queryable.Where(s => s.SocialPostFilter == null) 
                : queryable.Where(s => s.SocialPostFilter == socialPostFilter);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.SocialPostFilter"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="socialPostFilter">SocialPostFilter to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> BySocialPostFilter(this IQueryable<SmartSocial.Data.SmartChart> queryable, ContainmentOperator containmentOperator, string socialPostFilter)
        {
            if (socialPostFilter == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("socialPostFilter", "Parameter 'socialPostFilter' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.SocialPostFilter.Contains(socialPostFilter));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.SocialPostFilter.StartsWith(socialPostFilter));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.SocialPostFilter.EndsWith(socialPostFilter));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.SocialPostFilter.Contains(socialPostFilter) == false);
                case ContainmentOperator.NotEquals:
                    return socialPostFilter == null 
                        ? queryable.Where(s => s.SocialPostFilter != null) 
                        : queryable.Where(s => s.SocialPostFilter != socialPostFilter);
                default:
                    return socialPostFilter == null 
                        ? queryable.Where(s => s.SocialPostFilter == null) 
                        : queryable.Where(s => s.SocialPostFilter == socialPostFilter);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.SocialPostFilter"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="socialPostFilter">SocialPostFilter to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> BySocialPostFilter(this IQueryable<SmartSocial.Data.SmartChart> queryable, string socialPostFilter, params string[] additionalValues)
        {
            var socialPostFilterList = new List<string> { socialPostFilter };

            if (additionalValues != null)
                socialPostFilterList.AddRange(additionalValues);
            else
                socialPostFilterList.Add(null);

            if (socialPostFilterList.Count == 1)
                return queryable.BySocialPostFilter(socialPostFilterList[0]);

            return queryable.BySocialPostFilter(socialPostFilterList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.SocialPostFilter"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> BySocialPostFilter(this IQueryable<SmartSocial.Data.SmartChart> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SmartChart, bool>("SocialPostFilter", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.CssClasses"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cssClasses">CssClasses to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByCssClasses(this IQueryable<SmartSocial.Data.SmartChart> queryable, string cssClasses)
        {
            // support nulls
            return cssClasses == null 
                ? queryable.Where(s => s.CssClasses == null) 
                : queryable.Where(s => s.CssClasses == cssClasses);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.CssClasses"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cssClasses">CssClasses to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByCssClasses(this IQueryable<SmartSocial.Data.SmartChart> queryable, ContainmentOperator containmentOperator, string cssClasses)
        {
            if (cssClasses == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("cssClasses", "Parameter 'cssClasses' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.CssClasses.Contains(cssClasses));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.CssClasses.StartsWith(cssClasses));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.CssClasses.EndsWith(cssClasses));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.CssClasses.Contains(cssClasses) == false);
                case ContainmentOperator.NotEquals:
                    return cssClasses == null 
                        ? queryable.Where(s => s.CssClasses != null) 
                        : queryable.Where(s => s.CssClasses != cssClasses);
                default:
                    return cssClasses == null 
                        ? queryable.Where(s => s.CssClasses == null) 
                        : queryable.Where(s => s.CssClasses == cssClasses);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.CssClasses"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cssClasses">CssClasses to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByCssClasses(this IQueryable<SmartSocial.Data.SmartChart> queryable, string cssClasses, params string[] additionalValues)
        {
            var cssClassesList = new List<string> { cssClasses };

            if (additionalValues != null)
                cssClassesList.AddRange(additionalValues);
            else
                cssClassesList.Add(null);

            if (cssClassesList.Count == 1)
                return queryable.ByCssClasses(cssClassesList[0]);

            return queryable.ByCssClasses(cssClassesList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.CssClasses"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByCssClasses(this IQueryable<SmartSocial.Data.SmartChart> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SmartChart, bool>("CssClasses", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.IdDataProvider"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idDataProvider">IdDataProvider to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByIdDataProvider(this IQueryable<SmartSocial.Data.SmartChart> queryable, int? idDataProvider)
        {
            // support nulls
            return idDataProvider == null 
                ? queryable.Where(s => s.IdDataProvider == null) 
                : queryable.Where(s => s.IdDataProvider == idDataProvider);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.IdDataProvider"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idDataProvider">IdDataProvider to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByIdDataProvider(this IQueryable<SmartSocial.Data.SmartChart> queryable, ComparisonOperator comparisonOperator, int? idDataProvider)
        {
            if (idDataProvider == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("idDataProvider", "Parameter 'idDataProvider' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.IdDataProvider > idDataProvider);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.IdDataProvider >= idDataProvider);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.IdDataProvider < idDataProvider);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.IdDataProvider <= idDataProvider);
                case ComparisonOperator.NotEquals:
                    return idDataProvider == null 
                        ? queryable.Where(s => s.IdDataProvider != null) 
                        : queryable.Where(s => s.IdDataProvider != idDataProvider);
                default:
                    return idDataProvider == null 
                        ? queryable.Where(s => s.IdDataProvider == null) 
                        : queryable.Where(s => s.IdDataProvider == idDataProvider);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.IdDataProvider"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idDataProvider">IdDataProvider to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByIdDataProvider(this IQueryable<SmartSocial.Data.SmartChart> queryable, int? idDataProvider, params int?[] additionalValues)
        {
            var idDataProviderList = new List<int?> { idDataProvider };

            if (additionalValues != null)
                idDataProviderList.AddRange(additionalValues);
            else
                idDataProviderList.Add(null);

            if (idDataProviderList.Count == 1)
                return queryable.ByIdDataProvider(idDataProviderList[0]);

            return queryable.ByIdDataProvider(idDataProviderList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.IdDataProvider"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByIdDataProvider(this IQueryable<SmartSocial.Data.SmartChart> queryable, IEnumerable<int?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SmartChart, bool>("IdDataProvider", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.HtmlStyles"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="htmlStyles">HtmlStyles to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByHtmlStyles(this IQueryable<SmartSocial.Data.SmartChart> queryable, string htmlStyles)
        {
            // support nulls
            return htmlStyles == null 
                ? queryable.Where(s => s.HtmlStyles == null) 
                : queryable.Where(s => s.HtmlStyles == htmlStyles);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.HtmlStyles"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="htmlStyles">HtmlStyles to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByHtmlStyles(this IQueryable<SmartSocial.Data.SmartChart> queryable, ContainmentOperator containmentOperator, string htmlStyles)
        {
            if (htmlStyles == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("htmlStyles", "Parameter 'htmlStyles' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.HtmlStyles.Contains(htmlStyles));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.HtmlStyles.StartsWith(htmlStyles));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.HtmlStyles.EndsWith(htmlStyles));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.HtmlStyles.Contains(htmlStyles) == false);
                case ContainmentOperator.NotEquals:
                    return htmlStyles == null 
                        ? queryable.Where(s => s.HtmlStyles != null) 
                        : queryable.Where(s => s.HtmlStyles != htmlStyles);
                default:
                    return htmlStyles == null 
                        ? queryable.Where(s => s.HtmlStyles == null) 
                        : queryable.Where(s => s.HtmlStyles == htmlStyles);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.HtmlStyles"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="htmlStyles">HtmlStyles to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByHtmlStyles(this IQueryable<SmartSocial.Data.SmartChart> queryable, string htmlStyles, params string[] additionalValues)
        {
            var htmlStylesList = new List<string> { htmlStyles };

            if (additionalValues != null)
                htmlStylesList.AddRange(additionalValues);
            else
                htmlStylesList.Add(null);

            if (htmlStylesList.Count == 1)
                return queryable.ByHtmlStyles(htmlStylesList[0]);

            return queryable.ByHtmlStyles(htmlStylesList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SmartChart.HtmlStyles"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SmartChart> ByHtmlStyles(this IQueryable<SmartSocial.Data.SmartChart> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SmartChart, bool>("HtmlStyles", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<SmartSocial.Data.SmartSocialdbDataContext, int, SmartSocial.Data.SmartChart> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (SmartSocial.Data.SmartSocialdbDataContext db, int idSmartChart) =>
                        db.SmartChart.FirstOrDefault(s => s.IdSmartChart == idSmartChart));

        }
        #endregion
    }
}
#pragma warning restore 1591
