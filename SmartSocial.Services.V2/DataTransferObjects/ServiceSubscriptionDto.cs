//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace SmartSocial.Services.V2.DataTransferObjects
{
    
    [DataContract(Name = "ServiceSubscriptionDto", Namespace = "http://www.mavizontech.com/dto/" , IsReference = true) ]
    public partial class ServiceSubscriptionDto
    {
         #region Primitive Properties
    	
    	[DataMember]
        public virtual int idServiceSubscription
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual string SubscriptionName
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual Nullable<System.DateTime> StartDate
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual Nullable<System.DateTime> EndDate
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual Nullable<bool> IsActive
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    	[DataMember]
        public virtual ICollection<ServiceDeliveryDto> ServiceDeliveries
        {
            get
            {
                if (_serviceDeliveries == null)
                {
                    var newCollection = new FixupCollection<ServiceDeliveryDto>();
                    newCollection.CollectionChanged += FixupServiceDeliveries;
                    _serviceDeliveries = newCollection;
                }
                return _serviceDeliveries;
            }
            set
            {
                if (!ReferenceEquals(_serviceDeliveries, value))
                {
                    var previousValue = _serviceDeliveries as FixupCollection<ServiceDeliveryDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupServiceDeliveries;
                    }
                    _serviceDeliveries = value;
                    var newValue = value as FixupCollection<ServiceDeliveryDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupServiceDeliveries;
                    }
                }
            }
        }
        private ICollection<ServiceDeliveryDto> _serviceDeliveries;
    
    	[DataMember]
        public virtual ICollection<UsersXSubscriptionDto> UsersXSubscriptions
        {
            get
            {
                if (_usersXSubscriptions == null)
                {
                    var newCollection = new FixupCollection<UsersXSubscriptionDto>();
                    newCollection.CollectionChanged += FixupUsersXSubscriptions;
                    _usersXSubscriptions = newCollection;
                }
                return _usersXSubscriptions;
            }
            set
            {
                if (!ReferenceEquals(_usersXSubscriptions, value))
                {
                    var previousValue = _usersXSubscriptions as FixupCollection<UsersXSubscriptionDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUsersXSubscriptions;
                    }
                    _usersXSubscriptions = value;
                    var newValue = value as FixupCollection<UsersXSubscriptionDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUsersXSubscriptions;
                    }
                }
            }
        }
        private ICollection<UsersXSubscriptionDto> _usersXSubscriptions;

        #endregion

        #region Association Fixup
    
        private void FixupServiceDeliveries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ServiceDeliveryDto item in e.NewItems)
                {
                    item.ServiceSubscription = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ServiceDeliveryDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.ServiceSubscription, this))
                    {
                        item.ServiceSubscription = null;
                    }
                }
            }
        }
    
        private void FixupUsersXSubscriptions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UsersXSubscriptionDto item in e.NewItems)
                {
                    item.ServiceSubscription = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UsersXSubscriptionDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.ServiceSubscription, this))
                    {
                        item.ServiceSubscription = null;
                    }
                }
            }
        }

        #endregion

    }
}
