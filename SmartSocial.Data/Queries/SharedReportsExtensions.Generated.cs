#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace SmartSocial.Data
{
    /// <summary>
    /// The query extension class for SharedReports.
    /// </summary>
    public static partial class SharedReportsExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SmartSocial.Data.SharedReports GetByKey(this IQueryable<SmartSocial.Data.SharedReports> queryable, int idSharedReports)
        {
            var entity = queryable as System.Data.Linq.Table<SmartSocial.Data.SharedReports>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((SmartSocial.Data.SmartSocialdbDataContext)entity.Context, idSharedReports);

            return queryable.FirstOrDefault(s => s.IdSharedReports == idSharedReports);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<SmartSocial.Data.SharedReports> table, int idSharedReports)
        {
            return table.Delete(s => s.IdSharedReports == idSharedReports);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.IdSharedReports"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idSharedReports">IdSharedReports to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByIdSharedReports(this IQueryable<SmartSocial.Data.SharedReports> queryable, int idSharedReports)
        {
            return queryable.Where(s => s.IdSharedReports == idSharedReports);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.IdSharedReports"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idSharedReports">IdSharedReports to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByIdSharedReports(this IQueryable<SmartSocial.Data.SharedReports> queryable, ComparisonOperator comparisonOperator, int idSharedReports)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.IdSharedReports > idSharedReports);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.IdSharedReports >= idSharedReports);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.IdSharedReports < idSharedReports);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.IdSharedReports <= idSharedReports);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.IdSharedReports != idSharedReports);
                default:
                    return queryable.Where(s => s.IdSharedReports == idSharedReports);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.IdSharedReports"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idSharedReports">IdSharedReports to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByIdSharedReports(this IQueryable<SmartSocial.Data.SharedReports> queryable, int idSharedReports, params int[] additionalValues)
        {
            var idSharedReportsList = new List<int> { idSharedReports };

            if (additionalValues != null)
                idSharedReportsList.AddRange(additionalValues);

            if (idSharedReportsList.Count == 1)
                return queryable.ByIdSharedReports(idSharedReportsList[0]);

            return queryable.ByIdSharedReports(idSharedReportsList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.IdSharedReports"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByIdSharedReports(this IQueryable<SmartSocial.Data.SharedReports> queryable, IEnumerable<int> values)
        {
            return queryable.Where(s => values.Contains(s.IdSharedReports));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdBy">CreatedBy to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByCreatedBy(this IQueryable<SmartSocial.Data.SharedReports> queryable, int createdBy)
        {
            return queryable.Where(s => s.CreatedBy == createdBy);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdBy">CreatedBy to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByCreatedBy(this IQueryable<SmartSocial.Data.SharedReports> queryable, ComparisonOperator comparisonOperator, int createdBy)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.CreatedBy > createdBy);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.CreatedBy >= createdBy);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.CreatedBy < createdBy);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.CreatedBy <= createdBy);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.CreatedBy != createdBy);
                default:
                    return queryable.Where(s => s.CreatedBy == createdBy);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdBy">CreatedBy to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByCreatedBy(this IQueryable<SmartSocial.Data.SharedReports> queryable, int createdBy, params int[] additionalValues)
        {
            var createdByList = new List<int> { createdBy };

            if (additionalValues != null)
                createdByList.AddRange(additionalValues);

            if (createdByList.Count == 1)
                return queryable.ByCreatedBy(createdByList[0]);

            return queryable.ByCreatedBy(createdByList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByCreatedBy(this IQueryable<SmartSocial.Data.SharedReports> queryable, IEnumerable<int> values)
        {
            return queryable.Where(s => values.Contains(s.CreatedBy));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.SmartReportId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="smartReportId">SmartReportId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> BySmartReportId(this IQueryable<SmartSocial.Data.SharedReports> queryable, int smartReportId)
        {
            return queryable.Where(s => s.SmartReportId == smartReportId);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.SmartReportId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="smartReportId">SmartReportId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> BySmartReportId(this IQueryable<SmartSocial.Data.SharedReports> queryable, ComparisonOperator comparisonOperator, int smartReportId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.SmartReportId > smartReportId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.SmartReportId >= smartReportId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.SmartReportId < smartReportId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.SmartReportId <= smartReportId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.SmartReportId != smartReportId);
                default:
                    return queryable.Where(s => s.SmartReportId == smartReportId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.SmartReportId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="smartReportId">SmartReportId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> BySmartReportId(this IQueryable<SmartSocial.Data.SharedReports> queryable, int smartReportId, params int[] additionalValues)
        {
            var smartReportIdList = new List<int> { smartReportId };

            if (additionalValues != null)
                smartReportIdList.AddRange(additionalValues);

            if (smartReportIdList.Count == 1)
                return queryable.BySmartReportId(smartReportIdList[0]);

            return queryable.BySmartReportId(smartReportIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.SmartReportId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> BySmartReportId(this IQueryable<SmartSocial.Data.SharedReports> queryable, IEnumerable<int> values)
        {
            return queryable.Where(s => values.Contains(s.SmartReportId));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.SharedWith"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="sharedWith">SharedWith to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> BySharedWith(this IQueryable<SmartSocial.Data.SharedReports> queryable, int? sharedWith)
        {
            // support nulls
            return sharedWith == null 
                ? queryable.Where(s => s.SharedWith == null) 
                : queryable.Where(s => s.SharedWith == sharedWith);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.SharedWith"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="sharedWith">SharedWith to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> BySharedWith(this IQueryable<SmartSocial.Data.SharedReports> queryable, ComparisonOperator comparisonOperator, int? sharedWith)
        {
            if (sharedWith == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("sharedWith", "Parameter 'sharedWith' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.SharedWith > sharedWith);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.SharedWith >= sharedWith);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.SharedWith < sharedWith);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.SharedWith <= sharedWith);
                case ComparisonOperator.NotEquals:
                    return sharedWith == null 
                        ? queryable.Where(s => s.SharedWith != null) 
                        : queryable.Where(s => s.SharedWith != sharedWith);
                default:
                    return sharedWith == null 
                        ? queryable.Where(s => s.SharedWith == null) 
                        : queryable.Where(s => s.SharedWith == sharedWith);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.SharedWith"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="sharedWith">SharedWith to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> BySharedWith(this IQueryable<SmartSocial.Data.SharedReports> queryable, int? sharedWith, params int?[] additionalValues)
        {
            var sharedWithList = new List<int?> { sharedWith };

            if (additionalValues != null)
                sharedWithList.AddRange(additionalValues);
            else
                sharedWithList.Add(null);

            if (sharedWithList.Count == 1)
                return queryable.BySharedWith(sharedWithList[0]);

            return queryable.BySharedWith(sharedWithList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.SharedWith"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> BySharedWith(this IQueryable<SmartSocial.Data.SharedReports> queryable, IEnumerable<int?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SharedReports, bool>("SharedWith", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.Url"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="url">Url to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByUrl(this IQueryable<SmartSocial.Data.SharedReports> queryable, string url)
        {
            // support nulls
            return url == null 
                ? queryable.Where(s => s.Url == null) 
                : queryable.Where(s => s.Url == url);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.Url"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="url">Url to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByUrl(this IQueryable<SmartSocial.Data.SharedReports> queryable, ContainmentOperator containmentOperator, string url)
        {
            if (url == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("url", "Parameter 'url' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Url.Contains(url));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Url.StartsWith(url));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Url.EndsWith(url));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Url.Contains(url) == false);
                case ContainmentOperator.NotEquals:
                    return url == null 
                        ? queryable.Where(s => s.Url != null) 
                        : queryable.Where(s => s.Url != url);
                default:
                    return url == null 
                        ? queryable.Where(s => s.Url == null) 
                        : queryable.Where(s => s.Url == url);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.Url"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="url">Url to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByUrl(this IQueryable<SmartSocial.Data.SharedReports> queryable, string url, params string[] additionalValues)
        {
            var urlList = new List<string> { url };

            if (additionalValues != null)
                urlList.AddRange(additionalValues);
            else
                urlList.Add(null);

            if (urlList.Count == 1)
                return queryable.ByUrl(urlList[0]);

            return queryable.ByUrl(urlList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.Url"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByUrl(this IQueryable<SmartSocial.Data.SharedReports> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SharedReports, bool>("Url", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.TinyUrl"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tinyUrl">TinyUrl to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByTinyUrl(this IQueryable<SmartSocial.Data.SharedReports> queryable, string tinyUrl)
        {
            // support nulls
            return tinyUrl == null 
                ? queryable.Where(s => s.TinyUrl == null) 
                : queryable.Where(s => s.TinyUrl == tinyUrl);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.TinyUrl"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tinyUrl">TinyUrl to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByTinyUrl(this IQueryable<SmartSocial.Data.SharedReports> queryable, ContainmentOperator containmentOperator, string tinyUrl)
        {
            if (tinyUrl == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("tinyUrl", "Parameter 'tinyUrl' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.TinyUrl.Contains(tinyUrl));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.TinyUrl.StartsWith(tinyUrl));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.TinyUrl.EndsWith(tinyUrl));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.TinyUrl.Contains(tinyUrl) == false);
                case ContainmentOperator.NotEquals:
                    return tinyUrl == null 
                        ? queryable.Where(s => s.TinyUrl != null) 
                        : queryable.Where(s => s.TinyUrl != tinyUrl);
                default:
                    return tinyUrl == null 
                        ? queryable.Where(s => s.TinyUrl == null) 
                        : queryable.Where(s => s.TinyUrl == tinyUrl);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.TinyUrl"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tinyUrl">TinyUrl to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByTinyUrl(this IQueryable<SmartSocial.Data.SharedReports> queryable, string tinyUrl, params string[] additionalValues)
        {
            var tinyUrlList = new List<string> { tinyUrl };

            if (additionalValues != null)
                tinyUrlList.AddRange(additionalValues);
            else
                tinyUrlList.Add(null);

            if (tinyUrlList.Count == 1)
                return queryable.ByTinyUrl(tinyUrlList[0]);

            return queryable.ByTinyUrl(tinyUrlList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.TinyUrl"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByTinyUrl(this IQueryable<SmartSocial.Data.SharedReports> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SharedReports, bool>("TinyUrl", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.Comments"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comments">Comments to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByComments(this IQueryable<SmartSocial.Data.SharedReports> queryable, string comments)
        {
            // support nulls
            return comments == null 
                ? queryable.Where(s => s.Comments == null) 
                : queryable.Where(s => s.Comments == comments);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.Comments"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comments">Comments to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByComments(this IQueryable<SmartSocial.Data.SharedReports> queryable, ContainmentOperator containmentOperator, string comments)
        {
            if (comments == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("comments", "Parameter 'comments' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Comments.Contains(comments));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Comments.StartsWith(comments));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Comments.EndsWith(comments));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Comments.Contains(comments) == false);
                case ContainmentOperator.NotEquals:
                    return comments == null 
                        ? queryable.Where(s => s.Comments != null) 
                        : queryable.Where(s => s.Comments != comments);
                default:
                    return comments == null 
                        ? queryable.Where(s => s.Comments == null) 
                        : queryable.Where(s => s.Comments == comments);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.Comments"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comments">Comments to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByComments(this IQueryable<SmartSocial.Data.SharedReports> queryable, string comments, params string[] additionalValues)
        {
            var commentsList = new List<string> { comments };

            if (additionalValues != null)
                commentsList.AddRange(additionalValues);
            else
                commentsList.Add(null);

            if (commentsList.Count == 1)
                return queryable.ByComments(commentsList[0]);

            return queryable.ByComments(commentsList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.Comments"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByComments(this IQueryable<SmartSocial.Data.SharedReports> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SharedReports, bool>("Comments", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.Token"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="token">Token to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByToken(this IQueryable<SmartSocial.Data.SharedReports> queryable, string token)
        {
            // support nulls
            return token == null 
                ? queryable.Where(s => s.Token == null) 
                : queryable.Where(s => s.Token == token);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.Token"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="token">Token to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByToken(this IQueryable<SmartSocial.Data.SharedReports> queryable, ContainmentOperator containmentOperator, string token)
        {
            if (token == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("token", "Parameter 'token' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Token.Contains(token));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Token.StartsWith(token));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Token.EndsWith(token));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Token.Contains(token) == false);
                case ContainmentOperator.NotEquals:
                    return token == null 
                        ? queryable.Where(s => s.Token != null) 
                        : queryable.Where(s => s.Token != token);
                default:
                    return token == null 
                        ? queryable.Where(s => s.Token == null) 
                        : queryable.Where(s => s.Token == token);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.Token"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="token">Token to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByToken(this IQueryable<SmartSocial.Data.SharedReports> queryable, string token, params string[] additionalValues)
        {
            var tokenList = new List<string> { token };

            if (additionalValues != null)
                tokenList.AddRange(additionalValues);
            else
                tokenList.Add(null);

            if (tokenList.Count == 1)
                return queryable.ByToken(tokenList[0]);

            return queryable.ByToken(tokenList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.Token"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByToken(this IQueryable<SmartSocial.Data.SharedReports> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SharedReports, bool>("Token", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdDate">CreatedDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByCreatedDate(this IQueryable<SmartSocial.Data.SharedReports> queryable, System.DateTime createdDate)
        {
            return queryable.Where(s => s.CreatedDate == createdDate);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdDate">CreatedDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByCreatedDate(this IQueryable<SmartSocial.Data.SharedReports> queryable, ComparisonOperator comparisonOperator, System.DateTime createdDate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.CreatedDate > createdDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.CreatedDate >= createdDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.CreatedDate < createdDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.CreatedDate <= createdDate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.CreatedDate != createdDate);
                default:
                    return queryable.Where(s => s.CreatedDate == createdDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdDate">CreatedDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByCreatedDate(this IQueryable<SmartSocial.Data.SharedReports> queryable, System.DateTime createdDate, params System.DateTime[] additionalValues)
        {
            var createdDateList = new List<System.DateTime> { createdDate };

            if (additionalValues != null)
                createdDateList.AddRange(additionalValues);

            if (createdDateList.Count == 1)
                return queryable.ByCreatedDate(createdDateList[0]);

            return queryable.ByCreatedDate(createdDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByCreatedDate(this IQueryable<SmartSocial.Data.SharedReports> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(s => values.Contains(s.CreatedDate));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.ExpiredDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="expiredDate">ExpiredDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByExpiredDate(this IQueryable<SmartSocial.Data.SharedReports> queryable, System.DateTime expiredDate)
        {
            return queryable.Where(s => s.ExpiredDate == expiredDate);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.ExpiredDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="expiredDate">ExpiredDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByExpiredDate(this IQueryable<SmartSocial.Data.SharedReports> queryable, ComparisonOperator comparisonOperator, System.DateTime expiredDate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.ExpiredDate > expiredDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.ExpiredDate >= expiredDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.ExpiredDate < expiredDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.ExpiredDate <= expiredDate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.ExpiredDate != expiredDate);
                default:
                    return queryable.Where(s => s.ExpiredDate == expiredDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.ExpiredDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="expiredDate">ExpiredDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByExpiredDate(this IQueryable<SmartSocial.Data.SharedReports> queryable, System.DateTime expiredDate, params System.DateTime[] additionalValues)
        {
            var expiredDateList = new List<System.DateTime> { expiredDate };

            if (additionalValues != null)
                expiredDateList.AddRange(additionalValues);

            if (expiredDateList.Count == 1)
                return queryable.ByExpiredDate(expiredDateList[0]);

            return queryable.ByExpiredDate(expiredDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.ExpiredDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByExpiredDate(this IQueryable<SmartSocial.Data.SharedReports> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(s => values.Contains(s.ExpiredDate));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.IsActive"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isActive">IsActive to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByIsActive(this IQueryable<SmartSocial.Data.SharedReports> queryable, bool isActive)
        {
            return queryable.Where(s => s.IsActive == isActive);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.IsActive"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isActive">IsActive to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByIsActive(this IQueryable<SmartSocial.Data.SharedReports> queryable, ComparisonOperator comparisonOperator, bool isActive)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support bool type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.IsActive != isActive);
                default:
                    return queryable.Where(s => s.IsActive == isActive);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.IsActive"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isActive">IsActive to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByIsActive(this IQueryable<SmartSocial.Data.SharedReports> queryable, bool isActive, params bool[] additionalValues)
        {
            var isActiveList = new List<bool> { isActive };

            if (additionalValues != null)
                isActiveList.AddRange(additionalValues);

            if (isActiveList.Count == 1)
                return queryable.ByIsActive(isActiveList[0]);

            return queryable.ByIsActive(isActiveList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SharedReports.IsActive"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SharedReports> ByIsActive(this IQueryable<SmartSocial.Data.SharedReports> queryable, IEnumerable<bool> values)
        {
            return queryable.Where(s => values.Contains(s.IsActive));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<SmartSocial.Data.SmartSocialdbDataContext, int, SmartSocial.Data.SharedReports> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (SmartSocial.Data.SmartSocialdbDataContext db, int idSharedReports) =>
                        db.SharedReports.FirstOrDefault(s => s.IdSharedReports == idSharedReports));

        }
        #endregion
    }
}
#pragma warning restore 1591
