#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace SmartSocial.Data
{
    /// <summary>
    /// The query extension class for ChartType.
    /// </summary>
    public static partial class ChartTypeExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SmartSocial.Data.ChartType GetByKey(this IQueryable<SmartSocial.Data.ChartType> queryable, int idChartType)
        {
            var entity = queryable as System.Data.Linq.Table<SmartSocial.Data.ChartType>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((SmartSocial.Data.SmartSocialdbDataContext)entity.Context, idChartType);

            return queryable.FirstOrDefault(c => c.IdChartType == idChartType);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<SmartSocial.Data.ChartType> table, int idChartType)
        {
            return table.Delete(c => c.IdChartType == idChartType);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartType.IdChartType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idChartType">IdChartType to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartType> ByIdChartType(this IQueryable<SmartSocial.Data.ChartType> queryable, int idChartType)
        {
            return queryable.Where(c => c.IdChartType == idChartType);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartType.IdChartType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idChartType">IdChartType to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartType> ByIdChartType(this IQueryable<SmartSocial.Data.ChartType> queryable, ComparisonOperator comparisonOperator, int idChartType)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.IdChartType > idChartType);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.IdChartType >= idChartType);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.IdChartType < idChartType);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.IdChartType <= idChartType);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.IdChartType != idChartType);
                default:
                    return queryable.Where(c => c.IdChartType == idChartType);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartType.IdChartType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idChartType">IdChartType to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartType> ByIdChartType(this IQueryable<SmartSocial.Data.ChartType> queryable, int idChartType, params int[] additionalValues)
        {
            var idChartTypeList = new List<int> { idChartType };

            if (additionalValues != null)
                idChartTypeList.AddRange(additionalValues);

            if (idChartTypeList.Count == 1)
                return queryable.ByIdChartType(idChartTypeList[0]);

            return queryable.ByIdChartType(idChartTypeList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartType.IdChartType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartType> ByIdChartType(this IQueryable<SmartSocial.Data.ChartType> queryable, IEnumerable<int> values)
        {
            return queryable.Where(c => values.Contains(c.IdChartType));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartType.ChartTypeName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="chartTypeName">ChartTypeName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartType> ByChartTypeName(this IQueryable<SmartSocial.Data.ChartType> queryable, string chartTypeName)
        {
            // support nulls
            return chartTypeName == null 
                ? queryable.Where(c => c.ChartTypeName == null) 
                : queryable.Where(c => c.ChartTypeName == chartTypeName);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartType.ChartTypeName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="chartTypeName">ChartTypeName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartType> ByChartTypeName(this IQueryable<SmartSocial.Data.ChartType> queryable, ContainmentOperator containmentOperator, string chartTypeName)
        {
            if (chartTypeName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("chartTypeName", "Parameter 'chartTypeName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.ChartTypeName.Contains(chartTypeName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.ChartTypeName.StartsWith(chartTypeName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.ChartTypeName.EndsWith(chartTypeName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.ChartTypeName.Contains(chartTypeName) == false);
                case ContainmentOperator.NotEquals:
                    return chartTypeName == null 
                        ? queryable.Where(c => c.ChartTypeName != null) 
                        : queryable.Where(c => c.ChartTypeName != chartTypeName);
                default:
                    return chartTypeName == null 
                        ? queryable.Where(c => c.ChartTypeName == null) 
                        : queryable.Where(c => c.ChartTypeName == chartTypeName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartType.ChartTypeName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="chartTypeName">ChartTypeName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartType> ByChartTypeName(this IQueryable<SmartSocial.Data.ChartType> queryable, string chartTypeName, params string[] additionalValues)
        {
            var chartTypeNameList = new List<string> { chartTypeName };

            if (additionalValues != null)
                chartTypeNameList.AddRange(additionalValues);
            else
                chartTypeNameList.Add(null);

            if (chartTypeNameList.Count == 1)
                return queryable.ByChartTypeName(chartTypeNameList[0]);

            return queryable.ByChartTypeName(chartTypeNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartType.ChartTypeName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartType> ByChartTypeName(this IQueryable<SmartSocial.Data.ChartType> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.ChartType, bool>("ChartTypeName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartType.StoredProcedureName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="storedProcedureName">StoredProcedureName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartType> ByStoredProcedureName(this IQueryable<SmartSocial.Data.ChartType> queryable, string storedProcedureName)
        {
            // support nulls
            return storedProcedureName == null 
                ? queryable.Where(c => c.StoredProcedureName == null) 
                : queryable.Where(c => c.StoredProcedureName == storedProcedureName);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartType.StoredProcedureName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="storedProcedureName">StoredProcedureName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartType> ByStoredProcedureName(this IQueryable<SmartSocial.Data.ChartType> queryable, ContainmentOperator containmentOperator, string storedProcedureName)
        {
            if (storedProcedureName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("storedProcedureName", "Parameter 'storedProcedureName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.StoredProcedureName.Contains(storedProcedureName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.StoredProcedureName.StartsWith(storedProcedureName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.StoredProcedureName.EndsWith(storedProcedureName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.StoredProcedureName.Contains(storedProcedureName) == false);
                case ContainmentOperator.NotEquals:
                    return storedProcedureName == null 
                        ? queryable.Where(c => c.StoredProcedureName != null) 
                        : queryable.Where(c => c.StoredProcedureName != storedProcedureName);
                default:
                    return storedProcedureName == null 
                        ? queryable.Where(c => c.StoredProcedureName == null) 
                        : queryable.Where(c => c.StoredProcedureName == storedProcedureName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartType.StoredProcedureName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="storedProcedureName">StoredProcedureName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartType> ByStoredProcedureName(this IQueryable<SmartSocial.Data.ChartType> queryable, string storedProcedureName, params string[] additionalValues)
        {
            var storedProcedureNameList = new List<string> { storedProcedureName };

            if (additionalValues != null)
                storedProcedureNameList.AddRange(additionalValues);
            else
                storedProcedureNameList.Add(null);

            if (storedProcedureNameList.Count == 1)
                return queryable.ByStoredProcedureName(storedProcedureNameList[0]);

            return queryable.ByStoredProcedureName(storedProcedureNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartType.StoredProcedureName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartType> ByStoredProcedureName(this IQueryable<SmartSocial.Data.ChartType> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.ChartType, bool>("StoredProcedureName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartType.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartType> ByDescription(this IQueryable<SmartSocial.Data.ChartType> queryable, string description)
        {
            // support nulls
            return description == null 
                ? queryable.Where(c => c.Description == null) 
                : queryable.Where(c => c.Description == description);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartType.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartType> ByDescription(this IQueryable<SmartSocial.Data.ChartType> queryable, ContainmentOperator containmentOperator, string description)
        {
            if (description == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("description", "Parameter 'description' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.Description.Contains(description));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.Description.StartsWith(description));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.Description.EndsWith(description));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.Description.Contains(description) == false);
                case ContainmentOperator.NotEquals:
                    return description == null 
                        ? queryable.Where(c => c.Description != null) 
                        : queryable.Where(c => c.Description != description);
                default:
                    return description == null 
                        ? queryable.Where(c => c.Description == null) 
                        : queryable.Where(c => c.Description == description);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartType.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartType> ByDescription(this IQueryable<SmartSocial.Data.ChartType> queryable, string description, params string[] additionalValues)
        {
            var descriptionList = new List<string> { description };

            if (additionalValues != null)
                descriptionList.AddRange(additionalValues);
            else
                descriptionList.Add(null);

            if (descriptionList.Count == 1)
                return queryable.ByDescription(descriptionList[0]);

            return queryable.ByDescription(descriptionList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ChartType.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ChartType> ByDescription(this IQueryable<SmartSocial.Data.ChartType> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.ChartType, bool>("Description", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<SmartSocial.Data.SmartSocialdbDataContext, int, SmartSocial.Data.ChartType> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (SmartSocial.Data.SmartSocialdbDataContext db, int idChartType) =>
                        db.ChartType.FirstOrDefault(c => c.IdChartType == idChartType));

        }
        #endregion
    }
}
#pragma warning restore 1591
