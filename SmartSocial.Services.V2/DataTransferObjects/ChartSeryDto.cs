//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace SmartSocial.Services.V2.DataTransferObjects
{
    
    [DataContract(Name = "ChartSeryDto", Namespace = "http://www.mavizontech.com/dto/" , IsReference = true) ]
    public partial class ChartSeryDto
    {
         #region Primitive Properties
    	
    	[DataMember]
        public virtual int idChartSeries
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual Nullable<int> idSmartChart
        {
     
    		
            get { return _idSmartChart; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_idSmartChart != value)
                    {
                        if (SmartChart != null && SmartChart.idSmartChart != value)
                        {
                            SmartChart = null;
                        }
                        _idSmartChart = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _idSmartChart;
    	
    	[DataMember]
        public virtual string SeriesName
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    	[DataMember]
        public virtual ICollection<SeriesValueDto> SeriesValues
        {
            get
            {
                if (_seriesValues == null)
                {
                    var newCollection = new FixupCollection<SeriesValueDto>();
                    newCollection.CollectionChanged += FixupSeriesValues;
                    _seriesValues = newCollection;
                }
                return _seriesValues;
            }
            set
            {
                if (!ReferenceEquals(_seriesValues, value))
                {
                    var previousValue = _seriesValues as FixupCollection<SeriesValueDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSeriesValues;
                    }
                    _seriesValues = value;
                    var newValue = value as FixupCollection<SeriesValueDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSeriesValues;
                    }
                }
            }
        }
        private ICollection<SeriesValueDto> _seriesValues;
    
    	[DataMember]
        public virtual SmartChartDto SmartChart
        {
            get { return _smartChart; }
            set
            {
                if (!ReferenceEquals(_smartChart, value))
                {
                    var previousValue = _smartChart;
                    _smartChart = value;
                    FixupSmartChart(previousValue);
                }
            }
        }
        private SmartChartDto _smartChart;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupSmartChart(SmartChartDto previousValue)
        {
            if (previousValue != null && previousValue.ChartSeries.Contains(this))
            {
                previousValue.ChartSeries.Remove(this);
            }
    
            if (SmartChart != null)
            {
                if (!SmartChart.ChartSeries.Contains(this))
                {
                    SmartChart.ChartSeries.Add(this);
                }
                if (idSmartChart != SmartChart.idSmartChart)
                {
                    idSmartChart = SmartChart.idSmartChart;
                }
            }
            else if (!_settingFK)
            {
                idSmartChart = null;
            }
        }
    
        private void FixupSeriesValues(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SeriesValueDto item in e.NewItems)
                {
                    item.ChartSery = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SeriesValueDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.ChartSery, this))
                    {
                        item.ChartSery = null;
                    }
                }
            }
        }

        #endregion

    }
}
