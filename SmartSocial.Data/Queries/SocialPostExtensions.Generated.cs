#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace SmartSocial.Data
{
    /// <summary>
    /// The query extension class for SocialPost.
    /// </summary>
    public static partial class SocialPostExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SmartSocial.Data.SocialPost GetByKey(this IQueryable<SmartSocial.Data.SocialPost> queryable, int idSocialPost)
        {
            var entity = queryable as System.Data.Linq.Table<SmartSocial.Data.SocialPost>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((SmartSocial.Data.SmartSocialdbDataContext)entity.Context, idSocialPost);

            return queryable.FirstOrDefault(s => s.IdSocialPost == idSocialPost);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<SmartSocial.Data.SocialPost> table, int idSocialPost)
        {
            return table.Delete(s => s.IdSocialPost == idSocialPost);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.IdSocialPost"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idSocialPost">IdSocialPost to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByIdSocialPost(this IQueryable<SmartSocial.Data.SocialPost> queryable, int idSocialPost)
        {
            return queryable.Where(s => s.IdSocialPost == idSocialPost);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.IdSocialPost"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idSocialPost">IdSocialPost to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByIdSocialPost(this IQueryable<SmartSocial.Data.SocialPost> queryable, ComparisonOperator comparisonOperator, int idSocialPost)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.IdSocialPost > idSocialPost);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.IdSocialPost >= idSocialPost);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.IdSocialPost < idSocialPost);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.IdSocialPost <= idSocialPost);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.IdSocialPost != idSocialPost);
                default:
                    return queryable.Where(s => s.IdSocialPost == idSocialPost);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.IdSocialPost"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idSocialPost">IdSocialPost to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByIdSocialPost(this IQueryable<SmartSocial.Data.SocialPost> queryable, int idSocialPost, params int[] additionalValues)
        {
            var idSocialPostList = new List<int> { idSocialPost };

            if (additionalValues != null)
                idSocialPostList.AddRange(additionalValues);

            if (idSocialPostList.Count == 1)
                return queryable.ByIdSocialPost(idSocialPostList[0]);

            return queryable.ByIdSocialPost(idSocialPostList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.IdSocialPost"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByIdSocialPost(this IQueryable<SmartSocial.Data.SocialPost> queryable, IEnumerable<int> values)
        {
            return queryable.Where(s => values.Contains(s.IdSocialPost));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.IdSmartReport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idSmartReport">IdSmartReport to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByIdSmartReport(this IQueryable<SmartSocial.Data.SocialPost> queryable, int? idSmartReport)
        {
            // support nulls
            return idSmartReport == null 
                ? queryable.Where(s => s.IdSmartReport == null) 
                : queryable.Where(s => s.IdSmartReport == idSmartReport);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.IdSmartReport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idSmartReport">IdSmartReport to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByIdSmartReport(this IQueryable<SmartSocial.Data.SocialPost> queryable, ComparisonOperator comparisonOperator, int? idSmartReport)
        {
            if (idSmartReport == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("idSmartReport", "Parameter 'idSmartReport' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.IdSmartReport > idSmartReport);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.IdSmartReport >= idSmartReport);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.IdSmartReport < idSmartReport);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.IdSmartReport <= idSmartReport);
                case ComparisonOperator.NotEquals:
                    return idSmartReport == null 
                        ? queryable.Where(s => s.IdSmartReport != null) 
                        : queryable.Where(s => s.IdSmartReport != idSmartReport);
                default:
                    return idSmartReport == null 
                        ? queryable.Where(s => s.IdSmartReport == null) 
                        : queryable.Where(s => s.IdSmartReport == idSmartReport);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.IdSmartReport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idSmartReport">IdSmartReport to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByIdSmartReport(this IQueryable<SmartSocial.Data.SocialPost> queryable, int? idSmartReport, params int?[] additionalValues)
        {
            var idSmartReportList = new List<int?> { idSmartReport };

            if (additionalValues != null)
                idSmartReportList.AddRange(additionalValues);
            else
                idSmartReportList.Add(null);

            if (idSmartReportList.Count == 1)
                return queryable.ByIdSmartReport(idSmartReportList[0]);

            return queryable.ByIdSmartReport(idSmartReportList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.IdSmartReport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByIdSmartReport(this IQueryable<SmartSocial.Data.SocialPost> queryable, IEnumerable<int?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SocialPost, bool>("IdSmartReport", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.SocialNetwork"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="socialNetwork">SocialNetwork to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> BySocialNetwork(this IQueryable<SmartSocial.Data.SocialPost> queryable, string socialNetwork)
        {
            // support nulls
            return socialNetwork == null 
                ? queryable.Where(s => s.SocialNetwork == null) 
                : queryable.Where(s => s.SocialNetwork == socialNetwork);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.SocialNetwork"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="socialNetwork">SocialNetwork to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> BySocialNetwork(this IQueryable<SmartSocial.Data.SocialPost> queryable, ContainmentOperator containmentOperator, string socialNetwork)
        {
            if (socialNetwork == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("socialNetwork", "Parameter 'socialNetwork' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.SocialNetwork.Contains(socialNetwork));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.SocialNetwork.StartsWith(socialNetwork));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.SocialNetwork.EndsWith(socialNetwork));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.SocialNetwork.Contains(socialNetwork) == false);
                case ContainmentOperator.NotEquals:
                    return socialNetwork == null 
                        ? queryable.Where(s => s.SocialNetwork != null) 
                        : queryable.Where(s => s.SocialNetwork != socialNetwork);
                default:
                    return socialNetwork == null 
                        ? queryable.Where(s => s.SocialNetwork == null) 
                        : queryable.Where(s => s.SocialNetwork == socialNetwork);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.SocialNetwork"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="socialNetwork">SocialNetwork to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> BySocialNetwork(this IQueryable<SmartSocial.Data.SocialPost> queryable, string socialNetwork, params string[] additionalValues)
        {
            var socialNetworkList = new List<string> { socialNetwork };

            if (additionalValues != null)
                socialNetworkList.AddRange(additionalValues);
            else
                socialNetworkList.Add(null);

            if (socialNetworkList.Count == 1)
                return queryable.BySocialNetwork(socialNetworkList[0]);

            return queryable.BySocialNetwork(socialNetworkList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.SocialNetwork"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> BySocialNetwork(this IQueryable<SmartSocial.Data.SocialPost> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SocialPost, bool>("SocialNetwork", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.SenderScreenName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="senderScreenName">SenderScreenName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> BySenderScreenName(this IQueryable<SmartSocial.Data.SocialPost> queryable, string senderScreenName)
        {
            // support nulls
            return senderScreenName == null 
                ? queryable.Where(s => s.SenderScreenName == null) 
                : queryable.Where(s => s.SenderScreenName == senderScreenName);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.SenderScreenName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="senderScreenName">SenderScreenName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> BySenderScreenName(this IQueryable<SmartSocial.Data.SocialPost> queryable, ContainmentOperator containmentOperator, string senderScreenName)
        {
            if (senderScreenName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("senderScreenName", "Parameter 'senderScreenName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.SenderScreenName.Contains(senderScreenName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.SenderScreenName.StartsWith(senderScreenName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.SenderScreenName.EndsWith(senderScreenName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.SenderScreenName.Contains(senderScreenName) == false);
                case ContainmentOperator.NotEquals:
                    return senderScreenName == null 
                        ? queryable.Where(s => s.SenderScreenName != null) 
                        : queryable.Where(s => s.SenderScreenName != senderScreenName);
                default:
                    return senderScreenName == null 
                        ? queryable.Where(s => s.SenderScreenName == null) 
                        : queryable.Where(s => s.SenderScreenName == senderScreenName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.SenderScreenName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="senderScreenName">SenderScreenName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> BySenderScreenName(this IQueryable<SmartSocial.Data.SocialPost> queryable, string senderScreenName, params string[] additionalValues)
        {
            var senderScreenNameList = new List<string> { senderScreenName };

            if (additionalValues != null)
                senderScreenNameList.AddRange(additionalValues);
            else
                senderScreenNameList.Add(null);

            if (senderScreenNameList.Count == 1)
                return queryable.BySenderScreenName(senderScreenNameList[0]);

            return queryable.BySenderScreenName(senderScreenNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.SenderScreenName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> BySenderScreenName(this IQueryable<SmartSocial.Data.SocialPost> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SocialPost, bool>("SenderScreenName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.SenderProfileImgUrl"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="senderProfileImgUrl">SenderProfileImgUrl to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> BySenderProfileImgUrl(this IQueryable<SmartSocial.Data.SocialPost> queryable, string senderProfileImgUrl)
        {
            // support nulls
            return senderProfileImgUrl == null 
                ? queryable.Where(s => s.SenderProfileImgUrl == null) 
                : queryable.Where(s => s.SenderProfileImgUrl == senderProfileImgUrl);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.SenderProfileImgUrl"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="senderProfileImgUrl">SenderProfileImgUrl to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> BySenderProfileImgUrl(this IQueryable<SmartSocial.Data.SocialPost> queryable, ContainmentOperator containmentOperator, string senderProfileImgUrl)
        {
            if (senderProfileImgUrl == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("senderProfileImgUrl", "Parameter 'senderProfileImgUrl' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.SenderProfileImgUrl.Contains(senderProfileImgUrl));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.SenderProfileImgUrl.StartsWith(senderProfileImgUrl));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.SenderProfileImgUrl.EndsWith(senderProfileImgUrl));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.SenderProfileImgUrl.Contains(senderProfileImgUrl) == false);
                case ContainmentOperator.NotEquals:
                    return senderProfileImgUrl == null 
                        ? queryable.Where(s => s.SenderProfileImgUrl != null) 
                        : queryable.Where(s => s.SenderProfileImgUrl != senderProfileImgUrl);
                default:
                    return senderProfileImgUrl == null 
                        ? queryable.Where(s => s.SenderProfileImgUrl == null) 
                        : queryable.Where(s => s.SenderProfileImgUrl == senderProfileImgUrl);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.SenderProfileImgUrl"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="senderProfileImgUrl">SenderProfileImgUrl to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> BySenderProfileImgUrl(this IQueryable<SmartSocial.Data.SocialPost> queryable, string senderProfileImgUrl, params string[] additionalValues)
        {
            var senderProfileImgUrlList = new List<string> { senderProfileImgUrl };

            if (additionalValues != null)
                senderProfileImgUrlList.AddRange(additionalValues);
            else
                senderProfileImgUrlList.Add(null);

            if (senderProfileImgUrlList.Count == 1)
                return queryable.BySenderProfileImgUrl(senderProfileImgUrlList[0]);

            return queryable.BySenderProfileImgUrl(senderProfileImgUrlList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.SenderProfileImgUrl"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> BySenderProfileImgUrl(this IQueryable<SmartSocial.Data.SocialPost> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SocialPost, bool>("SenderProfileImgUrl", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.SenderFollowersCount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="senderFollowersCount">SenderFollowersCount to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> BySenderFollowersCount(this IQueryable<SmartSocial.Data.SocialPost> queryable, int? senderFollowersCount)
        {
            // support nulls
            return senderFollowersCount == null 
                ? queryable.Where(s => s.SenderFollowersCount == null) 
                : queryable.Where(s => s.SenderFollowersCount == senderFollowersCount);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.SenderFollowersCount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="senderFollowersCount">SenderFollowersCount to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> BySenderFollowersCount(this IQueryable<SmartSocial.Data.SocialPost> queryable, ComparisonOperator comparisonOperator, int? senderFollowersCount)
        {
            if (senderFollowersCount == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("senderFollowersCount", "Parameter 'senderFollowersCount' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.SenderFollowersCount > senderFollowersCount);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.SenderFollowersCount >= senderFollowersCount);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.SenderFollowersCount < senderFollowersCount);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.SenderFollowersCount <= senderFollowersCount);
                case ComparisonOperator.NotEquals:
                    return senderFollowersCount == null 
                        ? queryable.Where(s => s.SenderFollowersCount != null) 
                        : queryable.Where(s => s.SenderFollowersCount != senderFollowersCount);
                default:
                    return senderFollowersCount == null 
                        ? queryable.Where(s => s.SenderFollowersCount == null) 
                        : queryable.Where(s => s.SenderFollowersCount == senderFollowersCount);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.SenderFollowersCount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="senderFollowersCount">SenderFollowersCount to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> BySenderFollowersCount(this IQueryable<SmartSocial.Data.SocialPost> queryable, int? senderFollowersCount, params int?[] additionalValues)
        {
            var senderFollowersCountList = new List<int?> { senderFollowersCount };

            if (additionalValues != null)
                senderFollowersCountList.AddRange(additionalValues);
            else
                senderFollowersCountList.Add(null);

            if (senderFollowersCountList.Count == 1)
                return queryable.BySenderFollowersCount(senderFollowersCountList[0]);

            return queryable.BySenderFollowersCount(senderFollowersCountList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.SenderFollowersCount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> BySenderFollowersCount(this IQueryable<SmartSocial.Data.SocialPost> queryable, IEnumerable<int?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SocialPost, bool>("SenderFollowersCount", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.Message"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="message">Message to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByMessage(this IQueryable<SmartSocial.Data.SocialPost> queryable, string message)
        {
            // support nulls
            return message == null 
                ? queryable.Where(s => s.Message == null) 
                : queryable.Where(s => s.Message == message);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.Message"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="message">Message to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByMessage(this IQueryable<SmartSocial.Data.SocialPost> queryable, ContainmentOperator containmentOperator, string message)
        {
            if (message == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("message", "Parameter 'message' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Message.Contains(message));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Message.StartsWith(message));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Message.EndsWith(message));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Message.Contains(message) == false);
                case ContainmentOperator.NotEquals:
                    return message == null 
                        ? queryable.Where(s => s.Message != null) 
                        : queryable.Where(s => s.Message != message);
                default:
                    return message == null 
                        ? queryable.Where(s => s.Message == null) 
                        : queryable.Where(s => s.Message == message);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.Message"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="message">Message to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByMessage(this IQueryable<SmartSocial.Data.SocialPost> queryable, string message, params string[] additionalValues)
        {
            var messageList = new List<string> { message };

            if (additionalValues != null)
                messageList.AddRange(additionalValues);
            else
                messageList.Add(null);

            if (messageList.Count == 1)
                return queryable.ByMessage(messageList[0]);

            return queryable.ByMessage(messageList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.Message"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByMessage(this IQueryable<SmartSocial.Data.SocialPost> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SocialPost, bool>("Message", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.MessageCreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="messageCreatedDate">MessageCreatedDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByMessageCreatedDate(this IQueryable<SmartSocial.Data.SocialPost> queryable, System.DateTime? messageCreatedDate)
        {
            // support nulls
            return messageCreatedDate == null 
                ? queryable.Where(s => s.MessageCreatedDate == null) 
                : queryable.Where(s => s.MessageCreatedDate == messageCreatedDate);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.MessageCreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="messageCreatedDate">MessageCreatedDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByMessageCreatedDate(this IQueryable<SmartSocial.Data.SocialPost> queryable, ComparisonOperator comparisonOperator, System.DateTime? messageCreatedDate)
        {
            if (messageCreatedDate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("messageCreatedDate", "Parameter 'messageCreatedDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.MessageCreatedDate > messageCreatedDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.MessageCreatedDate >= messageCreatedDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.MessageCreatedDate < messageCreatedDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.MessageCreatedDate <= messageCreatedDate);
                case ComparisonOperator.NotEquals:
                    return messageCreatedDate == null 
                        ? queryable.Where(s => s.MessageCreatedDate != null) 
                        : queryable.Where(s => s.MessageCreatedDate != messageCreatedDate);
                default:
                    return messageCreatedDate == null 
                        ? queryable.Where(s => s.MessageCreatedDate == null) 
                        : queryable.Where(s => s.MessageCreatedDate == messageCreatedDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.MessageCreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="messageCreatedDate">MessageCreatedDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByMessageCreatedDate(this IQueryable<SmartSocial.Data.SocialPost> queryable, System.DateTime? messageCreatedDate, params System.DateTime?[] additionalValues)
        {
            var messageCreatedDateList = new List<System.DateTime?> { messageCreatedDate };

            if (additionalValues != null)
                messageCreatedDateList.AddRange(additionalValues);
            else
                messageCreatedDateList.Add(null);

            if (messageCreatedDateList.Count == 1)
                return queryable.ByMessageCreatedDate(messageCreatedDateList[0]);

            return queryable.ByMessageCreatedDate(messageCreatedDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.MessageCreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByMessageCreatedDate(this IQueryable<SmartSocial.Data.SocialPost> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SocialPost, bool>("MessageCreatedDate", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.Permalink"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="permalink">Permalink to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByPermalink(this IQueryable<SmartSocial.Data.SocialPost> queryable, string permalink)
        {
            // support nulls
            return permalink == null 
                ? queryable.Where(s => s.Permalink == null) 
                : queryable.Where(s => s.Permalink == permalink);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.Permalink"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="permalink">Permalink to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByPermalink(this IQueryable<SmartSocial.Data.SocialPost> queryable, ContainmentOperator containmentOperator, string permalink)
        {
            if (permalink == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("permalink", "Parameter 'permalink' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Permalink.Contains(permalink));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Permalink.StartsWith(permalink));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Permalink.EndsWith(permalink));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Permalink.Contains(permalink) == false);
                case ContainmentOperator.NotEquals:
                    return permalink == null 
                        ? queryable.Where(s => s.Permalink != null) 
                        : queryable.Where(s => s.Permalink != permalink);
                default:
                    return permalink == null 
                        ? queryable.Where(s => s.Permalink == null) 
                        : queryable.Where(s => s.Permalink == permalink);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.Permalink"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="permalink">Permalink to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByPermalink(this IQueryable<SmartSocial.Data.SocialPost> queryable, string permalink, params string[] additionalValues)
        {
            var permalinkList = new List<string> { permalink };

            if (additionalValues != null)
                permalinkList.AddRange(additionalValues);
            else
                permalinkList.Add(null);

            if (permalinkList.Count == 1)
                return queryable.ByPermalink(permalinkList[0]);

            return queryable.ByPermalink(permalinkList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.Permalink"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByPermalink(this IQueryable<SmartSocial.Data.SocialPost> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SocialPost, bool>("Permalink", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.Country"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="country">Country to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByCountry(this IQueryable<SmartSocial.Data.SocialPost> queryable, string country)
        {
            // support nulls
            return country == null 
                ? queryable.Where(s => s.Country == null) 
                : queryable.Where(s => s.Country == country);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.Country"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="country">Country to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByCountry(this IQueryable<SmartSocial.Data.SocialPost> queryable, ContainmentOperator containmentOperator, string country)
        {
            if (country == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("country", "Parameter 'country' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Country.Contains(country));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Country.StartsWith(country));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Country.EndsWith(country));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Country.Contains(country) == false);
                case ContainmentOperator.NotEquals:
                    return country == null 
                        ? queryable.Where(s => s.Country != null) 
                        : queryable.Where(s => s.Country != country);
                default:
                    return country == null 
                        ? queryable.Where(s => s.Country == null) 
                        : queryable.Where(s => s.Country == country);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.Country"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="country">Country to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByCountry(this IQueryable<SmartSocial.Data.SocialPost> queryable, string country, params string[] additionalValues)
        {
            var countryList = new List<string> { country };

            if (additionalValues != null)
                countryList.AddRange(additionalValues);
            else
                countryList.Add(null);

            if (countryList.Count == 1)
                return queryable.ByCountry(countryList[0]);

            return queryable.ByCountry(countryList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.Country"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByCountry(this IQueryable<SmartSocial.Data.SocialPost> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SocialPost, bool>("Country", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.Product"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="product">Product to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByProduct(this IQueryable<SmartSocial.Data.SocialPost> queryable, string product)
        {
            // support nulls
            return product == null 
                ? queryable.Where(s => s.Product == null) 
                : queryable.Where(s => s.Product == product);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.Product"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="product">Product to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByProduct(this IQueryable<SmartSocial.Data.SocialPost> queryable, ContainmentOperator containmentOperator, string product)
        {
            if (product == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("product", "Parameter 'product' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Product.Contains(product));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Product.StartsWith(product));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Product.EndsWith(product));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Product.Contains(product) == false);
                case ContainmentOperator.NotEquals:
                    return product == null 
                        ? queryable.Where(s => s.Product != null) 
                        : queryable.Where(s => s.Product != product);
                default:
                    return product == null 
                        ? queryable.Where(s => s.Product == null) 
                        : queryable.Where(s => s.Product == product);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.Product"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="product">Product to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByProduct(this IQueryable<SmartSocial.Data.SocialPost> queryable, string product, params string[] additionalValues)
        {
            var productList = new List<string> { product };

            if (additionalValues != null)
                productList.AddRange(additionalValues);
            else
                productList.Add(null);

            if (productList.Count == 1)
                return queryable.ByProduct(productList[0]);

            return queryable.ByProduct(productList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.SocialPost.Product"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.SocialPost> ByProduct(this IQueryable<SmartSocial.Data.SocialPost> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.SocialPost, bool>("Product", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<SmartSocial.Data.SmartSocialdbDataContext, int, SmartSocial.Data.SocialPost> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (SmartSocial.Data.SmartSocialdbDataContext db, int idSocialPost) =>
                        db.SocialPost.FirstOrDefault(s => s.IdSocialPost == idSocialPost));

        }
        #endregion
    }
}
#pragma warning restore 1591
