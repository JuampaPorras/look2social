#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace SmartSocial.Data
{
    /// <summary>
    /// The query extension class for ServiceDelivery.
    /// </summary>
    public static partial class ServiceDeliveryExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static SmartSocial.Data.ServiceDelivery GetByKey(this IQueryable<SmartSocial.Data.ServiceDelivery> queryable, int idServiceDelivery)
        {
            var entity = queryable as System.Data.Linq.Table<SmartSocial.Data.ServiceDelivery>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((SmartSocial.Data.SmartSocialdbDataContext)entity.Context, idServiceDelivery);

            return queryable.FirstOrDefault(s => s.IdServiceDelivery == idServiceDelivery);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<SmartSocial.Data.ServiceDelivery> table, int idServiceDelivery)
        {
            return table.Delete(s => s.IdServiceDelivery == idServiceDelivery);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ServiceDelivery.IdServiceDelivery"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idServiceDelivery">IdServiceDelivery to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ServiceDelivery> ByIdServiceDelivery(this IQueryable<SmartSocial.Data.ServiceDelivery> queryable, int idServiceDelivery)
        {
            return queryable.Where(s => s.IdServiceDelivery == idServiceDelivery);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ServiceDelivery.IdServiceDelivery"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idServiceDelivery">IdServiceDelivery to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ServiceDelivery> ByIdServiceDelivery(this IQueryable<SmartSocial.Data.ServiceDelivery> queryable, ComparisonOperator comparisonOperator, int idServiceDelivery)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.IdServiceDelivery > idServiceDelivery);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.IdServiceDelivery >= idServiceDelivery);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.IdServiceDelivery < idServiceDelivery);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.IdServiceDelivery <= idServiceDelivery);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.IdServiceDelivery != idServiceDelivery);
                default:
                    return queryable.Where(s => s.IdServiceDelivery == idServiceDelivery);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ServiceDelivery.IdServiceDelivery"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idServiceDelivery">IdServiceDelivery to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ServiceDelivery> ByIdServiceDelivery(this IQueryable<SmartSocial.Data.ServiceDelivery> queryable, int idServiceDelivery, params int[] additionalValues)
        {
            var idServiceDeliveryList = new List<int> { idServiceDelivery };

            if (additionalValues != null)
                idServiceDeliveryList.AddRange(additionalValues);

            if (idServiceDeliveryList.Count == 1)
                return queryable.ByIdServiceDelivery(idServiceDeliveryList[0]);

            return queryable.ByIdServiceDelivery(idServiceDeliveryList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ServiceDelivery.IdServiceDelivery"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ServiceDelivery> ByIdServiceDelivery(this IQueryable<SmartSocial.Data.ServiceDelivery> queryable, IEnumerable<int> values)
        {
            return queryable.Where(s => values.Contains(s.IdServiceDelivery));
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ServiceDelivery.DateDelivered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateDelivered">DateDelivered to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ServiceDelivery> ByDateDelivered(this IQueryable<SmartSocial.Data.ServiceDelivery> queryable, System.DateTime? dateDelivered)
        {
            // support nulls
            return dateDelivered == null 
                ? queryable.Where(s => s.DateDelivered == null) 
                : queryable.Where(s => s.DateDelivered == dateDelivered);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ServiceDelivery.DateDelivered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateDelivered">DateDelivered to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ServiceDelivery> ByDateDelivered(this IQueryable<SmartSocial.Data.ServiceDelivery> queryable, ComparisonOperator comparisonOperator, System.DateTime? dateDelivered)
        {
            if (dateDelivered == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("dateDelivered", "Parameter 'dateDelivered' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.DateDelivered > dateDelivered);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.DateDelivered >= dateDelivered);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.DateDelivered < dateDelivered);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.DateDelivered <= dateDelivered);
                case ComparisonOperator.NotEquals:
                    return dateDelivered == null 
                        ? queryable.Where(s => s.DateDelivered != null) 
                        : queryable.Where(s => s.DateDelivered != dateDelivered);
                default:
                    return dateDelivered == null 
                        ? queryable.Where(s => s.DateDelivered == null) 
                        : queryable.Where(s => s.DateDelivered == dateDelivered);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ServiceDelivery.DateDelivered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateDelivered">DateDelivered to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ServiceDelivery> ByDateDelivered(this IQueryable<SmartSocial.Data.ServiceDelivery> queryable, System.DateTime? dateDelivered, params System.DateTime?[] additionalValues)
        {
            var dateDeliveredList = new List<System.DateTime?> { dateDelivered };

            if (additionalValues != null)
                dateDeliveredList.AddRange(additionalValues);
            else
                dateDeliveredList.Add(null);

            if (dateDeliveredList.Count == 1)
                return queryable.ByDateDelivered(dateDeliveredList[0]);

            return queryable.ByDateDelivered(dateDeliveredList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ServiceDelivery.DateDelivered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ServiceDelivery> ByDateDelivered(this IQueryable<SmartSocial.Data.ServiceDelivery> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.ServiceDelivery, bool>("DateDelivered", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ServiceDelivery.IdServiceSubscription"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idServiceSubscription">IdServiceSubscription to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ServiceDelivery> ByIdServiceSubscription(this IQueryable<SmartSocial.Data.ServiceDelivery> queryable, int? idServiceSubscription)
        {
            // support nulls
            return idServiceSubscription == null 
                ? queryable.Where(s => s.IdServiceSubscription == null) 
                : queryable.Where(s => s.IdServiceSubscription == idServiceSubscription);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ServiceDelivery.IdServiceSubscription"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idServiceSubscription">IdServiceSubscription to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ServiceDelivery> ByIdServiceSubscription(this IQueryable<SmartSocial.Data.ServiceDelivery> queryable, ComparisonOperator comparisonOperator, int? idServiceSubscription)
        {
            if (idServiceSubscription == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("idServiceSubscription", "Parameter 'idServiceSubscription' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.IdServiceSubscription > idServiceSubscription);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.IdServiceSubscription >= idServiceSubscription);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.IdServiceSubscription < idServiceSubscription);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.IdServiceSubscription <= idServiceSubscription);
                case ComparisonOperator.NotEquals:
                    return idServiceSubscription == null 
                        ? queryable.Where(s => s.IdServiceSubscription != null) 
                        : queryable.Where(s => s.IdServiceSubscription != idServiceSubscription);
                default:
                    return idServiceSubscription == null 
                        ? queryable.Where(s => s.IdServiceSubscription == null) 
                        : queryable.Where(s => s.IdServiceSubscription == idServiceSubscription);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ServiceDelivery.IdServiceSubscription"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idServiceSubscription">IdServiceSubscription to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ServiceDelivery> ByIdServiceSubscription(this IQueryable<SmartSocial.Data.ServiceDelivery> queryable, int? idServiceSubscription, params int?[] additionalValues)
        {
            var idServiceSubscriptionList = new List<int?> { idServiceSubscription };

            if (additionalValues != null)
                idServiceSubscriptionList.AddRange(additionalValues);
            else
                idServiceSubscriptionList.Add(null);

            if (idServiceSubscriptionList.Count == 1)
                return queryable.ByIdServiceSubscription(idServiceSubscriptionList[0]);

            return queryable.ByIdServiceSubscription(idServiceSubscriptionList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ServiceDelivery.IdServiceSubscription"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ServiceDelivery> ByIdServiceSubscription(this IQueryable<SmartSocial.Data.ServiceDelivery> queryable, IEnumerable<int?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.ServiceDelivery, bool>("IdServiceSubscription", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ServiceDelivery.Insights"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="insights">Insights to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ServiceDelivery> ByInsights(this IQueryable<SmartSocial.Data.ServiceDelivery> queryable, string insights)
        {
            // support nulls
            return insights == null 
                ? queryable.Where(s => s.Insights == null) 
                : queryable.Where(s => s.Insights == insights);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ServiceDelivery.Insights"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="insights">Insights to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ServiceDelivery> ByInsights(this IQueryable<SmartSocial.Data.ServiceDelivery> queryable, ContainmentOperator containmentOperator, string insights)
        {
            if (insights == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("insights", "Parameter 'insights' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Insights.Contains(insights));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Insights.StartsWith(insights));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Insights.EndsWith(insights));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Insights.Contains(insights) == false);
                case ContainmentOperator.NotEquals:
                    return insights == null 
                        ? queryable.Where(s => s.Insights != null) 
                        : queryable.Where(s => s.Insights != insights);
                default:
                    return insights == null 
                        ? queryable.Where(s => s.Insights == null) 
                        : queryable.Where(s => s.Insights == insights);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ServiceDelivery.Insights"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="insights">Insights to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ServiceDelivery> ByInsights(this IQueryable<SmartSocial.Data.ServiceDelivery> queryable, string insights, params string[] additionalValues)
        {
            var insightsList = new List<string> { insights };

            if (additionalValues != null)
                insightsList.AddRange(additionalValues);
            else
                insightsList.Add(null);

            if (insightsList.Count == 1)
                return queryable.ByInsights(insightsList[0]);

            return queryable.ByInsights(insightsList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ServiceDelivery.Insights"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ServiceDelivery> ByInsights(this IQueryable<SmartSocial.Data.ServiceDelivery> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.ServiceDelivery, bool>("Insights", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ServiceDelivery.DeliveryDateTo"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="deliveryDateTo">DeliveryDateTo to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ServiceDelivery> ByDeliveryDateTo(this IQueryable<SmartSocial.Data.ServiceDelivery> queryable, System.DateTime? deliveryDateTo)
        {
            // support nulls
            return deliveryDateTo == null 
                ? queryable.Where(s => s.DeliveryDateTo == null) 
                : queryable.Where(s => s.DeliveryDateTo == deliveryDateTo);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ServiceDelivery.DeliveryDateTo"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="deliveryDateTo">DeliveryDateTo to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ServiceDelivery> ByDeliveryDateTo(this IQueryable<SmartSocial.Data.ServiceDelivery> queryable, ComparisonOperator comparisonOperator, System.DateTime? deliveryDateTo)
        {
            if (deliveryDateTo == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("deliveryDateTo", "Parameter 'deliveryDateTo' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.DeliveryDateTo > deliveryDateTo);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.DeliveryDateTo >= deliveryDateTo);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.DeliveryDateTo < deliveryDateTo);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.DeliveryDateTo <= deliveryDateTo);
                case ComparisonOperator.NotEquals:
                    return deliveryDateTo == null 
                        ? queryable.Where(s => s.DeliveryDateTo != null) 
                        : queryable.Where(s => s.DeliveryDateTo != deliveryDateTo);
                default:
                    return deliveryDateTo == null 
                        ? queryable.Where(s => s.DeliveryDateTo == null) 
                        : queryable.Where(s => s.DeliveryDateTo == deliveryDateTo);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ServiceDelivery.DeliveryDateTo"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="deliveryDateTo">DeliveryDateTo to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ServiceDelivery> ByDeliveryDateTo(this IQueryable<SmartSocial.Data.ServiceDelivery> queryable, System.DateTime? deliveryDateTo, params System.DateTime?[] additionalValues)
        {
            var deliveryDateToList = new List<System.DateTime?> { deliveryDateTo };

            if (additionalValues != null)
                deliveryDateToList.AddRange(additionalValues);
            else
                deliveryDateToList.Add(null);

            if (deliveryDateToList.Count == 1)
                return queryable.ByDeliveryDateTo(deliveryDateToList[0]);

            return queryable.ByDeliveryDateTo(deliveryDateToList);
        }

        /// <summary>
        /// Gets a query for <see cref="SmartSocial.Data.ServiceDelivery.DeliveryDateTo"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<SmartSocial.Data.ServiceDelivery> ByDeliveryDateTo(this IQueryable<SmartSocial.Data.ServiceDelivery> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<SmartSocial.Data.ServiceDelivery, bool>("DeliveryDateTo", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<SmartSocial.Data.SmartSocialdbDataContext, int, SmartSocial.Data.ServiceDelivery> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (SmartSocial.Data.SmartSocialdbDataContext db, int idServiceDelivery) =>
                        db.ServiceDelivery.FirstOrDefault(s => s.IdServiceDelivery == idServiceDelivery));

        }
        #endregion
    }
}
#pragma warning restore 1591
